{"version":3,"sources":["../node_modules/peerjs/dist sync","components/types.ts","utils/colorConversions.ts","components/common/Button.tsx","components/practice/PracticeOver.tsx","components/practice/HudPractice.tsx","components/duel/DuelOver.tsx","components/duel/HudDuel.tsx","components/intro/IntroScreen.tsx","components/info/About.tsx","utils/uuid.ts","components/lobby/getLobbyState.ts","components/lobby/peerLogic.ts","components/lobby/Lobby.tsx","components/duel/copyToClipboard.js","components/lobby/ActionButton.tsx","components/Hud.tsx","components/duel/TimeCountdown.tsx","utils/loop/animationLoop.ts","utils/loop/deltaLoop.ts","utils/loop/timeVariableLoop.ts","pixi/boids/makeBoidsViews.ts","game/makeCollectors.ts","game/collectorTouchedTween.js","pixi/addDisplayDragListener.ts","game/addDropFunctionality.ts","pixi/addDisplayClickListener.ts","scentmap/scent/makeScentDropper.ts","game/init/makeScentDroppers.tsx","utils/geom.ts","boids/makeBoid.ts","boids/behavior/separation.ts","boids/behavior/cohesion.ts","boids/steering/seek.ts","boids/steering/applyForce.ts","boids/behavior/wander.ts","boids/GridBoids.ts","boids/getSteering.ts","boids/makeBoids.ts","game/init/boidTemplate.tsx","game/init/makeBoids.tsx","pixi/hexgrid/makeHexesGrid.ts","game/init/makeAvoidScent.tsx","scentmap/scent/makeScent.tsx","scentmap/scent/makeUpdateScent.ts","pixi/scent/makeUpdateHexColorsByScent.tsx","scentmap/hexgrid/hexagons.ts","scentmap/hexgrid/Grid.ts","pixi/makePixiApp.ts","pixi/hexgrid/makeHexTexture.ts","pixi/hexgrid/makeGridCamera.ts","pixi/makeCamera.ts","utils/simplexNoise.ts","pixi/hexgrid/repaintWithNoise.ts","pixi/makeDisplay.ts","pixi/hexgrid/addPrettyHexesClick.ts","pixi/walls/makeWallsView.ts","game/init/makeMap.tsx","scentmap/walls/makeWalls.tsx","game/makeFillbars.ts","game/init/initialize.tsx","App.tsx","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","GAME_STATE","randomColor","color","i","Math","floor","random","rgbArrayToHex","arr","length","r","g","b","toHex","x","hex","round","toString","parseInt","hexToRgb","result","exec","hue2rgb","p","q","t","hslToRgb","h","s","l","hexValueToString","value","hueString","Button","styleDefault","width","height","backgroundColor","colors","default","display","transition","style","useState","isDown","setisDown","isHover","setIsHover","setStyle","colorDown","down","colorHover","hover","useEffect","disabled","pointerEvents","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onClick","gridRow","gridColumn","alignSelf","justifySelf","fontWeight","fontSize","padding","userSelect","textStyle","title","children","PracticeOver","data","window","innerHeight","innerWidth","gridTemplateRows","gridTemplateColumns","textAlign","actions","startGame","gameState","intro","fontStyle","textShadow","position","HudPractice","score","top","topValue","settopValue","onBackKeyDown","useCallback","document","addEventListener","removeEventListener","autorun","fillbars","max","topFillbarValue","settopFillbarValue","isGameOver","setisGameOver","v","maxWidth","topColor","opacity","left","isMobile","console","log","margin","bottom","DuelOver","reset","lobby","HudDuel","bottomValue","setBottomValue","bottomFillbarValue","setBottomFillbarValue","settopColor","bottomColor","setbottomColor","getStringVal","right","IntroScreen","isVisible","setisVisible","practice","about","About","whiteSpace","paddingLeft","paddingRight","uuid","a","replace","getLobbyState","lobbyState","observable","peer","status","ownId","ownPeerData","isReady","nodesTouched","otherPeerData","connectTo","onConnected","state","onData","onConnection","isConnected","Peer","on","conn","send","bind","Promise","reject","addOnConnect","connect","connectionResult","isOP","peerLogic","d","action","boids","placeSelf","paddingBottom","rowStyle","Lobby","friendKey","setfriendKey","setStatus","str","el","createElement","setAttribute","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","paddingTop","navigator","clipboard","readText","then","clipText","type","onChange","target","duel","reply","marginTop","Boolean","ActionButton","Hud","hud","setgameState","TimeCountdown","isTimed","setisTimed","tLeft","ceil","maxDuration","duration","secondsLeft","setsecondsLeft","endGame","touchAction","animationLoop","callback","requestAnimationFrame","cancelAnimationFrame","current","Date","now","timeVariableLoop","time","nc","delta","deltaLoop","speed","makeBoidsViews","tex","quantity","maxBoids","view","ParticleContainer","uvs","tint","rotation","vertices","sprites","Array","from","sprite","Sprite","addChild","makeCollectors","grid","callbacks","n","all","views","hexTexture","camera","effectViews","effectSprites","forEach","posAtNode","getPosAtNode","set","y","scale","effectSprite","anchor","update","boid","ind","indexOf","node","removeBoid","Tween","alpha","to","start","easing","Quadratic","Out","collectorTouchedTween","onTopScored","onBottomScored","isDragging","addDropFunctionality","onDrag","onTap","onStart","onEnd","hs","gridLayout","hexSize","getHexIdByPixel","world","addDisplayClickListener","onMove","getNodeByPixel","point","global","toWorld","isNaN","addDisplayDragListener","makeScentDropper","scent","index","seconds","elapsed","dropScent","scentGrid","clamp","limit","magnitude","normalize","multiplyScalar","distanceSq","dx","dy","sqrt","m","scalar","divideByScalar","addVector","subtractVector","makeBoid","template","velocity","drag","thrust","radius","separation","neighbors","steer","numNeighbors","neighbor","diff","cohesion","seek","applyForce","vector","force","wander","angle","vec","ang","cos","sin","rotateVector","GridBoids","boidTemplate","walls","scentToAvoid","boidViews","occupiableNodes","numNodes","this","initialize","parent","updateBoids","updateViews","push","nodeId","splice","pop","syncWith","hue","oNodes","delete","neighborNodes","gridArr","filter","obstacles","map","highestScent","avoidGoal","avoidVal","olfaction","avoidGoals","forces","steering","getSteering","weights","avoidObstacles","avoidScent","applySteering","add","numBoids","boidViewsObj","Set","motion","seekScent","alignment","populateBoids","addBoidAtNode","makeHexesGrid","PIXI","nodes","makeAvoidScent","spread","evaporation","minValue","permeability","makeScent","updateScent","w","targets","scentVal","validTargets","distribute","min","dSlice","updateScentView","gridSprites","average","makeUpdateHexColorsByScent","Point","Hex","n8s","roundHex","direction","directions","k","diagonals","abs","subtract","len","qi","ri","si","qDiff","rDiff","sDiff","N","distance","aNudge","bNudge","results","step","lerp","OffsetCoord","col","row","offset","EVEN","ODD","DoubledCoord","Orientation","f0","f1","f2","f3","b0","b1","b2","b3","startAngle","Layout","orientation","size","origin","M","pt","corner","PI","corners","center","hexToPixel","hexCornerOffset","pointy","flat","makeNeighbors2","concat","apply","hh","Grid","edges","gridHash","_layout","_hexes","minCol","maxCol","minRow","maxRow","rdoubledToCube","hexagons","columns","rows","hIds","reduce","acc","cur","entry","neighbors2","String","findIndex","polygonCorners","pixelToHex","makePixiApp","app","transparent","makeHexTexture","graphics","lineStyle","beginFill","pixiCorners","getHexShape","c","poly","drawPolygon","endFill","renderer","generateTexture","NEAREST","makeGridCamera","pixi","lastNode","cam","worldWidth","worldHeight","viewport","Viewport","screenWidth","screenHeight","stage","makeCamera","underflow","clampZoom","minWidth","minHeight","Grad","z","grad3","perm","gradP","G3","simplex3","xin","yin","zin","i1","j1","k1","i2","j2","k2","j","x0","y0","z0","x1","y1","z1","x2","y2","z2","x3","y3","z3","gi0","gi1","gi2","gi3","t0","t1","t2","t3","dot3","noise","BgType","repaintWithNoise","noiseScale","addPrettyHexesClick","hexes","processNodesForDistance","dist","rgb","hsl","rgbToHsl","distances","maxDist","hex2","hexPoint","getHexPosAtPixel","processNode","getDistances","makeWallsView","makeMap","gameCanvas","fill","makeWalls","bgType","none","bgSprites","repaint","animatedNoise","prettyHexesClick","staticNoise","wallsView","wallsSprites","makeDisplay","config","makeBoids","collectors","bars","updateBar","bar","makeFillbars","droppers","updates","isDropping","lastDelta","dropOwn","cost","ls","dropFromPeer","makeScentDroppers","syncPeers","isOtherGameOver","othersBoids","peerBoid","addBoid","syncBoid","makeSyncPeers","App","canvasRef","useRef","location","hash","substr","autoConnect","ref","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.42b6ca5d.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 37;","import {IBoid} from \"./../boids/makeBoids\";\r\nimport {ITime} from \"utils/loop/timeVariableLoop\";\r\n\r\nexport enum GAME_STATE {\r\n    \"intro\" = \"intro\",\r\n    \"duel\" = \"duel\",\r\n    \"practice\" = \"practice\",\r\n    \"about\" = \"about\",\r\n    \"lobby\" = \"lobby\"\r\n}\r\n\r\nexport type LobbyStatus = \"peerless\" | \"connecting\" | \"connected\" | \"awaiting-peer-ready\";\r\nexport type ConnectonResult = {send: (data: PeerData) => void; peer: string};\r\nexport type LobbyState = {\r\n    peer: string;\r\n    ownId: string;\r\n    status: LobbyStatus;\r\n    ownPeerData: PeerData;\r\n    otherPeerData: PeerData;\r\n    connectTo?: (id: string) => Promise<ConnectonResult>;\r\n    send?: (data: PeerData) => void;\r\n};\r\n\r\nexport type GameState = {\r\n    gameState: GAME_STATE;\r\n    score: {top: number; bottom: number};\r\n    colors: {top: number; bottom: number};\r\n    fillbars: {max: number; top: number; bottom: number};\r\n    actions: {reset: () => void; startGame: () => void; endGame: () => void};\r\n    time: ITime;\r\n    duration: number;\r\n    maxDuration: number;\r\n    isGameOver: boolean;\r\n    lobbyState?: LobbyState;\r\n};\r\n\r\nexport type PeerBoid = {position: {x: number; y: number}; velocity: {x: number; y: number}};\r\n\r\nexport type PeerData = {\r\n    isOP?: boolean;\r\n    isGameOver?: boolean;\r\n    isReady?: boolean;\r\n    nodesTouched?: number[];\r\n    boids?: PeerBoid[];\r\n    timeLeft?: number;\r\n    score?: {top: number; bottom: number};\r\n};\r\n","/* eslint-disable */\r\n/* eslint-disable no-unused-expressions */\r\n/* eslint-disable no-sequences */\r\n\r\nconst letters = \"0123456789ABCDEF\";\r\n\r\nexport function randomColor() {\r\n    let color = \"0x\";\r\n    for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n\r\nexport function rgbArrayToHex(arr: any) {\r\n    if (arr.length !== 3) {\r\n        return 0x000000;\r\n    }\r\n    const r = arr[0];\r\n    const g = arr[1];\r\n    const b = arr[2];\r\n    const toHex = (x: any) => {\r\n        const hex = Math.round(x).toString(16);\r\n        return hex.length === 1 ? \"0\" + hex : hex;\r\n    };\r\n    return parseInt(`${toHex(r)}${toHex(g)}${toHex(b)}`, 16);\r\n}\r\n\r\nexport function rgbToHex(rgb: {r: number; g: number; b: number}) {\r\n    return rgbArrayToHex([rgb.r, rgb.g, rgb.b]);\r\n}\r\n\r\nexport function hexToRgb(hex: number) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex.toString(16));\r\n    return result\r\n        ? {\r\n              r: parseInt(result[1], 16) || 0,\r\n              g: parseInt(result[2], 16) || 0,\r\n              b: parseInt(result[3], 16) || 0\r\n          }\r\n        : {r: 0, g: 0, b: 0};\r\n}\r\n\r\nexport function hexToRgbArray(hex: number) {\r\n    const rgb = hexToRgb(hex);\r\n    return [rgb.r, rgb.g, rgb.b];\r\n}\r\n\r\nexport function rgbToHexString(r: number, g: number, b: number) {\r\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n}\r\n\r\nexport function hexStringToRgb(hex: string) {\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : [0, 0, 0];\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSL representation\r\n */\r\nexport function rgbToHsl(r: number, g: number, b: number) {\r\n    (r /= 255), (g /= 255), (b /= 255);\r\n\r\n    const max = Math.max(r, g, b),\r\n        min = Math.min(r, g, b);\r\n    let h,\r\n        s,\r\n        // tslint:disable-next-line:prefer-const\r\n        l = (max + min) / 2;\r\n\r\n    if (max === min) {\r\n        h = s = 0; // achromatic\r\n    } else {\r\n        const d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n\r\n        h && (h /= 6);\r\n    }\r\n\r\n    return [h || 0, s || 0, l || 0];\r\n}\r\n\r\nfunction hue2rgb(p: number, q: number, t: number) {\r\n    if (t < 0) t += 1;\r\n    if (t > 1) t -= 1;\r\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n    if (t < 1 / 2) return q;\r\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n    return p;\r\n}\r\n\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  l       The lightness\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hslToRgb(h: number, s: number, l: number) {\r\n    let r, g, b;\r\n\r\n    if (s === 0) {\r\n        r = g = b = l; // achromatic\r\n    } else {\r\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        const p = 2 * l - q;\r\n\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n\r\n    return [r * 255, g * 255, b * 255];\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\nexport function rgbToHsv(r: number, g: number, b: number) {\r\n    (r /= 255), (g /= 255), (b /= 255);\r\n\r\n    const max = Math.max(r, g, b),\r\n        min = Math.min(r, g, b);\r\n    let h,\r\n        s,\r\n        // tslint:disable-next-line:prefer-const\r\n        v = max;\r\n\r\n    const d = max - min;\r\n    s = max === 0 ? 0 : d / max;\r\n\r\n    if (max === min) {\r\n        h = 0; // achromatic\r\n    } else {\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n\r\n        h && (h /= 6);\r\n    }\r\n\r\n    return [h, s, v];\r\n}\r\n\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hsvToRgb(h: number, s: number, v: number) {\r\n    let r, g, b;\r\n\r\n    const i = Math.floor(h * 6);\r\n    const f = h * 6 - i;\r\n    const p = v * (1 - s);\r\n    const q = v * (1 - f * s);\r\n    const t = v * (1 - (1 - f) * s);\r\n\r\n    switch (i % 6) {\r\n        case 0:\r\n            (r = v), (g = t), (b = p);\r\n            break;\r\n        case 1:\r\n            (r = q), (g = v), (b = p);\r\n            break;\r\n        case 2:\r\n            (r = p), (g = v), (b = t);\r\n            break;\r\n        case 3:\r\n            (r = p), (g = q), (b = v);\r\n            break;\r\n        case 4:\r\n            (r = t), (g = p), (b = v);\r\n            break;\r\n        case 5:\r\n            (r = v), (g = p), (b = q);\r\n            break;\r\n    }\r\n\r\n    return [r || 1 * 255, g || 1 * 255, b || 1 * 255];\r\n}\r\n\r\nexport function hexValueToString(value: number) {\r\n    let hueString = value.toString(16);\r\n    while (hueString.length < 6) {\r\n        hueString = \"0\" + hueString;\r\n    }\r\n    hueString = \"#\" + hueString;\r\n    return hueString;\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\nexport const Button = (p: {\r\n    title: string;\r\n    onClick?: () => void;\r\n    colors?: {default: string; hover: string; down: string};\r\n    style?: any;\r\n    textStyle?: any;\r\n    children?: any;\r\n    disabled?: boolean;\r\n}) => {\r\n    const styleDefault = {\r\n        width: \"280px\",\r\n        height: \"60px\",\r\n        backgroundColor: p.colors ? p.colors.default : \"#ffff80\",\r\n        display: \"grid\",\r\n        transition: \"all 0.15s ease-in\",\r\n        ...p.style\r\n    };\r\n    const [isDown, setisDown] = useState(false);\r\n    const [isHover, setIsHover] = useState(false);\r\n    const [style, setStyle] = useState({...styleDefault});\r\n    const colorDown = p.colors ? p.colors.down : \"green\";\r\n    const colorHover = p.colors ? p.colors.hover : \"lightgrey\";\r\n\r\n    useEffect(() => {\r\n        if (p.disabled) {\r\n            setStyle({...styleDefault, color: \"darkgrey\", backgroundColor: \"lightgrey\", pointerEvents: \"none\"});\r\n            return;\r\n        } else if (isDown) {\r\n            setStyle({...styleDefault, backgroundColor: colorDown});\r\n            return;\r\n        } else if (isHover) {\r\n            setStyle({...styleDefault, backgroundColor: colorHover});\r\n            return;\r\n        } else setStyle({...styleDefault});\r\n    }, [isDown, isHover, p.disabled]);\r\n\r\n    const onMouseEnter = () => setIsHover(true);\r\n    const onMouseLeave = () => {\r\n        setIsHover(false);\r\n        setisDown(false);\r\n    };\r\n    const onMouseDown = () => setisDown(true);\r\n    const onMouseUp = () => setisDown(false);\r\n    const onTouchStart = () => setisDown(true);\r\n    const onTouchEnd = () => setisDown(false);\r\n    return (\r\n        <div\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n            onTouchStart={onTouchStart}\r\n            onTouchEnd={onTouchEnd}\r\n            onClick={p.onClick}\r\n            style={style}>\r\n            <div\r\n                style={{\r\n                    color: \"black\",\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    fontSize: \"16pt\",\r\n                    padding: \"8px\",\r\n                    userSelect: \"none\",\r\n                    ...p.textStyle\r\n                }}>\r\n                {p.title}\r\n            </div>\r\n            {p.children}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\n\r\nexport const PracticeOver = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    return (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    fontWeight: 600,\r\n                    color: \"red\",\r\n                    fontSize: \"32pt\",\r\n                    alignSelf: \"center\",\r\n                    textAlign: \"center\"\r\n                }}>\r\n                GAME OVER\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 2,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"AGAIN!\",\r\n                        onClick: () => {\r\n                            data.actions.startGame && data.actions.startGame();\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 3,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.intro;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState, useEffect, useCallback} from \"react\";\r\nimport {GameState, GAME_STATE} from \"../types\";\r\nimport {hexValueToString} from \"utils/colorConversions\";\r\nimport {autorun} from \"mobx\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {PracticeOver} from \"./PracticeOver\";\r\nimport {isMobile} from \"react-device-detect\";\r\n\r\nconst fontStyle = {\r\n    textShadow: \"-1px -1px 0 #000,1px -1px 0 #000,-1px 1px 0 #000,1px 1px 0 #000\",\r\n    position: \"fixed\" as \"fixed\",\r\n    fontSize: \"34pt\"\r\n};\r\n\r\nexport const HudPractice = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    const [topValue, settopValue] = useState(p.data.score.top);\r\n\r\n    const onBackKeyDown = useCallback(() => {\r\n        p.data.gameState = GAME_STATE.intro;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"backbutton\", onBackKeyDown, true);\r\n        return () => {\r\n            document.removeEventListener(\"backbutton\", onBackKeyDown, false);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => settopValue(p.data.score.top));\r\n    }, [p.data.score.top]);\r\n\r\n    const [topFillbarValue, settopFillbarValue] = useState(p.data.fillbars.top / p.data.fillbars.max);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => settopFillbarValue(p.data.fillbars.top / p.data.fillbars.max));\r\n    }, []);\r\n    const [isGameOver, setisGameOver] = useState(p.data.isGameOver);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => setisGameOver(p.data.isGameOver));\r\n    }, []);\r\n    const getStringVal = (v: number) => (v > 9 ? v : `0${v}`);\r\n    const maxWidth = window.innerWidth - 100;\r\n    const topColor = hexValueToString(data.colors.top);\r\n    return (\r\n        <div>\r\n            {isGameOver && <PracticeOver {...{data}} />}\r\n            <div\r\n                style={{\r\n                    ...fontStyle,\r\n                    pointerEvents: \"none\",\r\n                    opacity: 0.75,\r\n                    top: \"25%\",\r\n                    textAlign: \"center\",\r\n                    color: topColor,\r\n                    width: \"100%\"\r\n                }}>\r\n                {getStringVal(topValue)}\r\n            </div>\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    top: 8,\r\n                    height: 16,\r\n                    left: 50 + (maxWidth - maxWidth * topFillbarValue) / 2,\r\n                    width: topFillbarValue * maxWidth,\r\n                    backgroundColor: topColor\r\n                }}\r\n            />\r\n            {!isGameOver && !isMobile && (\r\n                <Button\r\n                    {...{\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            console.log(\"BACK\");\r\n                            p.data.gameState = GAME_STATE.intro;\r\n                        },\r\n                        style: {\r\n                            margin: \"8px\",\r\n                            left: 0,\r\n                            width: \"calc(100% - 16px)\",\r\n                            height: \"32px\",\r\n                            position: \"fixed\",\r\n                            bottom: 0\r\n                        },\r\n                        textStyle: {fontSize: \"16pt\"}\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\n\r\nexport const DuelOver = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    return (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"red\",\r\n                    fontSize: \"28pt\"\r\n                }}>\r\n                {`GAME OVER`}\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 2,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"AGAIN!\",\r\n                        onClick: () => {\r\n                            data.actions.startGame && data.actions.startGame();\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 3,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            data.actions.reset && data.actions.reset();\r\n                            data.gameState = GAME_STATE.lobby;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {GameState} from \"../types\";\r\nimport {hexValueToString} from \"utils/colorConversions\";\r\nimport {autorun} from \"mobx\";\r\nimport {DuelOver} from \"./DuelOver\";\r\n\r\nconst fontStyle = {\r\n    textShadow: \"-1px -1px 0 #000,1px -1px 0 #000,-1px 1px 0 #000,1px 1px 0 #000\",\r\n    position: \"fixed\" as \"fixed\",\r\n    fontSize: \"24pt\"\r\n};\r\n\r\nexport const HudDuel = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    const [bottomValue, setBottomValue] = useState(p.data.score.bottom);\r\n    const [topValue, settopValue] = useState(p.data.score.top);\r\n    useEffect(() => {\r\n        return autorun(() => setBottomValue(p.data.score.bottom));\r\n    }, [p.data.score.bottom]);\r\n    useEffect(() => {\r\n        return autorun(() => settopValue(p.data.score.top));\r\n    }, [p.data.score.top]);\r\n\r\n    const [bottomFillbarValue, setBottomFillbarValue] = useState(p.data.fillbars.bottom / p.data.fillbars.max);\r\n    const [topFillbarValue, settopFillbarValue] = useState(p.data.fillbars.top / p.data.fillbars.max);\r\n    useEffect(() => {\r\n        return autorun(() => setBottomFillbarValue(p.data.fillbars.bottom / p.data.fillbars.max));\r\n    }, [p.data.fillbars.bottom, p.data.fillbars.max]);\r\n    useEffect(() => {\r\n        return autorun(() => settopFillbarValue(p.data.fillbars.top / p.data.fillbars.max));\r\n    }, [p.data.fillbars.top, p.data.fillbars.max]);\r\n\r\n    const [isGameOver, setisGameOver] = useState(p.data.isGameOver);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => setisGameOver(p.data.isGameOver));\r\n    }, []);\r\n\r\n    const [topColor, settopColor] = useState(hexValueToString(data.colors.top));\r\n    useEffect(() => {\r\n        return autorun(() => settopColor(hexValueToString(data.colors.top)));\r\n    }, []);\r\n\r\n    const [bottomColor, setbottomColor] = useState(hexValueToString(data.colors.bottom));\r\n    useEffect(() => {\r\n        return autorun(() => setbottomColor(hexValueToString(data.colors.bottom)));\r\n    }, []);\r\n\r\n    const getStringVal = (v: number) => (v > 9 ? v : `0${v}`);\r\n    const maxWidth = window.innerWidth - 120;\r\n\r\n    return (\r\n        <div>\r\n            {isGameOver && <DuelOver {...{data}} />}\r\n            <div style={{...fontStyle, top: 4, left: 4, color: topColor}}>{getStringVal(topValue)}</div>\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    top: 8,\r\n                    height: 16,\r\n                    left: 90,\r\n                    width: topFillbarValue * maxWidth,\r\n                    backgroundColor: topColor\r\n                }}\r\n            />\r\n            <div style={{...fontStyle, bottom: 4, right: 4, color: bottomColor}}>{getStringVal(bottomValue)}</div>\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    bottom: 8,\r\n                    height: 16,\r\n                    right: 90,\r\n                    width: bottomFillbarValue * maxWidth,\r\n                    backgroundColor: bottomColor\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {autorun} from \"mobx\";\r\nimport {Button} from \"components/common/Button\";\r\n\r\nexport const IntroScreen = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    const [isVisible, setisVisible] = useState(data.gameState === GAME_STATE.intro);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            (data.gameState === GAME_STATE.intro) !== isVisible && setisVisible(data.gameState === GAME_STATE.intro);\r\n        });\r\n    }, [data.gameState]);\r\n\r\n    return !isVisible ? null : (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr 1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\",\r\n                backgroundColor: \"black\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"#80c0ff\",\r\n                    fontSize: \"28pt\"\r\n                }}>\r\n                {`SKEDADDLE`}\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    gridRow: 2,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"PRACTICE\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.practice;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 3,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"DUEL!\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.lobby;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 4,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"WHAT?\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.about;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {Button} from \"components/common/Button\";\r\n\r\nexport const About = (p: {data: GameState}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"100px 1fr 1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\",\r\n                backgroundColor: \"black\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"end\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"#80c0ff\",\r\n                    fontSize: \"28pt\"\r\n                }}>\r\n                {`SKEDADDLE`}\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 2,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <div\r\n                    style={{\r\n                        gridRow: 1,\r\n                        gridColumn: 1,\r\n                        alignSelf: \"center\",\r\n                        justifySelf: \"center\",\r\n                        fontWeight: 400,\r\n                        color: \"white\",\r\n                        fontSize: \"16pt\",\r\n                        textAlign: \"center\",\r\n                        whiteSpace: \"pre-line\",\r\n                        paddingLeft: \"8px\",\r\n                        paddingRight: \"8px\"\r\n                    }}>\r\n                    {`a 2-player game by \r\n                    \r\n                    `}\r\n                    <span style={{fontSize: \"20pt\", color: \"#80ff80\"}}>{`Alex Tavor`}</span>\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 3,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <div\r\n                    style={{\r\n                        gridRow: 1,\r\n                        gridColumn: 1,\r\n                        alignSelf: \"center\",\r\n                        justifySelf: \"center\",\r\n                        fontWeight: 400,\r\n                        color: \"white\",\r\n                        fontSize: \"20pt\",\r\n                        textAlign: \"center\",\r\n                        whiteSpace: \"pre-line\",\r\n                        paddingRight: \"8px\",\r\n                        paddingLeft: \"8px\"\r\n                    }}>\r\n                    {`Duel by pushing things with your finger!`}\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 4,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <div\r\n                    style={{\r\n                        gridRow: 1,\r\n                        gridColumn: 1,\r\n                        alignSelf: \"center\",\r\n                        justifySelf: \"center\",\r\n                        fontWeight: 400,\r\n                        color: \"white\",\r\n                        fontSize: \"22pt\",\r\n                        textAlign: \"center\",\r\n                        whiteSpace: \"pre-line\",\r\n                        paddingRight: \"8px\",\r\n                        paddingLeft: \"8px\"\r\n                    }}>\r\n                    {`Tell your friends!`}\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 5,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            p.data.gameState = GAME_STATE.intro;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","// source: https://gist.github.com/jed/982883\r\nexport const uuid = (a?: any): string => {\r\n    return a\r\n        ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)\r\n        : (`${1e7}` + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);\r\n};\r\n","import {LobbyState, PeerData, ConnectonResult} from \"./../types\";\r\nimport {GameState, LobbyStatus} from \"../types\";\r\nimport {observable, action} from \"mobx\";\r\nimport {uuid} from \"utils/uuid\";\r\nimport {peerLogic} from \"./peerLogic\";\r\n\r\nexport const getLobbyState = (gameState: GameState) => {\r\n    if (!gameState.lobbyState) {\r\n        const lobbyState = observable({\r\n            peer: \"\",\r\n            status: \"peerless\" as LobbyStatus,\r\n            ownId: uuid(),\r\n            ownPeerData: {isReady: false, nodesTouched: []},\r\n            otherPeerData: {isReady: false, nodesTouched: []}\r\n        }) as any;\r\n        const connectTo = peerLogic({\r\n            state: lobbyState,\r\n            onConnection: (d: ConnectonResult) => {\r\n                lobbyState.peer = d.peer;\r\n                lobbyState.send = d.send;\r\n            },\r\n            onData: action((d: PeerData) => {\r\n                lobbyState.otherPeerData.isReady = d.isReady;\r\n                lobbyState.otherPeerData.nodesTouched = d.nodesTouched || [];\r\n                lobbyState.otherPeerData.boids = d.boids || [];\r\n                lobbyState.otherPeerData.score = d.score;\r\n                lobbyState.otherPeerData.isGameOver = d.isGameOver;\r\n            })\r\n        });\r\n        lobbyState.connectTo = connectTo;\r\n        gameState.lobbyState = lobbyState as LobbyState;\r\n    }\r\n    return gameState.lobbyState;\r\n};\r\n","import {LobbyState, PeerData, ConnectonResult} from \"./../types\";\r\nimport Peer from \"peerjs\";\r\n\r\nexport const peerLogic = (p: {\r\n    state: LobbyState;\r\n    onConnection: (data: ConnectonResult) => void;\r\n    onData: (data: PeerData) => void;\r\n}) => {\r\n    const {state, onData, onConnection} = p;\r\n\r\n    let isConnected = false;\r\n    let onConnected: () => void;\r\n    const peer = new Peer(state.ownId);\r\n\r\n    peer.on(\"connection\", conn => {\r\n        state.status = \"connected\";\r\n        const send = conn.send.bind(conn);\r\n        onConnection({send, peer: conn.peer});\r\n        conn.on(\"data\", onData);\r\n    });\r\n\r\n    peer.on(\"open\", () => {\r\n        isConnected = true;\r\n        onConnected && onConnected();\r\n    });\r\n\r\n    const connectTo = async (id: string) => {\r\n        state.status = \"connecting\";\r\n        const connectionResult = await new Promise<ConnectonResult>((resolve, reject) => {\r\n            const addOnConnect = () => {\r\n                const conn = peer.connect(id);\r\n                conn.on(\"open\", () => {\r\n                    state.status = \"connected\";\r\n                    const send = conn.send.bind(conn);\r\n                    onConnection({send, peer: conn.peer});\r\n                    conn.on(\"data\", onData);\r\n                    resolve({send, peer: conn.peer});\r\n                });\r\n            };\r\n            isConnected ? addOnConnect() : (onConnected = addOnConnect);\r\n        });\r\n        state.ownPeerData.isOP = true;\r\n        state.peer = connectionResult.peer;\r\n        state.send = connectionResult.send;\r\n        state.status = \"awaiting-peer-ready\";\r\n        state.send({isReady: true});\r\n    };\r\n\r\n    return connectTo;\r\n};\r\n","import React, {useState, useEffect, useRef} from \"react\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {getLobbyState} from \"./getLobbyState\";\r\nimport {autorun} from \"mobx\";\r\nimport {ActionButton} from \"./ActionButton\";\r\nimport {copyToClipboard} from \"components/duel/copyToClipboard\";\r\n\r\nconst textStyle = {\r\n    gridColumn: 1,\r\n    placeSelf: \"center center\",\r\n    fontWeight: 400,\r\n    color: \"white\",\r\n    fontSize: \"16pt\",\r\n    textAlign: \"center\" as \"center\",\r\n    whiteSpace: \"pre-line\" as \"pre-line\",\r\n    paddingRight: \"8px\",\r\n    paddingLeft: \"8px\",\r\n    paddingBottom: \"8px\"\r\n};\r\n\r\nconst rowStyle = (gridRow: number = 1) => ({\r\n    height: \"100%\",\r\n    gridRow,\r\n    gridColumn: 1,\r\n    placeSelf: \"center center\",\r\n    display: \"grid\"\r\n});\r\n\r\nexport const Lobby = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    const state = getLobbyState(p.data);\r\n    const [friendKey, setfriendKey] = useState(state.peer);\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            setfriendKey(state.peer);\r\n        });\r\n    }, []);\r\n\r\n    const [status, setStatus] = useState(state.status);\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            setStatus(state.status);\r\n        });\r\n    }, []);\r\n\r\n    const onCopyClicked = () => copyToClipboard(state.ownId);\r\n    const onPasteClick = () => navigator.clipboard.readText().then(clipText => setfriendKey(clipText));\r\n    const onInputChange: ((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined = e =>\r\n        setfriendKey(e.target.value);\r\n    return (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr 1fr 1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\",\r\n                backgroundColor: \"black\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    placeSelf: \"center center\",\r\n                    fontWeight: 600,\r\n                    color: \"#80c0ff\",\r\n                    textShadow: \"-1px -1px 0 #000,1px -1px 0 #000,-1px 1px 0 #000,1px 1px 0 #000\",\r\n                    fontSize: \"32pt\"\r\n                }}>\r\n                {`LOBBY`}\r\n            </div>\r\n            <div style={rowStyle(2)}>\r\n                <div style={textStyle} onClick={onCopyClicked}>\r\n                    <div style={{color: \"#80ff80\"}}>{`Your key, tap to copy it`}</div>\r\n                    <div style={{paddingTop: \"32px\"}}>{state.ownId}</div>\r\n                </div>\r\n            </div>\r\n            <div style={rowStyle(3)}>\r\n                <div\r\n                    style={{...textStyle, color: \"#80ff80\"}}\r\n                    onClick={onPasteClick}>{`Tap to paste key from clipboard`}</div>\r\n            </div>\r\n            <div style={rowStyle(4)}>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={onInputChange}\r\n                    value={friendKey}\r\n                    style={{...textStyle, color: \"black\", height: \"32px\", width: \"340px\"}}\r\n                />\r\n                {ActionButton({data, friendKey, status})}\r\n            </div>\r\n            <div style={rowStyle(5)}>\r\n                <Button\r\n                    {...{\r\n                        style: {placeSelf: \"center center\"},\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.intro;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","export const copyToClipboard = str => {\r\n    const el = document.createElement(\"textarea\");\r\n    el.value = str;\r\n    el.setAttribute(\"readonly\", \"\");\r\n    el.style.position = \"absolute\";\r\n    el.style.left = \"-9999px\";\r\n    document.body.appendChild(el);\r\n    const selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\r\n    el.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(el);\r\n    if (selected) {\r\n        document.getSelection().removeAllRanges();\r\n        document.getSelection().addRange(selected);\r\n    }\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {GameState, GAME_STATE, LobbyStatus} from \"components/types\";\r\nimport {getLobbyState} from \"./getLobbyState\";\r\nimport {action, autorun} from \"mobx\";\r\nexport const ActionButton = (p: {data: GameState; friendKey: string; status: LobbyStatus}) => {\r\n    const {data, friendKey, status} = p;\r\n    const state = getLobbyState(data);\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            state.otherPeerData.isReady && state.status === \"awaiting-peer-ready\" && (data.gameState = GAME_STATE.duel);\r\n        });\r\n    }, []);\r\n    let reply = null;\r\n    switch (status) {\r\n        case \"peerless\":\r\n            reply = (\r\n                <Button\r\n                    style={{marginTop: \"32px\", placeSelf: \"center center\"}}\r\n                    {...{\r\n                        disabled: !Boolean(friendKey),\r\n                        title: \"JOIN\",\r\n                        onClick: action(async () => {\r\n                            state.connectTo && state.connectTo(friendKey);\r\n                        })\r\n                    }}\r\n                />\r\n            );\r\n            break;\r\n        case \"connecting\":\r\n            reply = (\r\n                <Button\r\n                    style={{marginTop: \"32px\", placeSelf: \"center center\"}}\r\n                    {...{\r\n                        disabled: true,\r\n                        title: \"CONNECTING\"\r\n                    }}\r\n                />\r\n            );\r\n            break;\r\n        case \"connected\":\r\n            reply = (\r\n                <Button\r\n                    style={{marginTop: \"32px\", placeSelf: \"center center\"}}\r\n                    {...{\r\n                        title: \"DUEL!\",\r\n                        onClick: async () => {\r\n                            if (state.connectTo) {\r\n                                console.log(state.send ? \"sending is ready true\" : \"no send found\");\r\n                                state.send && state.send({isReady: true});\r\n                                data.gameState = GAME_STATE.duel;\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n            );\r\n            break;\r\n        case \"awaiting-peer-ready\":\r\n            reply = (\r\n                <Button\r\n                    style={{marginTop: \"32px\", placeSelf: \"center center\"}}\r\n                    {...{\r\n                        disabled: true,\r\n                        title: \"WAITING\"\r\n                    }}\r\n                />\r\n            );\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return reply;\r\n};\r\n","import React, {useRef, useEffect, useState} from \"react\";\r\nimport {HudPractice} from \"components/practice/HudPractice\";\r\nimport {GAME_STATE} from \"components/types\";\r\nimport {GameState} from \"./types\";\r\nimport {HudDuel} from \"./duel/HudDuel\";\r\nimport {IntroScreen} from \"./intro/IntroScreen\";\r\nimport {autorun} from \"mobx\";\r\nimport {About} from \"./info/About\";\r\nimport {Lobby} from \"./lobby/Lobby\";\r\n\r\nexport const Hud = (p: {gameState: GameState}) => {\r\n    let hud;\r\n    const [gameState, setgameState] = useState(p.gameState.gameState);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => setgameState(p.gameState.gameState));\r\n    }, []);\r\n    switch (gameState) {\r\n        case GAME_STATE.practice:\r\n            hud = <HudPractice {...{data: p.gameState}} />;\r\n            break;\r\n        case GAME_STATE.duel:\r\n            hud = <HudDuel {...{data: p.gameState}} />;\r\n            break;\r\n        case GAME_STATE.intro:\r\n            hud = <IntroScreen {...{data: p.gameState}} />;\r\n            break;\r\n        case GAME_STATE.about:\r\n            hud = <About {...{data: p.gameState}} />;\r\n            break;\r\n        case GAME_STATE.lobby:\r\n            hud = <Lobby {...{data: p.gameState}} />;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return <div style={{position: \"fixed\"}}>{hud}</div>;\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {autorun} from \"mobx\";\r\n\r\nexport const TimeCountdown = (p: {data: GameState}) => {\r\n    const [isGameOver, setisGameOver] = useState(p.data.isGameOver);\r\n    useEffect(() => {\r\n        return autorun(() => setisGameOver(p.data.isGameOver));\r\n    }, [p.data.isGameOver]);\r\n    const [isTimed, setisTimed] = useState(p.data.gameState === GAME_STATE.duel);\r\n    useEffect(() => {\r\n        return autorun(() => setisTimed(p.data.gameState === GAME_STATE.duel));\r\n    }, [p.data.gameState]);\r\n\r\n    const tLeft = Math.ceil(p.data.maxDuration - p.data.duration);\r\n    const [secondsLeft, setsecondsLeft] = useState(Math.max(0, tLeft));\r\n\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            if (!isTimed || isGameOver) return;\r\n            const tLeft = Math.ceil(p.data.maxDuration - p.data.duration);\r\n            setsecondsLeft(Math.max(0, tLeft));\r\n\r\n            if (tLeft <= 0) {\r\n                p.data.actions.endGame && p.data.actions.endGame();\r\n            }\r\n        });\r\n    }, [isTimed, isGameOver]);\r\n    return !isTimed || isGameOver ? null : (\r\n        <div\r\n            style={{\r\n                position: \"absolute\",\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr\",\r\n                gridTemplateColumns: \"1fr\",\r\n                pointerEvents: \"none\",\r\n                touchAction: \"none\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    textAlign: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"#ffff80\",\r\n                    fontSize: \"64pt\",\r\n                    pointerEvents: \"none\",\r\n                    touchAction: \"none\"\r\n                }}>\r\n                {secondsLeft}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","/**\r\n * Starts an animation loop\r\n * @param callback - function to call with every tick\r\n * @returns cancel - cancellation function\r\n */\r\nexport function animationLoop(callback: () => void) {\r\n    let id = 0;\r\n    (function l() {\r\n        id = window.requestAnimationFrame(l);\r\n        callback();\r\n    })();\r\n    return () => {\r\n        window.cancelAnimationFrame(id);\r\n    };\r\n}\r\n","import {animationLoop} from \"./animationLoop\";\r\n\r\nlet current = Date.now();\r\n\r\nexport default function deltaLoop(callback: (delta: number) => void) {\r\n    const loop = () => {\r\n        const nc = Date.now();\r\n        const delta = (nc - current) / 1000;\r\n        current = nc;\r\n        callback(delta);\r\n    };\r\n    animationLoop(loop);\r\n}\r\n","import deltaLoop from \"./deltaLoop\";\r\n\r\nexport interface ITime {\r\n    speed: number;\r\n}\r\n\r\nexport default function timeVariableLoop(time: ITime, callback: (delta: number) => void) {\r\n    const loop = (d: number) => {\r\n        callback(d * time.speed);\r\n    };\r\n    deltaLoop(loop);\r\n}\r\n","import {randomColor} from \"../../utils/colorConversions\";\r\nimport {Texture, ParticleContainer, Sprite} from \"pixi.js\";\r\n\r\nexport function makeBoidsViews(tex: Texture, quantity: number, tint: number = 0xaa0000, maxBoids: number = 200) {\r\n    const view = new ParticleContainer(maxBoids, {\r\n        uvs: true,\r\n        tint: true,\r\n        position: true,\r\n        rotation: true,\r\n        vertices: true\r\n    });\r\n    const sprites = Array.from({length: quantity}, () => {\r\n        const sprite = new Sprite(tex);\r\n        view.addChild(sprite);\r\n        sprite.tint = parseInt(randomColor(), 16); // tint;\r\n        // sprite.anchor.set(0.275, 0.5);\r\n        return sprite;\r\n    });\r\n\r\n    return {view, sprites};\r\n}\r\n","import Grid from \"scentmap/hexgrid/Grid\";\r\nimport {IDisplay} from \"../pixi/types\";\r\nimport {makeBoidsViews} from \"pixi/boids/makeBoidsViews\";\r\nimport {GridBoids} from \"boids/GridBoids\";\r\nimport {collectorTouchedTween} from \"./collectorTouchedTween\";\r\n\r\nexport function makeCollectors(p: {\r\n    display: IDisplay;\r\n    grid: Grid;\r\n    boids: GridBoids;\r\n    colors: {top: number; bottom: number};\r\n    actions: {onTopScored: () => void; onBottomScored: () => void};\r\n}) {\r\n    const {display, grid, boids, colors, actions: callbacks} = p;\r\n    const top = Array.from({length: 22}, (n, i) => 53 + i);\r\n    const bottom = Array.from({length: 22}, (n, i) => 1226 + i);\r\n    const all = [...top, ...bottom];\r\n\r\n    const views = makeBoidsViews(display.hexTexture, top.length + bottom.length);\r\n    display.camera.addChild(views.view);\r\n\r\n    const effectViews = makeBoidsViews(display.hexTexture, top.length + bottom.length);\r\n    display.camera.addChild(effectViews.view);\r\n    const effectSprites = effectViews.sprites;\r\n\r\n    views.sprites.forEach((sprite, i) => {\r\n        sprite.tint = i < top.length ? colors.top : colors.bottom;\r\n        const posAtNode = grid.getPosAtNode(all[i]);\r\n        sprite.position.set(posAtNode.x, posAtNode.y);\r\n        sprite.scale.set(1, 1);\r\n\r\n        const effectSprite = effectSprites[i];\r\n        effectSprite.tint = i < top.length ? colors.top : colors.bottom;\r\n        effectSprite.position.set(posAtNode.x + effectSprite.width / 2, posAtNode.y + effectSprite.height / 2);\r\n        effectSprite.scale.set(1, 1);\r\n        effectSprite.anchor.set(0.5, 0.5);\r\n    });\r\n\r\n    const update = (delta: number) => {\r\n        boids.boids.forEach(boid => {\r\n            const ind = all.indexOf(boid.node);\r\n            if (ind !== -1) {\r\n                boids.removeBoid(boid);\r\n                const sprite = effectSprites[ind];\r\n                collectorTouchedTween({sprite});\r\n                ind < top.length ? callbacks.onTopScored() : callbacks.onBottomScored();\r\n            }\r\n        });\r\n    };\r\n\r\n    return {top, bottom, all, views, update};\r\n}\r\n","import * as Tween from \"es6-tween\";\r\n\r\nexport const collectorTouchedTween = ({sprite, duration = 300}) => {\r\n    Tween.autoPlay(true);\r\n    sprite.scale.set(1, 1);\r\n    sprite.alpha = 1;\r\n    const t = new Tween.Tween({scale: 1, alpha: 1})\r\n        .to({scale: 6, alpha: 0}, duration)\r\n        .start()\r\n        .easing(Tween.Easing.Quadratic.Out)\r\n        .on(\"update\", v => {\r\n            sprite.scale.set(v.scale, v.scale);\r\n            sprite.alpha = v.alpha;\r\n        });\r\n    return t;\r\n};\r\n","import {ClickEventData} from \"pixi-viewport\";\r\nimport {IPoint} from \"./../utils/geom\";\r\nimport {IDisplay} from \"./types\";\r\nimport Grid from \"../scentmap/hexgrid/Grid\";\r\n\r\nlet isDragging = false;\r\n\r\nexport default function addDisplayDragListener(\r\n    display: IDisplay,\r\n    grid: Grid,\r\n    onStart: (node: number) => void,\r\n    onEnd: (node: number) => void,\r\n    onMove: (node: number) => void\r\n) {\r\n    const hs = grid.gridLayout.hexSize * 0.75;\r\n    const getNodeByPixel = (point: IPoint) => grid.getHexIdByPixel({x: point.x - hs, y: point.y - hs});\r\n\r\n    const dragStart = (data: ClickEventData) => {\r\n        isDragging = true;\r\n        onStart(getNodeByPixel(data.world));\r\n    };\r\n    const dragEnd = (data: ClickEventData) => {\r\n        isDragging = false;\r\n        onEnd(getNodeByPixel(data.world));\r\n    };\r\n    const onMouseMove = (e: MouseEvent) => {\r\n        if (!isDragging) return;\r\n        const node = getNodeByPixel(display.camera.toWorld(e.x, e.y));\r\n        if (isNaN(node)) return;\r\n        onMove(node);\r\n    };\r\n\r\n    const onTouchMove = (data: PIXI.interaction.InteractionEvent) => {\r\n        const position = data.data.global;\r\n        const node = getNodeByPixel(display.camera.toWorld(position.x, position.y));\r\n        if (isNaN(node)) return;\r\n        onMove(node);\r\n    };\r\n\r\n    display.camera.on(\"drag-start\", dragStart);\r\n    display.camera.on(\"drag-end\", dragEnd);\r\n    display.camera.on(\"touchmove\", onTouchMove);\r\n    document.addEventListener(\"mousemove\", onMouseMove);\r\n}\r\n","import addDisplayClickListener from \"pixi/addDisplayClickListener\";\r\nimport addDisplayDragListener from \"pixi/addDisplayDragListener\";\r\nimport {IDisplay} from \"pixi/types\";\r\nimport Grid from \"scentmap/hexgrid/Grid\";\r\n\r\nexport function addDropFunctionality(\r\n    display: IDisplay,\r\n    grid: Grid,\r\n    onDrag: (node: number) => void,\r\n    onTap: (node: number) => void,\r\n    onStart: () => void,\r\n    onEnd: () => void\r\n) {\r\n    addDisplayClickListener(display, grid, onTap);\r\n    // const onStart: (node: number) => void = (node: number) => {\r\n    //     // display.camera.pausePlugin(\"drag\");\r\n    // };\r\n    // const onEnd: (node: number) => void = (node: number) => {\r\n    //     // display.camera.resumePlugin(\"drag\");\r\n    // };\r\n    const onMove: (node: number) => void = onDrag;\r\n    addDisplayDragListener(display, grid, onStart, onEnd, onMove);\r\n}\r\n","import {ClickEventData} from \"pixi-viewport\";\r\nimport {IDisplay} from \"./types\";\r\nimport Grid from \"../scentmap/hexgrid/Grid\";\r\n\r\nexport default function addDisplayClickListener(display: IDisplay, grid: Grid, onClick: (node: number) => void) {\r\n    const hs = grid.gridLayout.hexSize * 0.75;\r\n    const onViewClicked = (data: ClickEventData) => {\r\n        const i = grid.getHexIdByPixel({x: data.world.x - hs, y: data.world.y - hs});\r\n        onClick(i);\r\n    };\r\n    display.camera.on(\"clicked\", onViewClicked);\r\n}\r\n","import {IScent} from \"./types\";\r\n\r\nexport default function makeScentDropper(scent: IScent, index: number, seconds: number = 0) {\r\n    let elapsed = 0;\r\n    const dropScent = (delta: number) => {\r\n        elapsed += delta;\r\n        scent.scentGrid[index] = Math.max(0, scent.scentGrid[index] + scent.quantity);\r\n        return elapsed < seconds;\r\n    };\r\n    return dropScent;\r\n}\r\n","import {GridMap} from \"types\";\r\nimport {IScent} from \"scentmap/scent/types\";\r\nimport {addDropFunctionality} from \"game/addDropFunctionality\";\r\nimport makeScentDropper from \"scentmap/scent/makeScentDropper\";\r\nimport {IDroppers} from \"./IDroppers\";\r\nimport {GameState} from \"components/types\";\r\n\r\nconst minDrop = 0.2;\r\nconst minTap = 0.001;\r\n\r\nexport const makeScentDroppers = (\r\n    gameState: GameState,\r\n    map: GridMap,\r\n    scent: IScent,\r\n    fillbars: {bars: {max: number; top: number; bottom: number}}\r\n) => {\r\n    const droppers: IDroppers = {updates: []};\r\n    let isDropping = false;\r\n    let lastDelta = 0;\r\n    const dropOwn = (node: number, cost: number = 2) => {\r\n        if (fillbars.bars.top < cost) return;\r\n        droppers.updates.push(makeScentDropper(scent, node, scent.seconds));\r\n        fillbars.bars.top = Math.max(fillbars.bars.top - cost, 0);\r\n        const ls = gameState.lobbyState;\r\n        if (ls) {\r\n            ls.ownPeerData.nodesTouched && ls.ownPeerData.nodesTouched.push(node);\r\n        }\r\n    };\r\n    const onDrag = (node: number) => {\r\n        onStart();\r\n\r\n        if (lastDelta && isDropping && fillbars.bars.top > 0) {\r\n            dropOwn(node);\r\n            fillbars.bars.top <= 0 && (isDropping = false);\r\n        }\r\n    };\r\n    const onTap = (node: number) => {\r\n        if (lastDelta && fillbars.bars.top / fillbars.bars.max >= minTap) {\r\n            dropOwn(node);\r\n        }\r\n    };\r\n    const onStart = () => {\r\n        const fill = fillbars.bars.top / fillbars.bars.max;\r\n        lastDelta && fill >= minDrop && (isDropping = true);\r\n    };\r\n\r\n    const onEnd = () => {\r\n        isDropping = false;\r\n    };\r\n    addDropFunctionality(map.display, map.grid, onDrag, onTap, onStart, onEnd);\r\n    const update = (delta: number) => {\r\n        lastDelta = delta;\r\n        droppers.updates = droppers.updates.filter(update => update(delta));\r\n    };\r\n\r\n    const dropFromPeer = (nodes: number[]) => {\r\n        nodes.forEach(node => {\r\n            droppers.updates.push(makeScentDropper(scent, node, scent.seconds));\r\n            fillbars.bars.bottom -= 1;\r\n        });\r\n    };\r\n\r\n    return {update, droppers, dropFromPeer};\r\n};\r\n","export interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport const rotateToPoint = (m: IPoint, p: IPoint) => Math.atan2(m.y - p.y, m.x - p.x);\r\n\r\nexport const randomlyPositionInCircle = (maxDistanceSq: number, minDistanceSq: number, p: IPoint) => {\r\n    const ptAngle = Math.random() * 2 * Math.PI;\r\n    const ptRadiusSq = minDistanceSq + Math.random() * maxDistanceSq;\r\n    p.x += Math.sqrt(ptRadiusSq) * Math.cos(ptAngle);\r\n    p.y += Math.sqrt(ptRadiusSq) * Math.sin(ptAngle);\r\n};\r\n\r\nexport const clamp = (a: IPoint, limit: number) => {\r\n    if (magnitude(a) > limit) {\r\n        const n = normalize(a);\r\n        return multiplyScalar(n, limit);\r\n    }\r\n    return a;\r\n};\r\n\r\nexport const distanceSq = (b: IPoint, a: IPoint) => {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n\r\n    return dx * dx + dy * dy;\r\n};\r\n\r\nexport const areEqual = (a: IPoint, b: IPoint) => {\r\n    return Math.round(a.x) === Math.round(b.x) && Math.round(a.y) === Math.round(b.y);\r\n};\r\n\r\nexport const magnitude = (a: IPoint) => {\r\n    return Math.sqrt(a.x * a.x + a.y * a.y);\r\n};\r\n\r\nexport const normalize = (a: IPoint) => {\r\n    const m = magnitude(a);\r\n    if (m > 0) {\r\n        return multiplyScalar(a, 1 / m);\r\n    }\r\n    return a;\r\n};\r\n\r\nexport const multiplyScalar = (v: IPoint, scalar: number) => {\r\n    v.x *= scalar;\r\n    v.y *= scalar;\r\n    return v;\r\n};\r\n\r\nexport const divideByScalar = (v: IPoint, scalar: number) => {\r\n    v.x /= scalar;\r\n    v.y /= scalar;\r\n    return v;\r\n};\r\n\r\nexport const sqrt = (v: IPoint) => {\r\n    v.x = Math.sqrt(v.x);\r\n    v.y = Math.sqrt(v.y);\r\n    return v;\r\n};\r\n\r\nexport const addVector = (a: IPoint, b: IPoint) => {\r\n    a.x += b.x;\r\n    a.y += b.y;\r\n    return a;\r\n};\r\n\r\nexport const subtractVector = (a: IPoint, b: IPoint) => {\r\n    a.x -= b.x;\r\n    a.y -= b.y;\r\n    return a;\r\n};\r\n\r\nexport const rotateVector = (vec: IPoint, ang: number) => {\r\n    const cos = Math.cos(ang);\r\n    const sin = Math.sin(ang);\r\n    vec.x = vec.x * cos - vec.y * sin;\r\n    vec.y = vec.x * sin + vec.y * cos;\r\n    return vec;\r\n};\r\n","export function makeBoid(template?: any) {\r\n    return {\r\n        ...{\r\n            position: {x: 0, y: 0},\r\n            velocity: {x: 0, y: 0},\r\n            drag: 0.1,\r\n            speed: 1,\r\n            thrust: 10,\r\n            radius: 1\r\n        },\r\n        ...template\r\n    };\r\n}\r\n","import {\r\n    addVector,\r\n    subtractVector,\r\n    normalize,\r\n    multiplyScalar,\r\n    clamp,\r\n    divideByScalar,\r\n    distanceSq,\r\n    magnitude,\r\n    IPoint\r\n} from \"../../utils/geom\";\r\nimport {IBoid} from \"../makeBoids\";\r\nexport function separation(boid: IBoid, neighbors: IPoint[]) {\r\n    const steer = {x: 0, y: 0};\r\n    const numNeighbors = neighbors.length;\r\n    if (!numNeighbors) return {x: 0, y: 0};\r\n    for (let neighbor of neighbors) {\r\n        const d = distanceSq(boid.position, neighbor) || Math.random();\r\n        const diff = subtractVector({...boid.position}, neighbor);\r\n        normalize(diff);\r\n        divideByScalar(diff, d);\r\n        addVector(steer, diff);\r\n    }\r\n    divideByScalar(steer, numNeighbors);\r\n    const steerForce = magnitude(steer);\r\n    if (steerForce > 0) {\r\n        normalize(steer);\r\n        multiplyScalar(steer, boid.speed);\r\n        subtractVector(steer, boid.velocity);\r\n        clamp(steer, boid.thrust);\r\n    }\r\n    return steer;\r\n}\r\n","import {addVector, divideByScalar, IPoint} from \"../../utils/geom\";\r\nimport {seek} from \"../steering/seek\";\r\nimport {IBoid} from \"../makeBoids\";\r\n\r\nexport function cohesion(boid: IBoid, neighbors: IPoint[]) {\r\n    const steer = {x: 0, y: 0};\r\n    const numNeighbors = neighbors.length;\r\n    if (!numNeighbors) return {x: 0, y: 0};\r\n    for (let neighbor of neighbors) {\r\n        addVector(steer, neighbor);\r\n    }\r\n    return seek(divideByScalar(steer, numNeighbors), boid);\r\n}\r\n","import {subtractVector, normalize, multiplyScalar, clamp, IPoint} from \"../../utils/geom\";\r\nimport {IBoid} from \"../makeBoids\";\r\nexport function seek(target: IPoint, boid: IBoid) {\r\n    const d = subtractVector({...target}, boid.position);\r\n    normalize(d);\r\n    multiplyScalar(d, boid.speed);\r\n    subtractVector(d, boid.velocity);\r\n    clamp(d, boid.thrust);\r\n    return d;\r\n}\r\n","import {addVector, IPoint} from \"../../utils/geom\";\r\nexport function applyForce(vector: IPoint, force: IPoint) {\r\n    addVector(vector, force);\r\n}\r\n","import {subtractVector, normalize, multiplyScalar, clamp, rotateVector} from \"../../utils/geom\";\r\nimport {IBoid} from \"../makeBoids\";\r\n\r\nexport function wander(boid: IBoid, angle: number) {\r\n    const steer = rotateVector({...boid.velocity}, angle);\r\n    normalize(steer);\r\n    multiplyScalar(steer, boid.speed);\r\n    subtractVector(steer, boid.velocity);\r\n    clamp(steer, boid.thrust);\r\n    return steer;\r\n}\r\n","import {PeerBoid} from \"./../components/types\";\r\nimport {IPoint, multiplyScalar, addVector, clamp, normalize, distanceSq} from \"../utils/geom\";\r\nimport {IGridBoid} from \"./IGridBoid\";\r\nimport {IBoidTemplate} from \"./IBoidTemplate\";\r\nimport Grid from \"../scentmap/hexgrid/Grid\";\r\nimport {IDisplay} from \"../pixi/types\";\r\nimport {IScent} from \"../scentmap/scent/types\";\r\nimport {makeBoids} from \"./makeBoids\";\r\nimport {makeBoidsViews} from \"../pixi/boids/makeBoidsViews\";\r\nimport {makeBoid} from \"./makeBoid\";\r\nimport {separation} from \"./behavior/separation\";\r\nimport {cohesion} from \"./behavior/cohesion\";\r\nimport {getSteering} from \"./getSteering\";\r\nimport {wander} from \"./behavior/wander\";\r\nimport {alignment} from \"./behavior/alignment\";\r\n\r\nconst INITIAL_BOIDS = 0;\r\nconst MAX_BOIDS = 200;\r\nconst DETECTION_RADIUS = 1000;\r\n\r\nexport class GridBoids {\r\n    public boids!: IGridBoid[];\r\n    public boidViews!: PIXI.Sprite[];\r\n    private occupiableNodes!: Array<Set<IGridBoid>>;\r\n    private numNodes!: number;\r\n\r\n    constructor(\r\n        public boidTemplate: IBoidTemplate,\r\n        public grid: Grid,\r\n        public display: IDisplay,\r\n        public walls: number[],\r\n        public scentToAvoid: IScent\r\n    ) {\r\n        this.initialize();\r\n    }\r\n\r\n    public reset() {\r\n        if (this.boidViews && this.boidViews.length) {\r\n            const view = this.boidViews[0].parent;\r\n            if (view.parent) {\r\n                view.parent.removeChild(view);\r\n            }\r\n        }\r\n        this.initialize();\r\n    }\r\n\r\n    public update(delta?: number) {\r\n        this.updateBoids(delta);\r\n        this.updateViews(delta);\r\n    }\r\n\r\n    public addBoid(position: IPoint) {\r\n        const b = makeBoid(this.boidTemplate) as IGridBoid;\r\n        this.boids.push(b);\r\n        b.position = {...position};\r\n        b.node = this.grid.getHexIdByPixel(b.position);\r\n        return b;\r\n    }\r\n\r\n    public addBoidAtNode(nodeId: number) {\r\n        const b = makeBoid(this.boidTemplate) as IGridBoid;\r\n        this.boids.push(b);\r\n        b.node = nodeId;\r\n        b.position = this.grid.getPosAtNode(nodeId);\r\n        return b;\r\n    }\r\n\r\n    public removeBoid(boid?: IGridBoid) {\r\n        if (boid) {\r\n            this.boids.splice(this.boids.indexOf(boid), 1);\r\n            return;\r\n        }\r\n        this.boids.pop();\r\n    }\r\n\r\n    public syncBoid(syncWith: PeerBoid, index: number) {\r\n        const boid = this.boids[index];\r\n        boid.position.x = syncWith.position.x;\r\n        boid.position.y = syncWith.position.y;\r\n        boid.velocity.x = syncWith.velocity.x;\r\n        boid.velocity.y = syncWith.velocity.y;\r\n\r\n        boid.node = this.grid.getHexIdByPixel(boid.position);\r\n    }\r\n\r\n    private updateViews(delta?: number) {\r\n        const l = this.boids.length;\r\n        this.boidViews.forEach((sprite, i) => {\r\n            sprite.alpha = i < l ? 1 : 0;\r\n            if (sprite.alpha) {\r\n                const boid = this.boids[i];\r\n                sprite.tint = this.boidTemplate.hue;\r\n                sprite.position.set(boid.position.x, boid.position.y);\r\n                sprite.scale.x !== boid.radius && sprite.scale.set(boid.radius, boid.radius);\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateBoids(delta?: number) {\r\n        this.boids.forEach(boid => {\r\n            if (boid.node < 0 || boid.node >= this.numNodes) return;\r\n            const node = this.grid.getHexIdByPixel(boid.position);\r\n            if (isNaN(node)) return;\r\n            const oNodes = this.occupiableNodes;\r\n            boid.node && oNodes[boid.node].delete(boid);\r\n            boid.node = node;\r\n            const neighborNodes = this.grid.gridArr[boid.node].neighbors.filter(n => !isNaN(n));\r\n            const obstacles = neighborNodes.filter(n => !this.walls[n]).map(n => this.grid.gridArr[n].position);\r\n\r\n            let highestScent: number = 0;\r\n            let avoidGoal: IPoint | null = null;\r\n\r\n            for (let neighbor of neighborNodes) {\r\n                const avoidVal = this.scentToAvoid.scentGrid[neighbor];\r\n                if (avoidVal > highestScent && avoidVal > boid.olfaction) {\r\n                    highestScent = avoidVal;\r\n                    avoidGoal = {...this.grid.gridArr[neighbor].position};\r\n                }\r\n            }\r\n            const avoidGoals = avoidGoal ? [avoidGoal] : [];\r\n            const neighbors: IGridBoid[] = this.boids.filter(\r\n                b => distanceSq(b.position, boid.position) <= DETECTION_RADIUS\r\n            );\r\n            const forces = [\r\n                multiplyScalar(separation(boid, obstacles), this.boidTemplate.weights.avoidObstacles * 100),\r\n                multiplyScalar(\r\n                    separation(\r\n                        boid,\r\n                        neighbors.map(n => n.position)\r\n                    ),\r\n                    this.boidTemplate.weights.separation\r\n                ),\r\n                multiplyScalar(separation(boid, avoidGoals), this.boidTemplate.weights.avoidScent),\r\n                multiplyScalar(\r\n                    cohesion(\r\n                        boid,\r\n                        neighbors.map(n => n.position)\r\n                    ),\r\n                    this.boidTemplate.weights.cohesion\r\n                ),\r\n                multiplyScalar(wander(boid, 0 + Math.random() > 0.95 ? Math.floor(-90 + Math.random() * 180) : 0), 4)\r\n                // multiplyScalar(\r\n                //     alignment(\r\n                //         boid,\r\n                //         neighbors.map(n => n.velocity)\r\n                //     ),\r\n                //     this.boidTemplate.weights.alignment\r\n                // )\r\n            ];\r\n            const steer = getSteering(boid, forces);\r\n            applySteering(steer, boid, delta || 1);\r\n            oNodes[boid.node].add(boid);\r\n        });\r\n    }\r\n\r\n    private initialize() {\r\n        this.boids = (makeBoids(INITIAL_BOIDS, this.boidTemplate) as any) as IGridBoid[];\r\n        const boidViewsObj = makeBoidsViews(this.display.hexTexture, MAX_BOIDS);\r\n        this.display.camera.addChild(boidViewsObj.view);\r\n        this.boidViews = boidViewsObj.sprites;\r\n        this.occupiableNodes = Array.from(this.grid.gridArr, node => new Set<IGridBoid>());\r\n        this.numNodes = this.grid.gridArr.length;\r\n    }\r\n}\r\n\r\nconst applySteering = (steering: IPoint, boid: IGridBoid, delta: number) => {\r\n    normalize(steering);\r\n    multiplyScalar(steering, boid.thrust);\r\n    addVector(boid.velocity, steering);\r\n    clamp(boid.velocity, boid.speed);\r\n    const motion = multiplyScalar({...boid.velocity}, delta);\r\n    addVector(boid.position, motion);\r\n    multiplyScalar(boid.velocity, boid.drag);\r\n};\r\n","import {addVector, multiplyScalar, clamp, IPoint, divideByScalar} from \"../utils/geom\";\r\nimport {applyForce} from \"./steering/applyForce\";\r\nimport {IBoid} from \"./makeBoids\";\r\n\r\nexport function getSteering(boid: IBoid, forces: IPoint[]) {\r\n    const steering = {x: 0, y: 0};\r\n    for (let force of forces) {\r\n        applyForce(steering, force);\r\n    }\r\n    divideByScalar(steering, forces.length);\r\n    return steering;\r\n}\r\n","import {IPoint} from \"./../utils/geom\";\r\nimport {makeBoid} from \"./makeBoid\";\r\n\r\nexport interface IBoid {\r\n    position: IPoint;\r\n    velocity: IPoint;\r\n    drag: number;\r\n    speed: number;\r\n    thrust: number;\r\n    radius: number;\r\n}\r\n\r\nexport function makeBoids(numBoids: number, template?: any) {\r\n    return Array.from({length: numBoids}, n => makeBoid(template));\r\n}\r\n","export const boidTemplate = {\r\n    drag: 0.999,\r\n    speed: 150,\r\n    thrust: 10,\r\n    radius: 1,\r\n    olfaction: 0.001,\r\n    hue: 0xff80ff,\r\n    weights: {\r\n        separation: 11,\r\n        cohesion: 4,\r\n        seekScent: 6,\r\n        avoidScent: 8,\r\n        avoidObstacles: 12,\r\n        alignment: 1\r\n    }\r\n};\r\n","import {GridBoids} from \"boids/GridBoids\";\r\nimport {GridMap} from \"types\";\r\nimport {IScent} from \"scentmap/scent/types\";\r\nimport {boidTemplate} from \"./boidTemplate\";\r\n\r\nexport const populateBoids = (boids: GridBoids) => {\r\n    return Array.from({length: 11}, (n, i) => {\r\n        boids.addBoidAtNode(589 + i * 2);\r\n        boids.addBoidAtNode(640 + i * 2);\r\n        boids.addBoidAtNode(691 + i * 2);\r\n        return null;\r\n    });\r\n};\r\n\r\nexport const makeBoids = (map: GridMap, scent: IScent) => {\r\n    const boids = new GridBoids(boidTemplate, map.grid, map.display, map.walls, scent);\r\n    populateBoids(boids);\r\n    return boids;\r\n};\r\n","import Grid from \"./../../scentmap/hexgrid/Grid\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\nexport function makeHexesGrid(grid: Grid, tex: PIXI.Texture, tint: number = 0xddddda) {\r\n    const view = new PIXI.ParticleContainer(500000, {\r\n        tint: true\r\n    });\r\n    const nodes = grid.gridArr.map(node => {\r\n        const sprite = new PIXI.Sprite(tex);\r\n        sprite.position.set(node.position.x, node.position.y);\r\n        view.addChild(sprite);\r\n        sprite.tint = tint;\r\n        sprite.alpha = 0;\r\n        return sprite;\r\n    });\r\n\r\n    return {view, nodes};\r\n}\r\n","import {makeScent} from \"../../scentmap/scent/makeScent\";\r\nimport {makeHexesGrid} from \"../../pixi/hexgrid/makeHexesGrid\";\r\nimport {GridMap} from \"types\";\r\nimport {makeUpdateScent} from \"scentmap/scent/makeUpdateScent\";\r\nimport {makeUpdateHexColorsByScent} from \"pixi/scent/makeUpdateHexColorsByScent\";\r\nexport const makeAvoidScent = (map: GridMap) => {\r\n    const data = makeScent(map.grid);\r\n    const display = makeHexesGrid(map.grid, map.display.hexTexture, data.hue);\r\n    map.display.camera.addChild(display.view);\r\n    const updateScent = makeUpdateScent(map.grid, map.walls, data, data.scentGrid);\r\n    const updateScentView = makeUpdateHexColorsByScent(display.nodes, data);\r\n    const update = (delta: number) => {\r\n        updateScent(delta);\r\n        updateScentView(delta);\r\n    };\r\n    return {data: data, display: display, update};\r\n};\r\n","import {IScent} from \"./types\";\r\nimport {uuid} from \"../../utils/uuid\";\r\nimport Grid from \"../hexgrid/Grid\";\r\n\r\nexport function makeScent(\r\n    grid: Grid,\r\n    spread: number = 15,\r\n    evaporation: number = 0.9,\r\n    quantity: number = 10,\r\n    hue: number = 8454143,\r\n    minValue: number = 0.001,\r\n    seconds: number = 0\r\n): IScent {\r\n    const scentGrid: number[] = Array.from(grid.gridArr, n => 0);\r\n    const permeability: number[] = Array.from(grid.gridArr, n => 1);\r\n    return {\r\n        scentGrid,\r\n        permeability,\r\n        id: uuid(),\r\n        spread,\r\n        evaporation,\r\n        quantity,\r\n        hue,\r\n        minValue,\r\n        seconds\r\n    };\r\n}\r\n","import {IScent} from \"./types\";\r\nimport Grid from \"../hexgrid/Grid\";\r\n\r\nexport function makeUpdateScent(grid: Grid, walls: number[], scent: IScent, scentGrid: number[]) {\r\n    return (delta: number) => {\r\n        for (let node = 0; node < scentGrid.length; node++) {\r\n            const w = walls[node];\r\n            if (isNaN(w) || !w) {\r\n                scentGrid[node] = 0;\r\n                continue;\r\n            }\r\n            const targets = grid.gridArr[node].neighbors;\r\n            const scentVal = scentGrid[node];\r\n            if (isNaN(scentVal) || !scent) {\r\n                scentGrid[node] = 0;\r\n                continue;\r\n            }\r\n            const validTargets = targets.filter(id => !isNaN(walls[id]) && walls[id]);\r\n            const dSpread = Math.min(1, scent.spread * delta);\r\n            const distribute = scentVal * dSpread;\r\n            const dSlice = (distribute / validTargets.length) * scent.evaporation;\r\n            for (let id of validTargets) {\r\n                const v = dSlice * walls[id];\r\n                scentGrid[id] += v;\r\n            }\r\n            scentGrid[node] = scentGrid[node] - distribute;\r\n        }\r\n        scent.scentGrid.forEach((n, nodeId) => {\r\n            const s = scentGrid[nodeId];\r\n            scent.scentGrid[nodeId] = s >= scent.minValue ? s : 0;\r\n        });\r\n    };\r\n}\r\n","import {IScent} from \"../../scentmap/scent/types\";\r\n\r\nexport function makeUpdateHexColorsByScent(gridSprites: PIXI.Sprite[], scent: IScent) {\r\n    const average = (scent.quantity + scent.minValue) / 20;\r\n    return (delta: number) => {\r\n        gridSprites.forEach((s, i) => {\r\n            s.tint = scent.hue;\r\n            s.alpha = Math.min(0.75, Math.min(average, scent.scentGrid[i]) / average);\r\n        });\r\n    };\r\n}\r\n","// adapted from http://www.redblobgames.com/grids/hexagons/\r\n\r\n/* Specifically for offset grid diagrams */\r\nexport function makeRectangularShape(\r\n    minCol: number,\r\n    maxCol: number,\r\n    minRow: number,\r\n    maxRow: number,\r\n    convert: (coord: OffsetCoord) => Hex\r\n) {\r\n    const results = [];\r\n    for (let col = minCol; col <= maxCol; col++) {\r\n        for (let row = minRow; row <= maxRow; row++) {\r\n            const hex = convert(new OffsetCoord(col, row));\r\n            results.push(hex);\r\n        }\r\n    }\r\n    return results;\r\n}\r\n\r\n/* Specifically for doubled grid diagrams */\r\nexport function makeRDoubledRectangularShape(minCol: number, maxCol: number, minRow: number, maxRow: number) {\r\n    const results = [];\r\n    for (let row = minRow; row <= maxRow; row++) {\r\n        for (let col = minCol + (row & 1); col <= maxCol; col += 2) {\r\n            const hex = new DoubledCoord(col, row).rdoubledToCube();\r\n            results.push(hex);\r\n        }\r\n    }\r\n    return results;\r\n}\r\n\r\nexport function makeLine(A: Hex, B: Hex) {\r\n    /* see https://www.redblobgames.com/grids/line-drawing.html */\r\n\r\n    /* HACK: add a tiny offset to the start point to break ties,\r\n     * because there are a lot of ties on a grid, and I want it to\r\n     * always round the same direction for consistency. To demonstrate\r\n     * the need for this hack, draw a line from Hex(-5, 0, +5) to\r\n     * Hex(+5, -5, 0). Without the hack, there are points on the edge\r\n     * that will sometimes be rounded one way and sometimes the other.\r\n     * The hack will force them to be rounded consistently. */\r\n    const offset = new Hex(1e-6, 2e-6, -3e-6);\r\n\r\n    const N = A.subtract(B).len();\r\n    const results = [];\r\n    for (let i = 0; i <= N; i++) {\r\n        results.push(\r\n            A.lerp(B, i / Math.max(1, N))\r\n                .add(offset)\r\n                .round()\r\n        );\r\n    }\r\n    return results;\r\n}\r\n\r\nexport class Point {\r\n    constructor(public x: number, public y: number) {}\r\n}\r\n\r\nexport class Hex {\r\n    public static directions: Hex[] = [\r\n        new Hex(1, 0, -1),\r\n        new Hex(1, -1, 0),\r\n        new Hex(0, -1, 1),\r\n        new Hex(-1, 0, 1),\r\n        new Hex(-1, 1, 0),\r\n        new Hex(0, 1, -1)\r\n    ];\r\n\r\n    public static diagonals: Hex[] = [\r\n        new Hex(2, -1, -1),\r\n        new Hex(1, -2, 1),\r\n        new Hex(-1, -1, 2),\r\n        new Hex(-2, 1, 1),\r\n        new Hex(-1, 2, -1),\r\n        new Hex(1, 1, -2)\r\n    ];\r\n\r\n    public static direction(direction: number): Hex {\r\n        return Hex.directions[direction];\r\n    }\r\n\r\n    private n8s!: Hex[];\r\n    private roundHex!: Hex;\r\n\r\n    constructor(public q: number, public r: number, public s: number) {\r\n        if (Math.round(q + r + s) !== 0) throw new Error(\"q + r + s must be 0\");\r\n    }\r\n\r\n    get id() {\r\n        return `${this.q} ${this.r} ${this.s}`;\r\n    }\r\n\r\n    public add(b: Hex): Hex {\r\n        return new Hex(this.q + b.q, this.r + b.r, this.s + b.s);\r\n    }\r\n\r\n    public subtract(b: Hex): Hex {\r\n        return new Hex(this.q - b.q, this.r - b.r, this.s - b.s);\r\n    }\r\n\r\n    public scale(k: number): Hex {\r\n        return new Hex(this.q * k, this.r * k, this.s * k);\r\n    }\r\n\r\n    public rotateLeft(): Hex {\r\n        return new Hex(-this.s, -this.q, -this.r);\r\n    }\r\n\r\n    public rotateRight(): Hex {\r\n        return new Hex(-this.r, -this.s, -this.q);\r\n    }\r\n\r\n    public neighbors(): Hex[] {\r\n        if (this.n8s) return this.n8s;\r\n        this.n8s = Hex.directions.map(direction => this.add(direction));\r\n        return this.n8s;\r\n    }\r\n\r\n    public neighbor(direction: number): Hex {\r\n        return this.neighbors()[direction];\r\n    }\r\n\r\n    public diagonalNeighbor(direction: number): Hex {\r\n        return this.add(Hex.diagonals[direction]);\r\n    }\r\n\r\n    public len(): number {\r\n        return (Math.abs(this.q) + Math.abs(this.r) + Math.abs(this.s)) / 2;\r\n    }\r\n\r\n    public distance(b: Hex): number {\r\n        return this.subtract(b).len();\r\n    }\r\n\r\n    public round(): Hex {\r\n        if (this.roundHex) return this.roundHex;\r\n        let qi: number = Math.round(this.q);\r\n        let ri: number = Math.round(this.r);\r\n        let si: number = Math.round(this.s);\r\n        const qDiff: number = Math.abs(qi - this.q);\r\n        const rDiff: number = Math.abs(ri - this.r);\r\n        const sDiff: number = Math.abs(si - this.s);\r\n        if (qDiff > rDiff && qDiff > sDiff) {\r\n            qi = -ri - si;\r\n        } else if (rDiff > sDiff) {\r\n            ri = -qi - si;\r\n        } else {\r\n            si = -qi - ri;\r\n        }\r\n        this.roundHex = new Hex(qi, ri, si);\r\n        return this.roundHex;\r\n    }\r\n\r\n    public lerp(b: Hex, t: number): Hex {\r\n        return new Hex(this.q * (1 - t) + b.q * t, this.r * (1 - t) + b.r * t, this.s * (1 - t) + b.s * t);\r\n    }\r\n\r\n    public linedraw(b: Hex): Hex[] {\r\n        const N: number = this.distance(b);\r\n        const aNudge: Hex = new Hex(this.q + 0.000001, this.r + 0.000001, this.s - 0.000002);\r\n        const bNudge: Hex = new Hex(b.q + 0.000001, b.r + 0.000001, b.s - 0.000002);\r\n        const results: Hex[] = [];\r\n        const step: number = 1.0 / Math.max(N, 1);\r\n        for (let i = 0; i <= N; i++) {\r\n            results.push(aNudge.lerp(bNudge, step * i).round());\r\n        }\r\n        return results;\r\n    }\r\n}\r\n\r\nexport class OffsetCoord {\r\n    public static EVEN: number = 1;\r\n    public static ODD: number = -1;\r\n\r\n    public static qoffsetFromCube(offset: number, h: Hex): OffsetCoord {\r\n        const col: number = h.q;\r\n        const row: number = h.r + (h.q + offset * (h.q & 1)) / 2;\r\n        return new OffsetCoord(col, row);\r\n    }\r\n\r\n    public static qoffsetToCube(offset: number, h: OffsetCoord): Hex {\r\n        const q: number = h.col;\r\n        const r: number = h.row - (h.col + offset * (h.col & 1)) / 2;\r\n        const s: number = -q - r;\r\n        return new Hex(q, r, s);\r\n    }\r\n\r\n    public static roffsetFromCube(offset: number, h: Hex): OffsetCoord {\r\n        const col: number = h.q + (h.r + offset * (h.r & 1)) / 2;\r\n        const row: number = h.r;\r\n        return new OffsetCoord(col, row);\r\n    }\r\n\r\n    public static roffsetToCube(offset: number, h: OffsetCoord): Hex {\r\n        const q: number = h.col - (h.row + offset * (h.row & 1)) / 2;\r\n        const r: number = h.row;\r\n        const s: number = -q - r;\r\n        return new Hex(q, r, s);\r\n    }\r\n    constructor(public col: number, public row: number) {}\r\n}\r\n\r\nexport class DoubledCoord {\r\n    public static qdoubledFromCube(h: Hex): DoubledCoord {\r\n        const col: number = h.q;\r\n        const row: number = 2 * h.r + h.q;\r\n        return new DoubledCoord(col, row);\r\n    }\r\n\r\n    public static rdoubledFromCube(h: Hex): DoubledCoord {\r\n        const col: number = 2 * h.q + h.r;\r\n        const row: number = h.r;\r\n        return new DoubledCoord(col, row);\r\n    }\r\n\r\n    constructor(public col: number, public row: number) {}\r\n\r\n    public qdoubledToCube(): Hex {\r\n        const q: number = this.col;\r\n        const r: number = (this.row - this.col) / 2;\r\n        const s: number = -q - r;\r\n        return new Hex(q, r, s);\r\n    }\r\n\r\n    public rdoubledToCube(): Hex {\r\n        const q: number = (this.col - this.row) / 2;\r\n        const r: number = this.row;\r\n        const s: number = -q - r;\r\n        return new Hex(q, r, s);\r\n    }\r\n}\r\n\r\nexport class Orientation {\r\n    constructor(\r\n        public f0: number,\r\n        public f1: number,\r\n        public f2: number,\r\n        public f3: number,\r\n        public b0: number,\r\n        public b1: number,\r\n        public b2: number,\r\n        public b3: number,\r\n        public startAngle: number\r\n    ) {}\r\n}\r\n\r\nexport class Layout {\r\n    public static pointy: Orientation = new Orientation(\r\n        Math.sqrt(3.0),\r\n        Math.sqrt(3.0) / 2.0,\r\n        0.0,\r\n        3.0 / 2.0,\r\n        Math.sqrt(3.0) / 3.0,\r\n        -1.0 / 3.0,\r\n        0.0,\r\n        2.0 / 3.0,\r\n        0.5\r\n    );\r\n    public static flat: Orientation = new Orientation(\r\n        3.0 / 2.0,\r\n        0.0,\r\n        Math.sqrt(3.0) / 2.0,\r\n        Math.sqrt(3.0),\r\n        2.0 / 3.0,\r\n        0.0,\r\n        -1.0 / 3.0,\r\n        Math.sqrt(3.0) / 3.0,\r\n        0.0\r\n    );\r\n    constructor(public orientation: Orientation, public size: Point, public origin: Point) {}\r\n\r\n    public hexToPixel(h: Hex): Point {\r\n        const M: Orientation = this.orientation;\r\n        const size: Point = this.size;\r\n        const origin: Point = this.origin;\r\n        const x: number = (M.f0 * h.q + M.f1 * h.r) * size.x;\r\n        const y: number = (M.f2 * h.q + M.f3 * h.r) * size.y;\r\n        return new Point(x + origin.x, y + origin.y);\r\n    }\r\n\r\n    public pixelToHex(p: Point): Hex {\r\n        const M: Orientation = this.orientation;\r\n        const size: Point = this.size;\r\n        const origin: Point = this.origin;\r\n        const pt: Point = new Point((p.x - origin.x) / size.x, (p.y - origin.y) / size.y);\r\n        const q: number = M.b0 * pt.x + M.b1 * pt.y;\r\n        const r: number = M.b2 * pt.x + M.b3 * pt.y;\r\n        return new Hex(q, r, -q - r);\r\n    }\r\n\r\n    public hexCornerOffset(corner: number): Point {\r\n        const M: Orientation = this.orientation;\r\n        const size: Point = this.size;\r\n        const angle: number = (2.0 * Math.PI * (M.startAngle - corner)) / 6;\r\n        return new Point(size.x * Math.cos(angle), size.y * Math.sin(angle));\r\n    }\r\n\r\n    public polygonCorners(h: Hex): Point[] {\r\n        const corners: Point[] = [];\r\n        const center: Point = this.hexToPixel(h);\r\n        for (let i = 0; i < 6; i++) {\r\n            const offset: Point = this.hexCornerOffset(i);\r\n            corners.push(new Point(center.x + offset.x, center.y + offset.y));\r\n        }\r\n        return corners;\r\n    }\r\n}\r\n","import {IGridNode, IGridParams} from \"./types\";\r\nimport * as hexagons from \"./hexagons\";\r\nimport {IPoint} from \"./../../utils/geom\";\r\n\r\nconst makeNeighbors2 = (h: hexagons.Hex): hexagons.Hex[] => {\r\n    const n2: hexagons.Hex[] = Array.from(\r\n        new Set<hexagons.Hex>(([] as hexagons.Hex[]).concat.apply([], h.neighbors().map(hh => hh.neighbors())))\r\n    );\r\n    return n2;\r\n};\r\n\r\nexport default class Grid {\r\n    public gridArr: IGridNode[];\r\n    public edges: number[];\r\n    public gridHash: {[key: string]: number};\r\n    private _layout: hexagons.Layout;\r\n    private _hexes: hexagons.Hex[];\r\n\r\n    constructor(public gridLayout: IGridParams) {\r\n        this._hexes = hexagons.makeRDoubledRectangularShape(0, gridLayout.columns, 0, gridLayout.rows);\r\n        console.log(`gid with ${this._hexes.length} hexes`);\r\n        const hIds = this._hexes.reduce(\r\n            (acc: {[key: string]: number}, cur: hexagons.Hex, i: number) => {\r\n                acc[cur.id] = i;\r\n                return acc;\r\n            },\r\n            {} as {[key: string]: number}\r\n        );\r\n        this._layout = new hexagons.Layout(\r\n            hexagons.Layout.pointy,\r\n            {x: gridLayout.hexSize, y: gridLayout.hexSize},\r\n            {x: 0, y: 0}\r\n        );\r\n        this.gridHash = {};\r\n        this.gridArr = this._hexes.map((h, i) => {\r\n            const entry: IGridNode = {\r\n                id: h.id,\r\n                neighbors: h.neighbors().map(n => hIds[n.id]),\r\n                neighbors2: makeNeighbors2(h)\r\n                    .map(n => hIds[n.id])\r\n                    .filter(id => String(id) !== String(h.id)),\r\n                position: this._layout.hexToPixel(h)\r\n            };\r\n            this.gridHash[entry.id] = i;\r\n            return entry;\r\n        });\r\n        this.edges = this.gridArr.reduce((acc, cur, i) => {\r\n            if (cur.neighbors.findIndex(v => typeof v === \"undefined\") !== -1) acc.push(i);\r\n            return acc;\r\n        }, new Array<number>());\r\n    }\r\n\r\n    public getHexShape(): IPoint[] {\r\n        return this._layout.polygonCorners(this._hexes[0]);\r\n    }\r\n\r\n    public getHexPosAtPixel(world: IPoint): IPoint {\r\n        return this._layout.hexToPixel(this._layout.pixelToHex(world));\r\n    }\r\n\r\n    public getPosAtNode(nodeId: number): IPoint {\r\n        const node = this.gridArr[nodeId];\r\n        if (!node) throw new Error(`Node ${nodeId} not found`);\r\n        return {...node.position};\r\n    }\r\n\r\n    public getHexIdByPixel(position: IPoint): number {\r\n        const hex = this._layout.pixelToHex(position).round();\r\n        return this.gridHash[hex.id];\r\n    }\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\n\r\nexport function makePixiApp(width: number = window.innerWidth, height: number = window.innerHeight) {\r\n    const app = new PIXI.Application({\r\n        width,\r\n        height,\r\n        transparent: true\r\n    });\r\n    return app;\r\n}\r\n","import Grid from \"./../../scentmap/hexgrid/Grid\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\nexport function makeHexTexture(grid: Grid, app: PIXI.Application) {\r\n    const graphics = new PIXI.Graphics();\r\n    graphics.lineStyle(1, 0xffffff);\r\n    graphics.beginFill(0xffffff);\r\n    const corners = grid.getHexShape();\r\n    const pixiCorners = corners.map((c: any) => {\r\n        return new PIXI.Point(c.x, c.y);\r\n    });\r\n    const poly = new PIXI.Polygon(pixiCorners);\r\n    // poly.close();\r\n    graphics.drawPolygon(poly);\r\n    graphics.endFill();\r\n    return app.renderer.generateTexture(graphics, PIXI.SCALE_MODES.NEAREST, 1);\r\n}\r\n","import makeCamera from \"../makeCamera\";\r\nimport Grid from \"../../scentmap/hexgrid/Grid\";\r\n\r\nexport default function makeGridCamera(pixi: PIXI.Application, grid: Grid, hexSize: number) {\r\n    const lastNode = grid.gridArr[grid.gridArr.length - 1];\r\n    const height = lastNode.position.y + hexSize * 2;\r\n    const width = lastNode.position.x + hexSize * 2;\r\n\r\n    const cam = makeCamera(pixi, width, height)\r\n        // .wheel()\r\n        .drag()\r\n        // .pinch()\r\n        // .decelerate()\r\n        .clamp({direction: \"all\", underflow: \"center\"})\r\n        .clampZoom({minWidth: width, minHeight: height});\r\n    // .bounce()\r\n    cam.position.set(width / 2, height / 2);\r\n    return cam;\r\n}\r\n","import {Viewport} from \"pixi-viewport\";\r\n\r\nexport default function makeCamera(pixi: PIXI.Application, worldWidth: number, worldHeight: number) {\r\n    const viewport = new Viewport({\r\n        screenWidth: window.innerWidth,\r\n        screenHeight: window.innerHeight,\r\n        worldWidth,\r\n        worldHeight\r\n    });\r\n    pixi.stage.addChild(viewport);\r\n    return viewport;\r\n}\r\n","/*\r\n * A speed-improved perlin and simplex noise algorithms for 2D.\r\n *\r\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\r\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\r\n * Better rank ordering method by Stefan Gustavson in 2012.\r\n * Converted to Javascript by Joseph Gentle.\r\n *\r\n * Version 2012-03-09\r\n *\r\n * This code was placed in the public domain by its original author,\r\n * Stefan Gustavson. You may use it as you see fit, but\r\n * attribution is appreciated.\r\n *===========================================================\r\n * reworked by Alex Tavor to work nicely with TS and ES6\r\n */\r\n\r\nclass Grad {\r\n    constructor(public x: number, public y: number, public z: number) {}\r\n    public dot2(x: number, y: number) {\r\n        return this.x * x + this.y * y;\r\n    }\r\n    public dot3(x: number, y: number, z: number) {\r\n        return this.x * x + this.y * y + this.z * z;\r\n    }\r\n}\r\n\r\nconst grad3 = [\r\n    new Grad(1, 1, 0),\r\n    new Grad(-1, 1, 0),\r\n    new Grad(1, -1, 0),\r\n    new Grad(-1, -1, 0),\r\n    new Grad(1, 0, 1),\r\n    new Grad(-1, 0, 1),\r\n    new Grad(1, 0, -1),\r\n    new Grad(-1, 0, -1),\r\n    new Grad(0, 1, 1),\r\n    new Grad(0, -1, 1),\r\n    new Grad(0, 1, -1),\r\n    new Grad(0, -1, -1)\r\n];\r\n\r\nconst p = [\r\n    151,\r\n    160,\r\n    137,\r\n    91,\r\n    90,\r\n    15,\r\n    131,\r\n    13,\r\n    201,\r\n    95,\r\n    96,\r\n    53,\r\n    194,\r\n    233,\r\n    7,\r\n    225,\r\n    140,\r\n    36,\r\n    103,\r\n    30,\r\n    69,\r\n    142,\r\n    8,\r\n    99,\r\n    37,\r\n    240,\r\n    21,\r\n    10,\r\n    23,\r\n    190,\r\n    6,\r\n    148,\r\n    247,\r\n    120,\r\n    234,\r\n    75,\r\n    0,\r\n    26,\r\n    197,\r\n    62,\r\n    94,\r\n    252,\r\n    219,\r\n    203,\r\n    117,\r\n    35,\r\n    11,\r\n    32,\r\n    57,\r\n    177,\r\n    33,\r\n    88,\r\n    237,\r\n    149,\r\n    56,\r\n    87,\r\n    174,\r\n    20,\r\n    125,\r\n    136,\r\n    171,\r\n    168,\r\n    68,\r\n    175,\r\n    74,\r\n    165,\r\n    71,\r\n    134,\r\n    139,\r\n    48,\r\n    27,\r\n    166,\r\n    77,\r\n    146,\r\n    158,\r\n    231,\r\n    83,\r\n    111,\r\n    229,\r\n    122,\r\n    60,\r\n    211,\r\n    133,\r\n    230,\r\n    220,\r\n    105,\r\n    92,\r\n    41,\r\n    55,\r\n    46,\r\n    245,\r\n    40,\r\n    244,\r\n    102,\r\n    143,\r\n    54,\r\n    65,\r\n    25,\r\n    63,\r\n    161,\r\n    1,\r\n    216,\r\n    80,\r\n    73,\r\n    209,\r\n    76,\r\n    132,\r\n    187,\r\n    208,\r\n    89,\r\n    18,\r\n    169,\r\n    200,\r\n    196,\r\n    135,\r\n    130,\r\n    116,\r\n    188,\r\n    159,\r\n    86,\r\n    164,\r\n    100,\r\n    109,\r\n    198,\r\n    173,\r\n    186,\r\n    3,\r\n    64,\r\n    52,\r\n    217,\r\n    226,\r\n    250,\r\n    124,\r\n    123,\r\n    5,\r\n    202,\r\n    38,\r\n    147,\r\n    118,\r\n    126,\r\n    255,\r\n    82,\r\n    85,\r\n    212,\r\n    207,\r\n    206,\r\n    59,\r\n    227,\r\n    47,\r\n    16,\r\n    58,\r\n    17,\r\n    182,\r\n    189,\r\n    28,\r\n    42,\r\n    223,\r\n    183,\r\n    170,\r\n    213,\r\n    119,\r\n    248,\r\n    152,\r\n    2,\r\n    44,\r\n    154,\r\n    163,\r\n    70,\r\n    221,\r\n    153,\r\n    101,\r\n    155,\r\n    167,\r\n    43,\r\n    172,\r\n    9,\r\n    129,\r\n    22,\r\n    39,\r\n    253,\r\n    19,\r\n    98,\r\n    108,\r\n    110,\r\n    79,\r\n    113,\r\n    224,\r\n    232,\r\n    178,\r\n    185,\r\n    112,\r\n    104,\r\n    218,\r\n    246,\r\n    97,\r\n    228,\r\n    251,\r\n    34,\r\n    242,\r\n    193,\r\n    238,\r\n    210,\r\n    144,\r\n    12,\r\n    191,\r\n    179,\r\n    162,\r\n    241,\r\n    81,\r\n    51,\r\n    145,\r\n    235,\r\n    249,\r\n    14,\r\n    239,\r\n    107,\r\n    49,\r\n    192,\r\n    214,\r\n    31,\r\n    181,\r\n    199,\r\n    106,\r\n    157,\r\n    184,\r\n    84,\r\n    204,\r\n    176,\r\n    115,\r\n    121,\r\n    50,\r\n    45,\r\n    127,\r\n    4,\r\n    150,\r\n    254,\r\n    138,\r\n    236,\r\n    205,\r\n    93,\r\n    222,\r\n    114,\r\n    67,\r\n    29,\r\n    24,\r\n    72,\r\n    243,\r\n    141,\r\n    128,\r\n    195,\r\n    78,\r\n    66,\r\n    215,\r\n    61,\r\n    156,\r\n    180\r\n];\r\n// To remove the need for index wrapping, double the permutation table length\r\nconst perm = new Array(512);\r\nconst gradP = new Array(512);\r\n\r\n// This isn't a very good seeding function, but it works ok. It supports 2^16\r\n// different seed values. Write something better if you need more seeds.\r\nexport const seed = (s: number = 0) => {\r\n    if (s > 0 && s < 1) {\r\n        // Scale the seed out\r\n        s *= 65536;\r\n    }\r\n\r\n    s = Math.floor(s);\r\n    if (s < 256) {\r\n        s |= s << 8;\r\n    }\r\n\r\n    for (let i = 0; i < 256; i++) {\r\n        let v;\r\n        if (i & 1) {\r\n            v = p[i] ^ (s & 255);\r\n        } else {\r\n            v = p[i] ^ ((s >> 8) & 255);\r\n        }\r\n\r\n        perm[i] = perm[i + 256] = v;\r\n        gradP[i] = gradP[i + 256] = grad3[v % 12];\r\n    }\r\n};\r\n\r\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\r\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\r\nconst G2 = (3 - Math.sqrt(3)) / 6;\r\n\r\nconst F3 = 1 / 3;\r\nconst G3 = 1 / 6;\r\n\r\n// 2D simplex noise\r\nexport const simplex2 = (xin: number, yin: number) => {\r\n    let n0, n1, n2; // Noise contributions from the three corners\r\n    // Skew the input space to determine which simplex cell we're in\r\n    const s = (xin + yin) * F2; // Hairy factor for 2D\r\n    let i = Math.floor(xin + s);\r\n    let j = Math.floor(yin + s);\r\n    const t = (i + j) * G2;\r\n    const x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\r\n    const y0 = yin - j + t;\r\n    // For the 2D case, the simplex shape is an equilateral triangle.\r\n    // Determine which simplex we are in.\r\n    let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n    if (x0 > y0) {\r\n        // lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n        i1 = 1;\r\n        j1 = 0;\r\n    } else {\r\n        // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n        i1 = 0;\r\n        j1 = 1;\r\n    }\r\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n    // c = (3-sqrt(3))/6\r\n    const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n    const y1 = y0 - j1 + G2;\r\n    const x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n    const y2 = y0 - 1 + 2 * G2;\r\n    // Work out the hashed gradient indices of the three simplex corners\r\n    i &= 255;\r\n    j &= 255;\r\n    const gi0 = gradP[i + perm[j]];\r\n    const gi1 = gradP[i + i1 + perm[j + j1]];\r\n    const gi2 = gradP[i + 1 + perm[j + 1]];\r\n    // Calculate the contribution from the three corners\r\n    let t0 = 0.5 - x0 * x0 - y0 * y0;\r\n    if (t0 < 0) {\r\n        n0 = 0;\r\n    } else {\r\n        t0 *= t0;\r\n        n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\r\n    }\r\n    let t1 = 0.5 - x1 * x1 - y1 * y1;\r\n    if (t1 < 0) {\r\n        n1 = 0;\r\n    } else {\r\n        t1 *= t1;\r\n        n1 = t1 * t1 * gi1.dot2(x1, y1);\r\n    }\r\n    let t2 = 0.5 - x2 * x2 - y2 * y2;\r\n    if (t2 < 0) {\r\n        n2 = 0;\r\n    } else {\r\n        t2 *= t2;\r\n        n2 = t2 * t2 * gi2.dot2(x2, y2);\r\n    }\r\n    // Add contributions from each corner to get the final noise value.\r\n    // The result is scaled to return values in the interval [-1,1].\r\n    return 70 * (n0 + n1 + n2);\r\n};\r\n\r\n// 3D simplex noise\r\nexport const simplex3 = (xin: number, yin: number, zin: number) => {\r\n    let n0, n1, n2, n3; // Noise contributions from the four corners\r\n\r\n    // Skew the input space to determine which simplex cell we're in\r\n    const s = (xin + yin + zin) * F3; // Hairy factor for 2D\r\n    let i = Math.floor(xin + s);\r\n    let j = Math.floor(yin + s);\r\n    let k = Math.floor(zin + s);\r\n\r\n    const t = (i + j + k) * G3;\r\n    const x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\r\n    const y0 = yin - j + t;\r\n    const z0 = zin - k + t;\r\n\r\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n    // Determine which simplex we are in.\r\n    let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\r\n    let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\r\n    if (x0 >= y0) {\r\n        if (y0 >= z0) {\r\n            i1 = 1;\r\n            j1 = 0;\r\n            k1 = 0;\r\n            i2 = 1;\r\n            j2 = 1;\r\n            k2 = 0;\r\n        } else if (x0 >= z0) {\r\n            i1 = 1;\r\n            j1 = 0;\r\n            k1 = 0;\r\n            i2 = 1;\r\n            j2 = 0;\r\n            k2 = 1;\r\n        } else {\r\n            i1 = 0;\r\n            j1 = 0;\r\n            k1 = 1;\r\n            i2 = 1;\r\n            j2 = 0;\r\n            k2 = 1;\r\n        }\r\n    } else {\r\n        if (y0 < z0) {\r\n            i1 = 0;\r\n            j1 = 0;\r\n            k1 = 1;\r\n            i2 = 0;\r\n            j2 = 1;\r\n            k2 = 1;\r\n        } else if (x0 < z0) {\r\n            i1 = 0;\r\n            j1 = 1;\r\n            k1 = 0;\r\n            i2 = 0;\r\n            j2 = 1;\r\n            k2 = 1;\r\n        } else {\r\n            i1 = 0;\r\n            j1 = 1;\r\n            k1 = 0;\r\n            i2 = 1;\r\n            j2 = 1;\r\n            k2 = 0;\r\n        }\r\n    }\r\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n    // c = 1/6.\r\n    const x1 = x0 - i1 + G3; // Offsets for second corner\r\n    const y1 = y0 - j1 + G3;\r\n    const z1 = z0 - k1 + G3;\r\n\r\n    const x2 = x0 - i2 + 2 * G3; // Offsets for third corner\r\n    const y2 = y0 - j2 + 2 * G3;\r\n    const z2 = z0 - k2 + 2 * G3;\r\n\r\n    const x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\r\n    const y3 = y0 - 1 + 3 * G3;\r\n    const z3 = z0 - 1 + 3 * G3;\r\n\r\n    // Work out the hashed gradient indices of the four simplex corners\r\n    i &= 255;\r\n    j &= 255;\r\n    k &= 255;\r\n    const gi0 = gradP[i + perm[j + perm[k]]];\r\n    const gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\r\n    const gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\r\n    const gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\r\n\r\n    // Calculate the contribution from the four corners\r\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\r\n    if (t0 < 0) {\r\n        n0 = 0;\r\n    } else {\r\n        t0 *= t0;\r\n        n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\r\n    }\r\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\r\n    if (t1 < 0) {\r\n        n1 = 0;\r\n    } else {\r\n        t1 *= t1;\r\n        n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\r\n    }\r\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\r\n    if (t2 < 0) {\r\n        n2 = 0;\r\n    } else {\r\n        t2 *= t2;\r\n        n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\r\n    }\r\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\r\n    if (t3 < 0) {\r\n        n3 = 0;\r\n    } else {\r\n        t3 *= t3;\r\n        n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\r\n    }\r\n    // Add contributions from each corner to get the final noise value.\r\n    // The result is scaled to return values in the interval [-1,1].\r\n    return 32 * (n0 + n1 + n2 + n3);\r\n};\r\n\r\nfunction fade(t: number) {\r\n    return t * t * t * (t * (t * 6 - 15) + 10);\r\n}\r\n\r\nfunction lerp(a: number, b: number, t: number) {\r\n    return (1 - t) * a + t * b;\r\n}\r\n\r\n// 2D Perlin Noise\r\nexport const perlin2 = (x: number, y: number) => {\r\n    // Find unit grid cell containing point\r\n    let X = Math.floor(x),\r\n        Y = Math.floor(y);\r\n    // Get relative xy coordinates of point within that cell\r\n    x = x - X;\r\n    y = y - Y;\r\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n    X = X & 255;\r\n    Y = Y & 255;\r\n\r\n    // Calculate noise contributions from each of the four corners\r\n    const n00 = gradP[X + perm[Y]].dot2(x, y);\r\n    const n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\r\n    const n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\r\n    const n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\r\n\r\n    // Compute the fade curve value for x\r\n    const u = fade(x);\r\n\r\n    // Interpolate the four results\r\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\r\n};\r\n\r\n// 3D Perlin Noise\r\nexport const perlin3 = (x: number, y: number, z: number) => {\r\n    // Find unit grid cell containing point\r\n    let X = Math.floor(x),\r\n        Y = Math.floor(y),\r\n        Z = Math.floor(z);\r\n    // Get relative xyz coordinates of point within that cell\r\n    x = x - X;\r\n    y = y - Y;\r\n    z = z - Z;\r\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n    X = X & 255;\r\n    Y = Y & 255;\r\n    Z = Z & 255;\r\n\r\n    // Calculate noise contributions from each of the eight corners\r\n    const n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\r\n    const n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\r\n    const n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\r\n    const n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\r\n    const n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\r\n    const n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\r\n    const n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\r\n    const n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);\r\n\r\n    // Compute the fade curve value for x, y, z\r\n    const u = fade(x);\r\n    const v = fade(y);\r\n    const w = fade(z);\r\n\r\n    // Interpolate\r\n    return lerp(\r\n        lerp(lerp(n000, n100, u), lerp(n001, n101, u), w),\r\n        lerp(lerp(n010, n110, u), lerp(n011, n111, u), w),\r\n        v\r\n    );\r\n};\r\n","import {hslToRgb, rgbArrayToHex} from \"../../utils/colorConversions\";\r\nimport {Sprite} from \"pixi.js\";\r\nimport Grid from \"../../scentmap/hexgrid/Grid\";\r\nimport * as noise from \"../../utils/simplexNoise\";\r\n\r\nnoise.seed(Math.random());\r\nconst defaultSpeed = 1;\r\nlet step = 0;\r\nlet current = Date.now();\r\nexport default function repaintWithNoise(\r\n    grid: Grid,\r\n    sprites: Sprite[],\r\n    scale: number = 0,\r\n    speed: number = defaultSpeed\r\n) {\r\n    const noiseScale = !scale ? Math.sqrt(grid.gridArr.length) * 12 : scale;\r\n    sprites.forEach((sprite: Sprite, i: number) => {\r\n        const position = grid.gridArr[i].position;\r\n        const rgb2 = hslToRgb(noise.simplex3(position.x / noiseScale, position.y / noiseScale, step), 0.5, 0.5);\r\n        const tint = rgbArrayToHex(rgb2);\r\n        sprite.tint = tint;\r\n    });\r\n    const nc = Date.now();\r\n    step += speed / (nc - current);\r\n    current = nc;\r\n}\r\n","import Grid from \"../scentmap/hexgrid/Grid\";\r\nimport {IDisplay} from \"./types\";\r\nimport {makePixiApp} from \"./makePixiApp\";\r\nimport {makeHexTexture} from \"./hexgrid/makeHexTexture\";\r\nimport {makeHexesGrid} from \"./hexgrid/makeHexesGrid\";\r\nimport makeGridCamera from \"./hexgrid/makeGridCamera\";\r\nimport repaintWithNoise from \"./hexgrid/repaintWithNoise\";\r\nimport {animationLoop} from \"../utils/loop/animationLoop\";\r\nimport addPrettyHexesClick from \"./hexgrid/addPrettyHexesClick\";\r\nimport {makeWallsView} from \"./walls/makeWallsView\";\r\n\r\nexport enum BgType {\r\n    staticNoise,\r\n    animatedNoise,\r\n    prettyHexesClick,\r\n    none\r\n}\r\n\r\nexport default function makeDisplay(\r\n    gameCanvas: HTMLDivElement,\r\n    grid: Grid,\r\n    walls: number[],\r\n    bgType: BgType = BgType.none\r\n): IDisplay {\r\n    const hs = grid.gridLayout.hexSize;\r\n    const pixi = makePixiApp(window.innerWidth - hs * 0.5, window.innerHeight - hs * 0.5);\r\n    const tex = makeHexTexture(grid, pixi);\r\n    const hexes = makeHexesGrid(grid, tex);\r\n    const bgSprites = hexes.nodes;\r\n    const camera = makeGridCamera(pixi, grid, hs);\r\n    const repaint = () => repaintWithNoise(grid, bgSprites, grid.gridArr.length / 10, 0.01);\r\n    switch (bgType) {\r\n        case BgType.animatedNoise:\r\n            animationLoop(repaint);\r\n            break;\r\n        case BgType.prettyHexesClick:\r\n            addPrettyHexesClick(grid, camera, hexes.nodes);\r\n            break;\r\n        case BgType.staticNoise:\r\n            repaint();\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    camera.addChild(hexes.view);\r\n\r\n    const wallsView = makeWallsView(grid, walls, tex);\r\n    camera.addChild(wallsView.view);\r\n\r\n    gameCanvas.appendChild(pixi.view);\r\n\r\n    return {pixi, bgSprites, camera, hexTexture: tex, wallsSprites: wallsView.nodes};\r\n}\r\n","import {ClickEventData} from \"pixi-viewport\";\r\nimport Grid from \"../../scentmap/hexgrid/Grid\";\r\nimport {distanceSq} from \"../../utils/geom\";\r\nimport {Sprite} from \"pixi.js\";\r\nimport {hexToRgb, rgbToHsl, rgbArrayToHex, hslToRgb} from \"../../utils/colorConversions\";\r\n\r\nexport default function addPrettyHexesClick(grid: Grid, camera: any, hexes: Sprite[]) {\r\n    const getDistances = (hexPoint: {x: number; y: number}) => {\r\n        let maxDist = 0;\r\n        const distances = grid.gridArr.map(node => {\r\n            const dist = distanceSq(hexPoint, node.position);\r\n            dist >= maxDist && (maxDist = dist);\r\n            return dist;\r\n        });\r\n        return {maxDist, distances};\r\n    };\r\n    const processNodesForDistance = (dist: {maxDist: number; distances: number[]}) => (\r\n        node: PIXI.Sprite,\r\n        i: number\r\n    ) => {\r\n        const rgb = hexToRgb(node.tint);\r\n        const hsl = rgbToHsl(rgb.r, rgb.g, rgb.g);\r\n        const d = Math.sqrt(dist.distances[i] / dist.maxDist);\r\n        hsl[0] = d;\r\n        hsl[1] = hsl[2] = 0.5;\r\n        // @ts-ignore\r\n        const rgb2 = hslToRgb(...hsl);\r\n        const hex2 = rgbArrayToHex(rgb2);\r\n        node.tint = hex2;\r\n    };\r\n    const onViewClicked = (data: ClickEventData) => {\r\n        const hexPoint = grid.getHexPosAtPixel(data.world);\r\n        const processNode = processNodesForDistance(getDistances(hexPoint));\r\n        hexes.forEach(processNode);\r\n    };\r\n    camera.on(\"clicked\", onViewClicked);\r\n}\r\n","import Grid from \"./../../scentmap/hexgrid/Grid\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\nexport function makeWallsView(grid: Grid, walls: number[], tex: PIXI.Texture) {\r\n    const view = new PIXI.ParticleContainer(500000, {\r\n        tint: true\r\n    });\r\n    const nodes = grid.gridArr.map((node, i) => {\r\n        const sprite = new PIXI.Sprite(tex);\r\n        sprite.position.set(node.position.x, node.position.y);\r\n        view.addChild(sprite);\r\n        sprite.tint = 0xffff80;\r\n        sprite.alpha = Math.abs(walls[i] - 1);\r\n        return sprite;\r\n    });\r\n    return {view, nodes};\r\n}\r\n","import Grid from \"../../scentmap/hexgrid/Grid\";\r\nimport {makeWalls} from \"../../scentmap/walls/makeWalls\";\r\nimport makeDisplay, {BgType} from \"../../pixi/makeDisplay\";\r\nimport {GridMap} from \"types\";\r\n\r\nconst rows = 50;\r\nconst columns = rows;\r\nconst hexSize = 10;\r\n\r\nexport const makeMap = (gameCanvas: HTMLDivElement) => {\r\n    const grid = new Grid({rows, columns, hexSize});\r\n    const walls = makeWalls(grid);\r\n    const display = makeDisplay(gameCanvas, grid, walls, BgType.none);\r\n    return {grid, walls, display} as GridMap;\r\n};\r\n","import Grid from \"../hexgrid/Grid\";\r\n\r\nexport function makeWalls(grid: Grid) {\r\n    const numNodes = grid.gridArr.length;\r\n    const walls: number[] = new Array(numNodes).fill(1);\r\n    walls.forEach((w, i) => {\r\n        grid.edges.indexOf(i) !== -1 && (walls[i] = 0);\r\n    });\r\n    return walls;\r\n}\r\n","const config = {min: 0, refillPerSecond: 10};\r\n\r\nexport function makeFillbars(bars: {max: number; top: number; bottom: number}) {\r\n    const updateBar = (bar: number, delta: number) => {\r\n        const result = bar + config.refillPerSecond * delta;\r\n        if (result >= bars.max) {\r\n            return bars.max;\r\n        }\r\n        return result;\r\n    };\r\n    const update = (delta: number) => {\r\n        bars.top = updateBar(bars.top, delta);\r\n        bars.bottom = updateBar(bars.bottom, delta);\r\n    };\r\n    return {bars, update};\r\n}\r\n","import timeVariableLoop from \"utils/loop/timeVariableLoop\";\r\nimport {makeCollectors} from \"game/makeCollectors\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {makeScentDroppers} from \"./makeScentDroppers\";\r\nimport {makeBoids, populateBoids} from \"./makeBoids\";\r\nimport {makeAvoidScent} from \"./makeAvoidScent\";\r\nimport {makeMap} from \"./makeMap\";\r\nimport {makeFillbars} from \"game/makeFillbars\";\r\nimport {GridBoids} from \"boids/GridBoids\";\r\n\r\nconst makeSyncPeers = (\r\n    gameState: GameState,\r\n    droppers: {dropFromPeer: (nodes: number[]) => void},\r\n    boids: GridBoids\r\n) => () => {\r\n    const ls = gameState.lobbyState;\r\n    if (!ls) return;\r\n    if (gameState.gameState !== GAME_STATE.duel) return;\r\n    if (ls.otherPeerData.nodesTouched && ls.otherPeerData.nodesTouched.length) {\r\n        droppers.dropFromPeer(ls.otherPeerData.nodesTouched);\r\n        ls.otherPeerData.nodesTouched = [] as number[];\r\n    }\r\n    if (ls.ownPeerData.isOP) {\r\n        ls.ownPeerData.isGameOver = gameState.isGameOver;\r\n        ls.ownPeerData.score = {...gameState.score};\r\n        ls.ownPeerData.boids = boids.boids.map(boid => ({\r\n            position: {x: boid.position.x, y: boid.position.y},\r\n            velocity: boid.velocity\r\n        }));\r\n    } else {\r\n        const isOtherGameOver = Boolean(ls.otherPeerData.isGameOver);\r\n        if (gameState.isGameOver && !isOtherGameOver) {\r\n            gameState.actions.startGame();\r\n        } else if (!gameState.isGameOver && isOtherGameOver) {\r\n            gameState.actions.endGame();\r\n        }\r\n        if (ls.otherPeerData.score) {\r\n            gameState.score.top = ls.otherPeerData.score.top;\r\n            gameState.score.bottom = ls.otherPeerData.score.bottom;\r\n        }\r\n        if (gameState.isGameOver) return;\r\n\r\n        // sync boids\r\n        const othersBoids = ls.otherPeerData.boids || boids.boids;\r\n        while (othersBoids.length !== boids.boids.length) {\r\n            if (othersBoids.length > boids.boids.length) {\r\n                const maxIndex = boids.boids.length;\r\n                const peerBoid = othersBoids[maxIndex];\r\n                boids.addBoid(peerBoid.position);\r\n            }\r\n            while (othersBoids.length < boids.boids.length) {\r\n                boids.boids.pop();\r\n            }\r\n        }\r\n        othersBoids.forEach((b, i) => {\r\n            boids.syncBoid(b, i);\r\n        });\r\n        ls.otherPeerData.boids = othersBoids;\r\n    }\r\n    if (ls.ownPeerData.isOP || (ls.ownPeerData.nodesTouched && ls.ownPeerData.nodesTouched.length)) {\r\n        ls.send && ls.send(ls.ownPeerData);\r\n        ls.ownPeerData.nodesTouched = [] as number[];\r\n    }\r\n};\r\nexport function initialize(gameCanvas: HTMLDivElement, gameState: GameState) {\r\n    const onTopScored = () => {\r\n        gameState.score.top += 1;\r\n    };\r\n    const onBottomScored = () => {\r\n        gameState.score.bottom += 1;\r\n    };\r\n    const map = makeMap(gameCanvas);\r\n    const scent = makeAvoidScent(map);\r\n    const boids = makeBoids(map, scent.data);\r\n    const collectors = makeCollectors({\r\n        display: map.display,\r\n        grid: map.grid,\r\n        boids,\r\n        colors: gameState.colors,\r\n        actions: {onTopScored, onBottomScored}\r\n    });\r\n    const fillbars = makeFillbars(gameState.fillbars);\r\n    const droppers = makeScentDroppers(gameState, map, scent.data, fillbars);\r\n    const syncPeers = makeSyncPeers(gameState, droppers, boids);\r\n\r\n    const update = (delta: number) => {\r\n        collectors.update(delta);\r\n        droppers.update(delta);\r\n        scent.update(delta);\r\n        boids.update(delta);\r\n        fillbars.update(delta);\r\n        gameState.duration += delta;\r\n        syncPeers();\r\n    };\r\n    timeVariableLoop(gameState.time, update);\r\n    const reset = () => {\r\n        scent.data.scentGrid.forEach((v, i) => (scent.data.scentGrid[i] = 0));\r\n        droppers.droppers.updates = [];\r\n        boids.reset();\r\n        gameState.score.top = 0;\r\n        gameState.score.bottom = 0;\r\n        fillbars.bars.top = fillbars.bars.max;\r\n        fillbars.bars.bottom = fillbars.bars.max;\r\n        populateBoids(boids);\r\n    };\r\n    gameState.actions.reset = reset;\r\n}\r\n","import React, {useRef, useEffect} from \"react\";\nimport {GameState, GAME_STATE} from \"components/types\";\nimport {observable, autorun, action} from \"mobx\";\nimport {Hud} from \"components/Hud\";\nimport {TimeCountdown} from \"components/duel/TimeCountdown\";\nimport {initialize} from \"./game/init/initialize\";\nimport {getLobbyState} from \"components/lobby/getLobbyState\";\n\n/*\n  TODO\n    matchmaking\n        server\n            runs peerjs\n            keeps list of connected users\n            user id is a string of profile json\n            heorku it for now\n        lobby\n            ...connecting modal\n            list of waiting users\n            toggle \"waiting\" status\n            keepalive\n                see if can keep peerjs connection alive\n                poll at 10s interval\n            inactivity timeout\n            disconnected modal, with reconnect and exit buttons\n        user settings\n            user icon & name always visible\n                random name from default to https://namey.muffinlabs.com/\n                random icon from https://www.gravatar.com/avatar/[numeric id]?d=retro\n                    where numeric id is randomInt(0,99999999999999999999999999999999)\n        lobby 2\n            clearer status\n                have a log on screen \n                    awaiting connection\n                        log is small\n                    in connection\n                        connecting\n                        awaiting confirmation\n                        requesting confirmation\n                        confirmed, starting game\n        user personalization\n            user icon is clickable, leads to options screen\n            options screen\n                choose name\n                choose color\n                choose icon link            \n        add name verification with server\n    better ui\n        better endgame screen for duel\n        better in-game ui\n    connection fail states\n        disconnected from peer\n        disconnected from serve\n    solve bug where boids get stuck in walls\n    solve bug where switching tab and returning messes boids positions up\n*/\n\nfunction App() {\n    const canvasRef = useRef(null as HTMLDivElement | null);\n    const gameState = (observable({\n        gameState: GAME_STATE.intro,\n        score: {top: 0, bottom: 0},\n        fillbars: {max: 10, top: 10, bottom: 10},\n        colors: {top: 0x80ff80, bottom: 0xff8080},\n        duration: 0,\n        maxDuration: 30,\n        time: {speed: 1},\n        isGameOver: true\n    }) as any) as GameState;\n    // @ts-ignore\n    gameState.actions = {};\n    const ls = getLobbyState(gameState);\n    const endGame = action(() => {\n        gameState.time.speed = 0;\n        gameState.isGameOver = true;\n    });\n    const startGame = action(() => {\n        gameState.isGameOver = false;\n        gameState.actions.reset && gameState.actions.reset();\n        gameState.time.speed = 1;\n        gameState.duration = gameState.gameState === GAME_STATE.duel ? 0 : gameState.maxDuration;\n    });\n\n    gameState.actions.endGame = endGame;\n    gameState.actions.startGame = startGame;\n\n    useEffect(() => {\n        canvasRef.current && initialize(canvasRef.current, gameState);\n    }, [canvasRef]);\n\n    useEffect(() => {\n        return autorun(() => {\n            gameState.score.bottom + gameState.score.top >= 33 && endGame();\n        });\n    }, []);\n\n    useEffect(() => {\n        return autorun(\n            () =>\n                (gameState.gameState === GAME_STATE.practice || gameState.gameState === GAME_STATE.duel) && startGame()\n        );\n    }, []);\n\n    if (window.location.hash) {\n        const autoConnect = () => {\n            const peer = window.location.hash.substr(1);\n            window.location.hash = \"\";\n            ls.peer = peer;\n            ls.connectTo && ls.connectTo(peer);\n            gameState.gameState = GAME_STATE.lobby;\n        };\n        autoConnect();\n    }\n    return (\n        <div style={{position: \"relative\", backgroundColor: \"black\", width: \"100vw\", height: \"100vh\"}}>\n            <TimeCountdown {...{data: gameState}} />\n            <div style={{position: \"fixed\"}} ref={canvasRef} />\n            <Hud {...{gameState}} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}