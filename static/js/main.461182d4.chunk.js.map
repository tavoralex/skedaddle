{"version":3,"sources":["../node_modules/peerjs/dist sync","components/types.ts","utils/colorConversions.ts","components/common/Button.tsx","components/practice/PracticeOver.tsx","components/practice/HudPractice.tsx","components/duel/DuelOver.tsx","components/duel/HudDuel.tsx","components/intro/IntroScreen.tsx","components/info/About.tsx","utils/uuid.ts","components/lobby/getLobbyState.ts","components/lobby/peerLogic.ts","components/lobby/Lobby.tsx","components/duel/copyToClipboard.js","components/lobby/ActionButton.tsx","components/Hud.tsx","components/duel/TimeCountdown.tsx","utils/loop/animationLoop.ts","utils/loop/deltaLoop.ts","utils/loop/timeVariableLoop.ts","pixi/boids/makeBoidsViews.ts","game/collectorTouchedTween.js","pixi/addDisplayDragListener.ts","game/addDropFunctionality.ts","pixi/addDisplayClickListener.ts","scentmap/scent/makeScentDropper.ts","game/init/makeScentDroppers.tsx","utils/geom.ts","boids/makeBoid.ts","boids/behavior/separation.ts","boids/behavior/cohesion.ts","boids/steering/seek.ts","boids/steering/applyForce.ts","boids/GridBoids.ts","boids/getSteering.ts","boids/makeBoids.ts","game/init/boidTemplate.tsx","game/init/makeBoids.tsx","pixi/hexgrid/makeHexesGrid.ts","game/init/makeAvoidScent.tsx","scentmap/scent/makeScent.tsx","scentmap/scent/makeUpdateScent.ts","pixi/scent/makeUpdateHexColorsByScent.tsx","scentmap/hexgrid/hexagons.ts","scentmap/hexgrid/Grid.ts","pixi/hexgrid/makeGridCamera.ts","pixi/makeCamera.ts","utils/simplexNoise.ts","pixi/hexgrid/repaintWithNoise.ts","pixi/makeDisplay.ts","pixi/hexgrid/addPrettyHexesClick.ts","pixi/makePixiApp.ts","pixi/hexgrid/makeHexTexture.ts","pixi/walls/makeWallsView.ts","game/init/makeMap.tsx","scentmap/walls/makeWalls.tsx","game/makeFillbars.ts","game/init/initialize.tsx","game/makeCollectors.ts","App.tsx","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","GAME_STATE","letters","rgbArrayToHex","arr","length","r","g","b","toHex","x","hex","Math","round","toString","parseInt","concat","hexToRgb","result","exec","hue2rgb","p","q","t","hslToRgb","h","s","l","hexValueToString","value","hueString","Button","styleDefault","Object","objectSpread","width","height","backgroundColor","colors","default","display","transition","style","_useState","useState","_useState2","slicedToArray","isDown","setisDown","_useState3","_useState4","isHover","setIsHover","_useState5","_useState6","setStyle","colorDown","down","colorHover","hover","useEffect","disabled","color","pointerEvents","react_default","a","createElement","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onClick","gridRow","gridColumn","alignSelf","justifySelf","fontWeight","fontSize","padding","userSelect","textStyle","title","children","PracticeOver","data","window","innerHeight","innerWidth","gridTemplateRows","gridTemplateColumns","Button_Button","actions","startGame","gameState","intro","fontStyle","textShadow","position","HudPractice","score","top","topValue","settopValue","autorun","fillbars","max","topFillbarValue","settopFillbarValue","isGameOver","setisGameOver","v","maxWidth","topColor","PracticeOver_PracticeOver","left","console","log","margin","bottom","DuelOver","reset","lobby","HudDuel","bottomValue","setBottomValue","bottomFillbarValue","setBottomFillbarValue","_useState7","_useState8","_useState9","_useState10","getStringVal","bottomColor","DuelOver_DuelOver","right","IntroScreen","isVisible","setisVisible","practice","about","About","textAlign","whiteSpace","paddingLeft","paddingRight","uuid","random","replace","getLobbyState","lobbyState","observable","peer","status","ownId","ownPeerData","isReady","nodesTouched","otherPeerData","connectTo","state","onData","onConnection","Peer","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","Promise","reject","conn","connect","on","send","bind","stop","_x","apply","this","arguments","peerLogic","d","action","boids","placeSelf","paddingBottom","rowStyle","undefined","Lobby","friendKey","setfriendKey","setStatus","str","el","document","setAttribute","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","paddingTop","navigator","clipboard","readText","then","clipText","type","onChange","target","duel","reply","assign","marginTop","Boolean","_reply","sent","isOP","_onClick","_callee2","_context2","ActionButton","Hud","hud","setgameState","HudPractice_HudPractice","HudDuel_HudDuel","IntroScreen_IntroScreen","About_About","Lobby_Lobby","TimeCountdown","isTimed","setisTimed","tLeft","ceil","maxDuration","duration","secondsLeft","setsecondsLeft","endGame","touchAction","animationLoop","callback","requestAnimationFrame","cancelAnimationFrame","current","Date","now","timeVariableLoop","time","nc","delta","deltaLoop","speed","makeBoidsViews","tex","quantity","maxBoids","view","ParticleContainer","uvs","tint","rotation","vertices","sprites","Array","from","sprite","Sprite","addChild","i","floor","randomColor","collectorTouchedTween","_ref$duration","Tween","scale","set","alpha","to","start","easing","Quadratic","Out","isDragging","addDropFunctionality","grid","onDrag","onTap","onStart","onEnd","hs","gridLayout","hexSize","camera","getHexIdByPixel","world","y","addDisplayClickListener","onMove","getNodeByPixel","point","global","node","toWorld","isNaN","addEventListener","addDisplayDragListener","makeScentDropper","scent","index","seconds","elapsed","scentGrid","makeScentDroppers","map","droppers","updates","isDropping","lastDelta","dropOwn","push","bars","ls","fill","update","filter","dropFromPeer","nodes","forEach","clamp","limit","magnitude","n","normalize","multiplyScalar","distanceSq","dx","dy","sqrt","m","scalar","divideByScalar","addVector","subtractVector","makeBoid","template","velocity","drag","thrust","radius","separation","boid","neighbors","steer","numNeighbors","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","neighbor","diff","err","return","cohesion","seek","applyForce","vector","force","GridBoids","boidTemplate","walls","scentToAvoid","classCallCheck","boidViews","occupiableNodes","numNodes","initialize","createClass","key","parent","updateBoids","updateViews","nodeId","getPosAtNode","splice","indexOf","pop","syncWith","_this","hue","_this2","oNodes","delete","neighborNodes","gridArr","obstacles","ns","highestScent","avoidGoal","avoidVal","olfaction","avoidGoals","forces","steering","getSteering","weights","avoidObstacles","avoidScent","applySteering","add","numBoids","boidViewsObj","hexTexture","Set","motion","seekScent","alignment","populateBoids","addBoidAtNode","makeBoids","makeHexesGrid","PIXI","makeAvoidScent","spread","evaporation","minValue","permeability","makeScent","updateScent","w","targets","scentVal","validTargets","distribute","min","dSlice","updateScentView","gridSprites","average","makeUpdateHexColorsByScent","Point","Hex","n8s","roundHex","direction","directions","k","diagonals","abs","subtract","len","qi","ri","si","qDiff","rDiff","sDiff","N","distance","aNudge","bNudge","results","step","lerp","get","OffsetCoord","col","row","offset","EVEN","ODD","DoubledCoord","Orientation","f0","f1","f2","f3","b0","b1","b2","b3","startAngle","Layout","orientation","size","origin","M","pt","corner","angle","PI","cos","sin","corners","center","hexToPixel","hexCornerOffset","pointy","flat","makeNeighbors2","hh","Grid","edges","gridHash","_layout","_hexes","minCol","maxCol","minRow","maxRow","rdoubledToCube","hexagons","columns","rows","hIds","reduce","acc","cur","entry","neighbors2","String","findIndex","polygonCorners","pixelToHex","makeGridCamera","pixi","lastNode","cam","worldWidth","worldHeight","viewport","Viewport","screenWidth","screenHeight","stage","makeCamera","underflow","clampZoom","minWidth","minHeight","Grad","z","grad3","perm","gradP","G3","simplex3","xin","yin","zin","i1","j1","k1","i2","j2","k2","j","x0","y0","z0","x1","y1","z1","x2","y2","z2","x3","y3","z3","gi0","gi1","gi2","gi3","t0","t1","t2","t3","dot3","noise","BgType","defaultSpeed","addPrettyHexesClick","hexes","processNodesForDistance","dist","rgb","hsl","rgbToHsl","distances","maxDist","hex2","toConsumableArray","hexPoint","getHexPosAtPixel","processNode","getDistances","makeDisplay","gameCanvas","bgType","none","transparent","makePixiApp","app","graphics","lineStyle","beginFill","pixiCorners","getHexShape","c","poly","drawPolygon","endFill","renderer","generateTexture","NEAREST","makeHexTexture","bgSprites","repaint","noiseScale","repaintWithNoise","animatedNoise","prettyHexesClick","staticNoise","wallsView","makeWallsView","wallsSprites","makeMap","makeWalls","config","refillPerSecond","makeSyncPeers","isOtherGameOver","maxIndex","peerBoid","addBoid","syncBoid","collectors","callbacks","all","views","effectViews","effectSprites","effectSprite","anchor","ind","removeBoid","onTopScored","onBottomScored","makeCollectors","updateBar","bar","makeFillbars","syncPeers","App","canvasRef","useRef","TimeCountdown_TimeCountdown","ref","Hud_Hud","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.461182d4.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 39;","import {IBoid} from \"./../boids/makeBoids\";\r\nimport {ITime} from \"utils/loop/timeVariableLoop\";\r\n\r\nexport enum GAME_STATE {\r\n    \"intro\" = \"intro\",\r\n    \"duel\" = \"duel\",\r\n    \"practice\" = \"practice\",\r\n    \"about\" = \"about\",\r\n    \"lobby\" = \"lobby\"\r\n}\r\n\r\nexport type LobbyStatus = \"peerless\" | \"connecting\" | \"connected\" | \"awaiting-peer-ready\";\r\nexport type ConnectonResult = {send: (data: PeerData) => void; peer: string};\r\nexport type LobbyState = {\r\n    peer: string;\r\n    ownId: string;\r\n    status: LobbyStatus;\r\n    ownPeerData: PeerData;\r\n    otherPeerData: PeerData;\r\n    connectTo?: (id: string) => Promise<ConnectonResult>;\r\n    send?: (data: PeerData) => void;\r\n};\r\n\r\nexport type GameState = {\r\n    gameState: GAME_STATE;\r\n    score: {top: number; bottom: number};\r\n    colors: {top: number; bottom: number};\r\n    fillbars: {max: number; top: number; bottom: number};\r\n    actions: {reset: () => void; startGame: () => void; endGame: () => void};\r\n    time: ITime;\r\n    duration: number;\r\n    maxDuration: number;\r\n    isGameOver: boolean;\r\n    lobbyState?: LobbyState;\r\n};\r\n\r\nexport type PeerBoid = {position: {x: number; y: number}; velocity: {x: number; y: number}};\r\n\r\nexport type PeerData = {\r\n    isOP?: boolean;\r\n    isGameOver?: boolean;\r\n    isReady?: boolean;\r\n    nodesTouched?: number[];\r\n    boids?: PeerBoid[];\r\n    timeLeft?: number;\r\n    score?: {top: number; bottom: number};\r\n};\r\n","/* eslint-disable no-unused-expressions */\r\n/* eslint-disable no-sequences */\r\nconst letters = \"0123456789ABCDEF\";\r\n\r\nexport function randomColor() {\r\n    let color = \"0x\";\r\n    for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n\r\nexport function rgbArrayToHex(arr: any) {\r\n    if (arr.length !== 3) {\r\n        return 0x000000;\r\n    }\r\n    const r = arr[0];\r\n    const g = arr[1];\r\n    const b = arr[2];\r\n    const toHex = (x: any) => {\r\n        const hex = Math.round(x).toString(16);\r\n        return hex.length === 1 ? \"0\" + hex : hex;\r\n    };\r\n    return parseInt(`${toHex(r)}${toHex(g)}${toHex(b)}`, 16);\r\n}\r\n\r\nexport function rgbToHex(rgb: {r: number; g: number; b: number}) {\r\n    return rgbArrayToHex([rgb.r, rgb.g, rgb.b]);\r\n}\r\n\r\nexport function hexToRgb(hex: number) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex.toString(16));\r\n    return result\r\n        ? {\r\n              r: parseInt(result[1], 16) || 0,\r\n              g: parseInt(result[2], 16) || 0,\r\n              b: parseInt(result[3], 16) || 0\r\n          }\r\n        : {r: 0, g: 0, b: 0};\r\n}\r\n\r\nexport function hexToRgbArray(hex: number) {\r\n    const rgb = hexToRgb(hex);\r\n    return [rgb.r, rgb.g, rgb.b];\r\n}\r\n\r\nexport function rgbToHexString(r: number, g: number, b: number) {\r\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n}\r\n\r\nexport function hexStringToRgb(hex: string) {\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : [0, 0, 0];\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSL representation\r\n */\r\nexport function rgbToHsl(r: number, g: number, b: number) {\r\n    (r /= 255), (g /= 255), (b /= 255);\r\n\r\n    const max = Math.max(r, g, b),\r\n        min = Math.min(r, g, b);\r\n    let h,\r\n        s,\r\n        // tslint:disable-next-line:prefer-const\r\n        l = (max + min) / 2;\r\n\r\n    if (max === min) {\r\n        h = s = 0; // achromatic\r\n    } else {\r\n        const d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n\r\n        h && (h /= 6);\r\n    }\r\n\r\n    return [h || 0, s || 0, l || 0];\r\n}\r\n\r\nfunction hue2rgb(p: number, q: number, t: number) {\r\n    if (t < 0) t += 1;\r\n    if (t > 1) t -= 1;\r\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n    if (t < 1 / 2) return q;\r\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n    return p;\r\n}\r\n\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  l       The lightness\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hslToRgb(h: number, s: number, l: number) {\r\n    let r, g, b;\r\n\r\n    if (s === 0) {\r\n        r = g = b = l; // achromatic\r\n    } else {\r\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        const p = 2 * l - q;\r\n\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n\r\n    return [r * 255, g * 255, b * 255];\r\n}\r\n\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\nexport function rgbToHsv(r: number, g: number, b: number) {\r\n    (r /= 255), (g /= 255), (b /= 255);\r\n\r\n    const max = Math.max(r, g, b),\r\n        min = Math.min(r, g, b);\r\n    let h,\r\n        s,\r\n        // tslint:disable-next-line:prefer-const\r\n        v = max;\r\n\r\n    const d = max - min;\r\n    s = max === 0 ? 0 : d / max;\r\n\r\n    if (max === min) {\r\n        h = 0; // achromatic\r\n    } else {\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n\r\n        h && (h /= 6);\r\n    }\r\n\r\n    return [h, s, v];\r\n}\r\n\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hsvToRgb(h: number, s: number, v: number) {\r\n    let r, g, b;\r\n\r\n    const i = Math.floor(h * 6);\r\n    const f = h * 6 - i;\r\n    const p = v * (1 - s);\r\n    const q = v * (1 - f * s);\r\n    const t = v * (1 - (1 - f) * s);\r\n\r\n    switch (i % 6) {\r\n        case 0:\r\n            (r = v), (g = t), (b = p);\r\n            break;\r\n        case 1:\r\n            (r = q), (g = v), (b = p);\r\n            break;\r\n        case 2:\r\n            (r = p), (g = v), (b = t);\r\n            break;\r\n        case 3:\r\n            (r = p), (g = q), (b = v);\r\n            break;\r\n        case 4:\r\n            (r = t), (g = p), (b = v);\r\n            break;\r\n        case 5:\r\n            (r = v), (g = p), (b = q);\r\n            break;\r\n    }\r\n\r\n    return [r || 1 * 255, g || 1 * 255, b || 1 * 255];\r\n}\r\n\r\nexport function hexValueToString(value: number) {\r\n    let hueString = value.toString(16);\r\n    while (hueString.length < 6) {\r\n        hueString = \"0\" + hueString;\r\n    }\r\n    hueString = \"#\" + hueString;\r\n    return hueString;\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\nexport const Button = (p: {\r\n    title: string;\r\n    onClick?: () => void;\r\n    colors?: {default: string; hover: string; down: string};\r\n    style?: any;\r\n    textStyle?: any;\r\n    children?: any;\r\n    disabled?: boolean;\r\n}) => {\r\n    const styleDefault = {\r\n        width: \"280px\",\r\n        height: \"60px\",\r\n        backgroundColor: p.colors ? p.colors.default : \"#ffff80\",\r\n        display: \"grid\",\r\n        transition: \"all 0.15s ease-in\",\r\n        ...p.style\r\n    };\r\n    const [isDown, setisDown] = useState(false);\r\n    const [isHover, setIsHover] = useState(false);\r\n    const [style, setStyle] = useState(styleDefault);\r\n    const colorDown = p.colors ? p.colors.down : \"green\";\r\n    const colorHover = p.colors ? p.colors.hover : \"lightgrey\";\r\n\r\n    useEffect(() => {\r\n        if (p.disabled) {\r\n            setStyle({...styleDefault, color: \"darkgrey\", backgroundColor: \"lightgrey\", pointerEvents: \"none\"});\r\n            return;\r\n        }\r\n        if (isDown) {\r\n            setStyle({...styleDefault, backgroundColor: colorDown});\r\n            return;\r\n        }\r\n        if (isHover) {\r\n            setStyle({...styleDefault, backgroundColor: colorHover});\r\n            return;\r\n        }\r\n        setStyle({...styleDefault});\r\n    }, [isDown, isHover, colorDown, colorHover, styleDefault, p.disabled]);\r\n\r\n    const onMouseEnter = () => setIsHover(true);\r\n    const onMouseLeave = () => {\r\n        setIsHover(false);\r\n        setisDown(false);\r\n    };\r\n    const onMouseDown = () => setisDown(true);\r\n    const onMouseUp = () => setisDown(false);\r\n    const onTouchStart = () => setisDown(true);\r\n    const onTouchEnd = () => setisDown(false);\r\n    return (\r\n        <div\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseLeave={onMouseLeave}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n            onTouchStart={onTouchStart}\r\n            onTouchEnd={onTouchEnd}\r\n            onClick={p.onClick}\r\n            style={style}>\r\n            <div\r\n                style={{\r\n                    color: \"black\",\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    fontSize: \"16pt\",\r\n                    padding: \"8px\",\r\n                    userSelect: \"none\",\r\n                    ...p.textStyle\r\n                }}>\r\n                {p.title}\r\n            </div>\r\n            {p.children}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\n\r\nexport const PracticeOver = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    return (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"red\",\r\n                    fontSize: \"32pt\"\r\n                }}>\r\n                {`GAME OVER`}\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 2,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"AGAIN!\",\r\n                        onClick: () => {\r\n                            data.actions.startGame && data.actions.startGame();\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 3,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.intro;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {GameState, GAME_STATE} from \"../types\";\r\nimport {hexValueToString} from \"utils/colorConversions\";\r\nimport {autorun} from \"mobx\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {PracticeOver} from \"./PracticeOver\";\r\n\r\nconst fontStyle = {\r\n    textShadow: \"-1px -1px 0 #000,1px -1px 0 #000,-1px 1px 0 #000,1px 1px 0 #000\",\r\n    position: \"fixed\" as \"fixed\",\r\n    fontSize: \"24pt\"\r\n};\r\n\r\nexport const HudPractice = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    const [topValue, settopValue] = useState(p.data.score.top);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => settopValue(p.data.score.top));\r\n    }, [p.data.score.top]);\r\n\r\n    const [topFillbarValue, settopFillbarValue] = useState(p.data.fillbars.top / p.data.fillbars.max);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => settopFillbarValue(p.data.fillbars.top / p.data.fillbars.max));\r\n    }, []);\r\n    const [isGameOver, setisGameOver] = useState(p.data.isGameOver);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => setisGameOver(p.data.isGameOver));\r\n    }, []);\r\n    const getStringVal = (v: number) => (v > 9 ? v : `0${v}`);\r\n    const maxWidth = window.innerWidth - 120;\r\n    const topColor = hexValueToString(data.colors.top);\r\n    return (\r\n        <div>\r\n            {isGameOver && <PracticeOver {...{data}} />}\r\n            <div style={{...fontStyle, top: 4, left: 4, color: topColor}}>{getStringVal(topValue)}</div>\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    top: 8,\r\n                    height: 16,\r\n                    left: 90,\r\n                    width: topFillbarValue * maxWidth,\r\n                    backgroundColor: topColor\r\n                }}\r\n            />\r\n            {!isGameOver && (\r\n                <Button\r\n                    {...{\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            console.log(\"BACK\");\r\n                            p.data.gameState = GAME_STATE.intro;\r\n                        },\r\n                        style: {\r\n                            margin: \"8px\",\r\n                            left: 0,\r\n                            width: \"calc(100% - 16px)\",\r\n                            height: \"32px\",\r\n                            position: \"fixed\",\r\n                            bottom: 0\r\n                        },\r\n                        textStyle: {fontSize: \"16pt\"}\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\n\r\nexport const DuelOver = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    return (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"red\",\r\n                    fontSize: \"28pt\"\r\n                }}>\r\n                {`GAME OVER`}\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 2,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"AGAIN!\",\r\n                        onClick: () => {\r\n                            data.actions.startGame && data.actions.startGame();\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 3,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            data.actions.reset && data.actions.reset();\r\n                            data.gameState = GAME_STATE.lobby;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {GameState} from \"../types\";\r\nimport {hexValueToString} from \"utils/colorConversions\";\r\nimport {autorun} from \"mobx\";\r\nimport {DuelOver} from \"./DuelOver\";\r\n\r\nconst fontStyle = {\r\n    textShadow: \"-1px -1px 0 #000,1px -1px 0 #000,-1px 1px 0 #000,1px 1px 0 #000\",\r\n    position: \"fixed\" as \"fixed\",\r\n    fontSize: \"24pt\"\r\n};\r\n\r\nexport const HudDuel = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    const [bottomValue, setBottomValue] = useState(p.data.score.bottom);\r\n    const [topValue, settopValue] = useState(p.data.score.top);\r\n    useEffect(() => {\r\n        return autorun(() => setBottomValue(p.data.score.bottom));\r\n    }, [p.data.score.bottom]);\r\n    useEffect(() => {\r\n        return autorun(() => settopValue(p.data.score.top));\r\n    }, [p.data.score.top]);\r\n\r\n    const [bottomFillbarValue, setBottomFillbarValue] = useState(p.data.fillbars.bottom / p.data.fillbars.max);\r\n    const [topFillbarValue, settopFillbarValue] = useState(p.data.fillbars.top / p.data.fillbars.max);\r\n    useEffect(() => {\r\n        return autorun(() => setBottomFillbarValue(p.data.fillbars.bottom / p.data.fillbars.max));\r\n    }, [p.data.fillbars.bottom, p.data.fillbars.max]);\r\n    useEffect(() => {\r\n        return autorun(() => settopFillbarValue(p.data.fillbars.top / p.data.fillbars.max));\r\n    }, [p.data.fillbars.top, p.data.fillbars.max]);\r\n\r\n    const [isGameOver, setisGameOver] = useState(p.data.isGameOver);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => setisGameOver(p.data.isGameOver));\r\n    }, []);\r\n\r\n    const getStringVal = (v: number) => (v > 9 ? v : `0${v}`);\r\n    const maxWidth = window.innerWidth - 120;\r\n    const topColor = hexValueToString(data.colors.top);\r\n    const bottomColor = hexValueToString(data.colors.bottom);\r\n    return (\r\n        <div>\r\n            {isGameOver && <DuelOver {...{data}} />}\r\n            <div style={{...fontStyle, top: 4, left: 4, color: topColor}}>{getStringVal(topValue)}</div>\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    top: 8,\r\n                    height: 16,\r\n                    left: 90,\r\n                    width: topFillbarValue * maxWidth,\r\n                    backgroundColor: topColor\r\n                }}\r\n            />\r\n            <div style={{...fontStyle, bottom: 4, right: 4, color: bottomColor}}>{getStringVal(bottomValue)}</div>\r\n            <div\r\n                style={{\r\n                    position: \"fixed\",\r\n                    bottom: 8,\r\n                    height: 16,\r\n                    right: 90,\r\n                    width: bottomFillbarValue * maxWidth,\r\n                    backgroundColor: bottomColor\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {autorun} from \"mobx\";\r\nimport {Button} from \"components/common/Button\";\r\n\r\nexport const IntroScreen = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    const [isVisible, setisVisible] = useState(data.gameState === GAME_STATE.intro);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            setisVisible(data.gameState === GAME_STATE.intro);\r\n        });\r\n    }, [data.gameState]);\r\n\r\n    return !isVisible ? null : (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr 1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\",\r\n                backgroundColor: \"black\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"#80c0ff\",\r\n                    fontSize: \"28pt\"\r\n                }}>\r\n                {`SKEDADDLE`}\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    gridRow: 2,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"PRACTICE\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.practice;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 3,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"DUEL!\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.lobby;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 4,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"WHAT?\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.about;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {Button} from \"components/common/Button\";\r\n\r\nexport const About = (p: {data: GameState}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"100px 1fr 1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\",\r\n                backgroundColor: \"black\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"end\",\r\n                    justifySelf: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"#80c0ff\",\r\n                    fontSize: \"28pt\"\r\n                }}>\r\n                {`SKEDADDLE`}\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 2,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <div\r\n                    style={{\r\n                        gridRow: 1,\r\n                        gridColumn: 1,\r\n                        alignSelf: \"center\",\r\n                        justifySelf: \"center\",\r\n                        fontWeight: 400,\r\n                        color: \"white\",\r\n                        fontSize: \"16pt\",\r\n                        textAlign: \"center\",\r\n                        whiteSpace: \"pre-line\",\r\n                        paddingLeft: \"8px\",\r\n                        paddingRight: \"8px\"\r\n                    }}>\r\n                    {`a 2-player game by \r\n                    \r\n                    `}\r\n                    <span style={{fontSize: \"20pt\", color: \"#80ff80\"}}>{`Alex Tavor`}</span>\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 3,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <div\r\n                    style={{\r\n                        gridRow: 1,\r\n                        gridColumn: 1,\r\n                        alignSelf: \"center\",\r\n                        justifySelf: \"center\",\r\n                        fontWeight: 400,\r\n                        color: \"white\",\r\n                        fontSize: \"20pt\",\r\n                        textAlign: \"center\",\r\n                        whiteSpace: \"pre-line\",\r\n                        paddingRight: \"8px\",\r\n                        paddingLeft: \"8px\"\r\n                    }}>\r\n                    {`Duel by pushing things with your finger!`}\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 4,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <div\r\n                    style={{\r\n                        gridRow: 1,\r\n                        gridColumn: 1,\r\n                        alignSelf: \"center\",\r\n                        justifySelf: \"center\",\r\n                        fontWeight: 400,\r\n                        color: \"white\",\r\n                        fontSize: \"22pt\",\r\n                        textAlign: \"center\",\r\n                        whiteSpace: \"pre-line\",\r\n                        paddingRight: \"8px\",\r\n                        paddingLeft: \"8px\"\r\n                    }}>\r\n                    {`Tell your friends!`}\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    gridRow: 5,\r\n                    gridColumn: 1,\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\"\r\n                }}>\r\n                <Button\r\n                    {...{\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            p.data.gameState = GAME_STATE.intro;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","// source: https://gist.github.com/jed/982883\r\nexport const uuid = (a?: any): string => {\r\n    return a\r\n        ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)\r\n        : (`${1e7}` + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);\r\n};\r\n","import {LobbyState, PeerData, ConnectonResult} from \"./../types\";\r\nimport {GameState, LobbyStatus} from \"../types\";\r\nimport {observable, action} from \"mobx\";\r\nimport {uuid} from \"utils/uuid\";\r\nimport {peerLogic} from \"./peerLogic\";\r\n\r\nexport const getLobbyState = (gameState: GameState) => {\r\n    if (!gameState.lobbyState) {\r\n        const lobbyState = observable({\r\n            peer: \"\",\r\n            status: \"peerless\" as LobbyStatus,\r\n            ownId: uuid(),\r\n            ownPeerData: {isReady: false, nodesTouched: []},\r\n            otherPeerData: {isReady: false, nodesTouched: []}\r\n        }) as any;\r\n        const connectTo = peerLogic({\r\n            state: lobbyState,\r\n            onConnection: (d: ConnectonResult) => {\r\n                lobbyState.peer = d.peer;\r\n                lobbyState.send = d.send;\r\n            },\r\n            onData: action((d: PeerData) => {\r\n                lobbyState.otherPeerData.isReady = d.isReady;\r\n                lobbyState.otherPeerData.nodesTouched = d.nodesTouched || [];\r\n                lobbyState.otherPeerData.boids = d.boids || [];\r\n                lobbyState.otherPeerData.score = d.score;\r\n                lobbyState.otherPeerData.isGameOver = d.isGameOver;\r\n            })\r\n        });\r\n        lobbyState.connectTo = connectTo;\r\n        gameState.lobbyState = lobbyState as LobbyState;\r\n    }\r\n    return gameState.lobbyState;\r\n};\r\n","import {LobbyState, PeerData, ConnectonResult} from \"./../types\";\r\nimport Peer from \"peerjs\";\r\n\r\nexport const peerLogic = (p: {\r\n    state: LobbyState;\r\n    onConnection: (data: ConnectonResult) => void;\r\n    onData: (data: PeerData) => void;\r\n}) => {\r\n    const {state, onData, onConnection} = p;\r\n\r\n    const peer = new Peer(state.ownId);\r\n\r\n    const connectTo = async (id: string) => {\r\n        return new Promise<ConnectonResult>((resolve, reject) => {\r\n            state.status = \"connecting\";\r\n            const conn = peer.connect(id);\r\n            conn.on(\"open\", () => {\r\n                state.status = \"connected\";\r\n                const send = conn.send.bind(conn);\r\n                onConnection({send, peer: conn.peer});\r\n                conn.on(\"data\", onData);\r\n                resolve({send, peer: conn.peer});\r\n            });\r\n        });\r\n    };\r\n\r\n    peer.on(\"connection\", conn => {\r\n        state.status = \"connected\";\r\n        const send = conn.send.bind(conn);\r\n        onConnection({send, peer: conn.peer});\r\n        conn.on(\"data\", onData);\r\n    });\r\n\r\n    return connectTo;\r\n};\r\n","import React, {useState, useEffect, useRef} from \"react\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {getLobbyState} from \"./getLobbyState\";\r\nimport {autorun} from \"mobx\";\r\nimport {ActionButton} from \"./ActionButton\";\r\nimport {copyToClipboard} from \"components/duel/copyToClipboard\";\r\n\r\nconst textStyle = {\r\n    gridColumn: 1,\r\n    placeSelf: \"center center\",\r\n    fontWeight: 400,\r\n    color: \"white\",\r\n    fontSize: \"16pt\",\r\n    textAlign: \"center\" as \"center\",\r\n    whiteSpace: \"pre-line\" as \"pre-line\",\r\n    paddingRight: \"8px\",\r\n    paddingLeft: \"8px\",\r\n    paddingBottom: \"8px\"\r\n};\r\n\r\nconst rowStyle = (gridRow: number = 1) => ({\r\n    height: \"100%\",\r\n    gridRow,\r\n    gridColumn: 1,\r\n    placeSelf: \"center center\",\r\n    display: \"grid\"\r\n});\r\n\r\nexport const Lobby = (p: {data: GameState}) => {\r\n    const {data} = p;\r\n    const state = getLobbyState(p.data);\r\n    const [friendKey, setfriendKey] = useState(state.peer);\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            setfriendKey(state.peer);\r\n        });\r\n    }, []);\r\n\r\n    const [status, setStatus] = useState(state.status);\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            setStatus(state.status);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr 1fr 1fr 1fr 1fr\",\r\n                gridTemplateColumns: \"1fr\",\r\n                backgroundColor: \"black\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    gridRow: 1,\r\n                    gridColumn: 1,\r\n                    placeSelf: \"center center\",\r\n                    fontWeight: 600,\r\n                    color: \"#80c0ff\",\r\n                    textShadow: \"-1px -1px 0 #000,1px -1px 0 #000,-1px 1px 0 #000,1px 1px 0 #000\",\r\n                    fontSize: \"32pt\"\r\n                }}>\r\n                {`LOBBY`}\r\n            </div>\r\n            <div style={rowStyle(2)}>\r\n                <div style={textStyle} onClick={() => copyToClipboard(state.ownId)}>\r\n                    <div style={{color: \"#80ff80\"}}>{`Your key, tap to copy it`}</div>\r\n                    <div style={{paddingTop: \"32px\"}}>{state.ownId}</div>\r\n                </div>\r\n            </div>\r\n            <div style={rowStyle(3)}>\r\n                <div\r\n                    style={{...textStyle, color: \"#80ff80\"}}\r\n                    onClick={() =>\r\n                        navigator.clipboard.readText().then(clipText => setfriendKey(clipText))\r\n                    }>{`Tap to paste key from clipboard`}</div>\r\n            </div>\r\n            <div style={rowStyle(4)}>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={e => setfriendKey(e.target.value)}\r\n                    value={friendKey}\r\n                    style={{...textStyle, color: \"black\", height: \"32px\", width: \"340px\"}}\r\n                />\r\n                {ActionButton({data, friendKey, status})}\r\n            </div>\r\n            <div style={rowStyle(5)}>\r\n                <Button\r\n                    {...{\r\n                        style: {placeSelf: \"center center\"},\r\n                        title: \"BACK\",\r\n                        onClick: () => {\r\n                            data.gameState = GAME_STATE.intro;\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","export const copyToClipboard = str => {\r\n    const el = document.createElement(\"textarea\");\r\n    el.value = str;\r\n    el.setAttribute(\"readonly\", \"\");\r\n    el.style.position = \"absolute\";\r\n    el.style.left = \"-9999px\";\r\n    document.body.appendChild(el);\r\n    const selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\r\n    el.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(el);\r\n    if (selected) {\r\n        document.getSelection().removeAllRanges();\r\n        document.getSelection().addRange(selected);\r\n    }\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {Button} from \"components/common/Button\";\r\nimport {GameState, GAME_STATE, LobbyStatus} from \"components/types\";\r\nimport {getLobbyState} from \"./getLobbyState\";\r\nimport {action, autorun} from \"mobx\";\r\nexport const ActionButton = (p: {data: GameState; friendKey: string; status: LobbyStatus}) => {\r\n    const {data, friendKey, status} = p;\r\n    const state = getLobbyState(data);\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            state.otherPeerData.isReady && state.status === \"awaiting-peer-ready\" && (data.gameState = GAME_STATE.duel);\r\n        });\r\n    }, []);\r\n    let reply = null;\r\n    switch (status) {\r\n        case \"peerless\":\r\n            reply = (\r\n                <Button\r\n                    style={{marginTop: \"32px\", placeSelf: \"center center\"}}\r\n                    {...{\r\n                        disabled: !Boolean(friendKey),\r\n                        title: \"JOIN\",\r\n                        onClick: action(async () => {\r\n                            if (state.connectTo) {\r\n                                const reply = await state.connectTo(friendKey);\r\n                                state.ownPeerData.isOP = true;\r\n                                state.peer = reply.peer;\r\n                                state.send = reply.send;\r\n                                state.status = \"awaiting-peer-ready\";\r\n                                state.send({isReady: true});\r\n                            }\r\n                        })\r\n                    }}\r\n                />\r\n            );\r\n            break;\r\n        case \"connecting\":\r\n            reply = (\r\n                <Button\r\n                    style={{marginTop: \"32px\", placeSelf: \"center center\"}}\r\n                    {...{\r\n                        disabled: true,\r\n                        title: \"DUEL!\"\r\n                    }}\r\n                />\r\n            );\r\n            break;\r\n        case \"connected\":\r\n            reply = (\r\n                <Button\r\n                    style={{marginTop: \"32px\", placeSelf: \"center center\"}}\r\n                    {...{\r\n                        title: \"DUEL!\",\r\n                        onClick: async () => {\r\n                            if (state.connectTo) {\r\n                                console.log(state.send ? \"sending is ready true\" : \"no send found\");\r\n                                state.send && state.send({isReady: true});\r\n                                data.gameState = GAME_STATE.duel;\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n            );\r\n            break;\r\n        case \"awaiting-peer-ready\":\r\n            reply = (\r\n                <Button\r\n                    style={{marginTop: \"32px\", placeSelf: \"center center\"}}\r\n                    {...{\r\n                        disabled: true,\r\n                        title: \"WAITING\"\r\n                    }}\r\n                />\r\n            );\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return reply;\r\n};\r\n","import React, {useRef, useEffect, useState} from \"react\";\r\nimport {HudPractice} from \"components/practice/HudPractice\";\r\nimport {GAME_STATE} from \"components/types\";\r\nimport {GameState} from \"./types\";\r\nimport {HudDuel} from \"./duel/HudDuel\";\r\nimport {IntroScreen} from \"./intro/IntroScreen\";\r\nimport {autorun} from \"mobx\";\r\nimport {About} from \"./info/About\";\r\nimport {Lobby} from \"./lobby/Lobby\";\r\n\r\nexport const Hud = (p: {gameState: GameState}) => {\r\n    let hud = undefined;\r\n    const [gameState, setgameState] = useState(p.gameState.gameState);\r\n\r\n    useEffect(() => {\r\n        return autorun(() => setgameState(p.gameState.gameState));\r\n    }, []);\r\n    switch (gameState) {\r\n        case GAME_STATE.practice:\r\n            hud = <HudPractice {...{data: p.gameState}} />;\r\n            break;\r\n        case GAME_STATE.duel:\r\n            hud = <HudDuel {...{data: p.gameState}} />;\r\n            break;\r\n        case GAME_STATE.intro:\r\n            hud = <IntroScreen {...{data: p.gameState}} />;\r\n            break;\r\n        case GAME_STATE.about:\r\n            hud = <About {...{data: p.gameState}} />;\r\n            break;\r\n        case GAME_STATE.lobby:\r\n            hud = <Lobby {...{data: p.gameState}} />;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return <div style={{position: \"fixed\"}}>{hud}</div>;\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {GameState, GAME_STATE} from \"components/types\";\r\nimport {autorun} from \"mobx\";\r\n\r\nexport const TimeCountdown = (p: {data: GameState}) => {\r\n    const [isGameOver, setisGameOver] = useState(p.data.isGameOver);\r\n    useEffect(() => {\r\n        return autorun(() => setisGameOver(p.data.isGameOver));\r\n    }, [p.data.isGameOver]);\r\n    const [isTimed, setisTimed] = useState(p.data.gameState === GAME_STATE.duel);\r\n    useEffect(() => {\r\n        return autorun(() => setisTimed(p.data.gameState === GAME_STATE.duel));\r\n    }, [p.data.gameState]);\r\n\r\n    const tLeft = Math.ceil(p.data.maxDuration - p.data.duration);\r\n    const [secondsLeft, setsecondsLeft] = useState(Math.max(0, tLeft));\r\n\r\n    useEffect(() => {\r\n        return autorun(() => {\r\n            if (!isTimed || isGameOver) return;\r\n            const tLeft = Math.ceil(p.data.maxDuration - p.data.duration);\r\n            setsecondsLeft(Math.max(0, tLeft));\r\n\r\n            if (tLeft <= 0) {\r\n                p.data.actions.endGame && p.data.actions.endGame();\r\n            }\r\n        });\r\n    }, [isTimed, isGameOver]);\r\n    return !isTimed || isGameOver ? null : (\r\n        <div\r\n            style={{\r\n                position: \"absolute\",\r\n                height: `${window.innerHeight}px`,\r\n                width: `${window.innerWidth}px`,\r\n                display: \"grid\",\r\n                gridTemplateRows: \"1fr\",\r\n                gridTemplateColumns: \"1fr\",\r\n                pointerEvents: \"none\",\r\n                touchAction: \"none\"\r\n            }}>\r\n            <div\r\n                style={{\r\n                    alignSelf: \"center\",\r\n                    justifySelf: \"center\",\r\n                    textAlign: \"center\",\r\n                    fontWeight: 600,\r\n                    color: \"#ffff80\",\r\n                    fontSize: \"64pt\",\r\n                    pointerEvents: \"none\",\r\n                    touchAction: \"none\"\r\n                }}>\r\n                {secondsLeft}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","/**\r\n * Starts an animation loop\r\n * @param callback - function to call with every tick\r\n * @returns cancel - cancellation function\r\n */\r\nexport function animationLoop(callback: () => void) {\r\n    let id = 0;\r\n    (function l() {\r\n        id = window.requestAnimationFrame(l);\r\n        callback();\r\n    })();\r\n    return () => {\r\n        window.cancelAnimationFrame(id);\r\n    };\r\n}\r\n","import {animationLoop} from \"./animationLoop\";\r\n\r\nlet current = Date.now();\r\n\r\nexport default function deltaLoop(callback: (delta: number) => void) {\r\n    const loop = () => {\r\n        const nc = Date.now();\r\n        const delta = (nc - current) / 1000;\r\n        current = nc;\r\n        callback(delta);\r\n    };\r\n    animationLoop(loop);\r\n}\r\n","import deltaLoop from \"./deltaLoop\";\r\n\r\nexport interface ITime {\r\n    speed: number;\r\n}\r\n\r\nexport default function timeVariableLoop(time: ITime, callback: (delta: number) => void) {\r\n    const loop = (d: number) => {\r\n        callback(d * time.speed);\r\n    };\r\n    deltaLoop(loop);\r\n}\r\n","import {randomColor} from \"../../utils/colorConversions\";\r\nimport {Texture, ParticleContainer, Sprite} from \"pixi.js\";\r\n\r\nexport function makeBoidsViews(tex: Texture, quantity: number, tint: number = 0xaa0000, maxBoids: number = 200) {\r\n    const view = new ParticleContainer(maxBoids, {\r\n        uvs: true,\r\n        tint: true,\r\n        position: true,\r\n        rotation: true,\r\n        vertices: true\r\n    });\r\n    const sprites = Array.from({length: quantity}, () => {\r\n        const sprite = new Sprite(tex);\r\n        view.addChild(sprite);\r\n        sprite.tint = parseInt(randomColor(), 16); // tint;\r\n        // sprite.anchor.set(0.275, 0.5);\r\n        return sprite;\r\n    });\r\n\r\n    return {view, sprites};\r\n}\r\n","import * as Tween from \"es6-tween\";\r\n\r\nexport const collectorTouchedTween = ({sprite, duration = 300}) => {\r\n    Tween.autoPlay(true);\r\n    sprite.scale.set(1, 1);\r\n    sprite.alpha = 1;\r\n    const t = new Tween.Tween({scale: 1, alpha: 1})\r\n        .to({scale: 6, alpha: 0}, duration)\r\n        .start()\r\n        .easing(Tween.Easing.Quadratic.Out)\r\n        .on(\"update\", v => {\r\n            sprite.scale.set(v.scale, v.scale);\r\n            sprite.alpha = v.alpha;\r\n        });\r\n    return t;\r\n};\r\n","import {ClickEventData} from \"pixi-viewport\";\r\nimport {IPoint} from \"./../utils/geom\";\r\nimport {IDisplay} from \"./types\";\r\nimport Grid from \"../scentmap/hexgrid/Grid\";\r\n\r\nlet isDragging = false;\r\n\r\nexport default function addDisplayDragListener(\r\n    display: IDisplay,\r\n    grid: Grid,\r\n    onStart: (node: number) => void,\r\n    onEnd: (node: number) => void,\r\n    onMove: (node: number) => void\r\n) {\r\n    const hs = grid.gridLayout.hexSize * 0.75;\r\n    const getNodeByPixel = (point: IPoint) => grid.getHexIdByPixel({x: point.x - hs, y: point.y - hs});\r\n\r\n    const dragStart = (data: ClickEventData) => {\r\n        isDragging = true;\r\n        onStart(getNodeByPixel(data.world));\r\n    };\r\n    const dragEnd = (data: ClickEventData) => {\r\n        isDragging = false;\r\n        onEnd(getNodeByPixel(data.world));\r\n    };\r\n    const onMouseMove = (e: MouseEvent) => {\r\n        if (!isDragging) return;\r\n        const node = getNodeByPixel(display.camera.toWorld(e.x, e.y));\r\n        if (isNaN(node)) return;\r\n        onMove(node);\r\n    };\r\n\r\n    const onTouchMove = (data: PIXI.interaction.InteractionEvent) => {\r\n        const position = data.data.global;\r\n        const node = getNodeByPixel(display.camera.toWorld(position.x, position.y));\r\n        if (isNaN(node)) return;\r\n        onMove(node);\r\n    };\r\n\r\n    display.camera.on(\"drag-start\", dragStart);\r\n    display.camera.on(\"drag-end\", dragEnd);\r\n    display.camera.on(\"touchmove\", onTouchMove);\r\n    document.addEventListener(\"mousemove\", onMouseMove);\r\n}\r\n","import addDisplayClickListener from \"pixi/addDisplayClickListener\";\r\nimport addDisplayDragListener from \"pixi/addDisplayDragListener\";\r\nimport {IDisplay} from \"pixi/types\";\r\nimport Grid from \"scentmap/hexgrid/Grid\";\r\n\r\nexport function addDropFunctionality(\r\n    display: IDisplay,\r\n    grid: Grid,\r\n    onDrag: (node: number) => void,\r\n    onTap: (node: number) => void,\r\n    onStart: () => void,\r\n    onEnd: () => void\r\n) {\r\n    addDisplayClickListener(display, grid, onTap);\r\n    // const onStart: (node: number) => void = (node: number) => {\r\n    //     // display.camera.pausePlugin(\"drag\");\r\n    // };\r\n    // const onEnd: (node: number) => void = (node: number) => {\r\n    //     // display.camera.resumePlugin(\"drag\");\r\n    // };\r\n    const onMove: (node: number) => void = onDrag;\r\n    addDisplayDragListener(display, grid, onStart, onEnd, onMove);\r\n}\r\n","import {ClickEventData} from \"pixi-viewport\";\r\nimport {IDisplay} from \"./types\";\r\nimport Grid from \"../scentmap/hexgrid/Grid\";\r\n\r\nexport default function addDisplayClickListener(display: IDisplay, grid: Grid, onClick: (node: number) => void) {\r\n    const hs = grid.gridLayout.hexSize * 0.75;\r\n    const onViewClicked = (data: ClickEventData) => {\r\n        const i = grid.getHexIdByPixel({x: data.world.x - hs, y: data.world.y - hs});\r\n        onClick(i);\r\n    };\r\n    display.camera.on(\"clicked\", onViewClicked);\r\n}\r\n","import {IScent} from \"./types\";\r\n\r\nexport default function makeScentDropper(scent: IScent, index: number, seconds: number = 0) {\r\n    let elapsed = 0;\r\n    const dropScent = (delta: number) => {\r\n        elapsed += delta;\r\n        scent.scentGrid[index] = Math.max(0, scent.scentGrid[index] + scent.quantity);\r\n        return elapsed < seconds;\r\n    };\r\n    return dropScent;\r\n}\r\n","import {GridMap} from \"types\";\r\nimport {IScent} from \"scentmap/scent/types\";\r\nimport {addDropFunctionality} from \"game/addDropFunctionality\";\r\nimport makeScentDropper from \"scentmap/scent/makeScentDropper\";\r\nimport {IDroppers} from \"./IDroppers\";\r\nimport {GameState} from \"components/types\";\r\n\r\nconst minDrop = 0.2;\r\nconst minTap = 0.001;\r\n\r\nexport const makeScentDroppers = (\r\n    gameState: GameState,\r\n    map: GridMap,\r\n    scent: IScent,\r\n    fillbars: {bars: {max: number; top: number; bottom: number}}\r\n) => {\r\n    const droppers: IDroppers = {updates: []};\r\n    let isDropping = false;\r\n    let lastDelta = 0;\r\n    const dropOwn = (node: number) => {\r\n        droppers.updates.push(makeScentDropper(scent, node, scent.seconds));\r\n        fillbars.bars.top -= 1;\r\n        const ls = gameState.lobbyState;\r\n        if (ls) {\r\n            ls.ownPeerData.nodesTouched && ls.ownPeerData.nodesTouched.push(node);\r\n        }\r\n    };\r\n    const onDrag = (node: number) => {\r\n        onStart();\r\n\r\n        if (lastDelta && isDropping && fillbars.bars.top > 0) {\r\n            dropOwn(node);\r\n            fillbars.bars.top <= 0 && (isDropping = false);\r\n        }\r\n    };\r\n    const onTap = (node: number) => {\r\n        if (lastDelta && fillbars.bars.top / fillbars.bars.max >= minTap) {\r\n            dropOwn(node);\r\n        }\r\n    };\r\n    const onStart = () => {\r\n        const fill = fillbars.bars.top / fillbars.bars.max;\r\n        lastDelta && fill >= minDrop && (isDropping = true);\r\n    };\r\n\r\n    const onEnd = () => {\r\n        isDropping = false;\r\n    };\r\n    addDropFunctionality(map.display, map.grid, onDrag, onTap, onStart, onEnd);\r\n    const update = (delta: number) => {\r\n        lastDelta = delta;\r\n        droppers.updates = droppers.updates.filter(update => update(delta));\r\n    };\r\n\r\n    const dropFromPeer = (nodes: number[]) => {\r\n        nodes.forEach(node => {\r\n            droppers.updates.push(makeScentDropper(scent, node, scent.seconds));\r\n            fillbars.bars.bottom -= 1;\r\n        });\r\n    };\r\n\r\n    return {update, droppers, dropFromPeer};\r\n};\r\n","export interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport const rotateToPoint = (m: IPoint, p: IPoint) => Math.atan2(m.y - p.y, m.x - p.x);\r\n\r\nexport const randomlyPositionInCircle = (maxDistanceSq: number, minDistanceSq: number, p: IPoint) => {\r\n    const ptAngle = Math.random() * 2 * Math.PI;\r\n    const ptRadiusSq = minDistanceSq + Math.random() * maxDistanceSq;\r\n    p.x += Math.sqrt(ptRadiusSq) * Math.cos(ptAngle);\r\n    p.y += Math.sqrt(ptRadiusSq) * Math.sin(ptAngle);\r\n};\r\n\r\nexport const clamp = (a: IPoint, limit: number) => {\r\n    if (magnitude(a) > limit) {\r\n        const n = normalize(a);\r\n        return multiplyScalar(n, limit);\r\n    }\r\n    return a;\r\n};\r\n\r\nexport const distanceSq = (b: IPoint, a: IPoint) => {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n\r\n    return dx * dx + dy * dy;\r\n};\r\n\r\nexport const areEqual = (a: IPoint, b: IPoint) => {\r\n    return Math.round(a.x) === Math.round(b.x) && Math.round(a.y) === Math.round(b.y);\r\n};\r\n\r\nexport const magnitude = (a: IPoint) => {\r\n    return Math.sqrt(a.x * a.x + a.y * a.y);\r\n};\r\n\r\nexport const normalize = (a: IPoint) => {\r\n    const m = magnitude(a);\r\n    if (m > 0) {\r\n        return multiplyScalar(a, 1 / m);\r\n    }\r\n    return a;\r\n};\r\n\r\nexport const multiplyScalar = (v: IPoint, scalar: number) => {\r\n    v.x *= scalar;\r\n    v.y *= scalar;\r\n    return v;\r\n};\r\n\r\nexport const divideByScalar = (v: IPoint, scalar: number) => {\r\n    v.x /= scalar;\r\n    v.y /= scalar;\r\n    return v;\r\n};\r\n\r\nexport const sqrt = (v: IPoint) => {\r\n    v.x = Math.sqrt(v.x);\r\n    v.y = Math.sqrt(v.y);\r\n    return v;\r\n};\r\n\r\nexport const addVector = (a: IPoint, b: IPoint) => {\r\n    a.x += b.x;\r\n    a.y += b.y;\r\n    return a;\r\n};\r\n\r\nexport const subtractVector = (a: IPoint, b: IPoint) => {\r\n    a.x -= b.x;\r\n    a.y -= b.y;\r\n    return a;\r\n};\r\n\r\nexport const rotateVector = (vec: IPoint, ang: number) => {\r\n    const cos = Math.cos(ang);\r\n    const sin = Math.sin(ang);\r\n    vec.x = vec.x * cos - vec.y * sin;\r\n    vec.y = vec.x * sin + vec.y * cos;\r\n    return vec;\r\n};\r\n","export function makeBoid(template?: any) {\r\n    return {\r\n        ...{\r\n            position: {x: 0, y: 0},\r\n            velocity: {x: 0, y: 0},\r\n            drag: 0.1,\r\n            speed: 1,\r\n            thrust: 10,\r\n            radius: 1\r\n        },\r\n        ...template\r\n    };\r\n}\r\n","import {\r\n    addVector,\r\n    subtractVector,\r\n    normalize,\r\n    multiplyScalar,\r\n    clamp,\r\n    divideByScalar,\r\n    distanceSq,\r\n    magnitude,\r\n    IPoint\r\n} from \"../../utils/geom\";\r\nimport {IBoid} from \"../makeBoids\";\r\nexport function separation(boid: IBoid, neighbors: IPoint[]) {\r\n    const steer = {x: 0, y: 0};\r\n    const numNeighbors = neighbors.length;\r\n    if (!numNeighbors) return {x: 0, y: 0};\r\n    for (let neighbor of neighbors) {\r\n        const d = distanceSq(boid.position, neighbor) || Math.random();\r\n        const diff = subtractVector({...boid.position}, neighbor);\r\n        normalize(diff);\r\n        divideByScalar(diff, d);\r\n        addVector(steer, diff);\r\n    }\r\n    divideByScalar(steer, numNeighbors);\r\n    const steerForce = magnitude(steer);\r\n    if (steerForce > 0) {\r\n        normalize(steer);\r\n        multiplyScalar(steer, boid.speed);\r\n        subtractVector(steer, boid.velocity);\r\n        clamp(steer, boid.thrust);\r\n    }\r\n    return steer;\r\n}\r\n","import {addVector, divideByScalar, IPoint} from \"../../utils/geom\";\r\nimport {seek} from \"../steering/seek\";\r\nimport {IBoid} from \"../makeBoids\";\r\n\r\nexport function cohesion(boid: IBoid, neighbors: IPoint[]) {\r\n    const steer = {x: 0, y: 0};\r\n    const numNeighbors = neighbors.length;\r\n    if (!numNeighbors) return {x: 0, y: 0};\r\n    for (let neighbor of neighbors) {\r\n        addVector(steer, neighbor);\r\n    }\r\n    return seek(divideByScalar(steer, numNeighbors), boid);\r\n}\r\n","import {subtractVector, normalize, multiplyScalar, clamp, IPoint} from \"../../utils/geom\";\r\nimport {IBoid} from \"../makeBoids\";\r\nexport function seek(target: IPoint, boid: IBoid) {\r\n    const d = subtractVector({...target}, boid.position);\r\n    normalize(d);\r\n    multiplyScalar(d, boid.speed);\r\n    subtractVector(d, boid.velocity);\r\n    clamp(d, boid.thrust);\r\n    return d;\r\n}\r\n","import {addVector, IPoint} from \"../../utils/geom\";\r\nexport function applyForce(vector: IPoint, force: IPoint) {\r\n    addVector(vector, force);\r\n}\r\n","import {PeerBoid} from \"./../components/types\";\r\nimport {IPoint, multiplyScalar, addVector, clamp, normalize} from \"../utils/geom\";\r\nimport {IGridBoid} from \"./IGridBoid\";\r\nimport {IBoidTemplate} from \"./IBoidTemplate\";\r\nimport Grid from \"../scentmap/hexgrid/Grid\";\r\nimport {IDisplay} from \"../pixi/types\";\r\nimport {IScent} from \"../scentmap/scent/types\";\r\nimport {makeBoids} from \"./makeBoids\";\r\nimport {makeBoidsViews} from \"../pixi/boids/makeBoidsViews\";\r\nimport {makeBoid} from \"./makeBoid\";\r\nimport {separation} from \"./behavior/separation\";\r\nimport {cohesion} from \"./behavior/cohesion\";\r\nimport {getSteering} from \"./getSteering\";\r\n\r\nconst MAX_NEIGHBORS = 12;\r\nconst INITIAL_BOIDS = 0;\r\nconst MAX_BOIDS = 200;\r\n\r\nexport class GridBoids {\r\n    public boids!: IGridBoid[];\r\n    public boidViews!: PIXI.Sprite[];\r\n    private occupiableNodes!: Array<Set<IGridBoid>>;\r\n    private numNodes!: number;\r\n\r\n    constructor(\r\n        public boidTemplate: IBoidTemplate,\r\n        public grid: Grid,\r\n        public display: IDisplay,\r\n        public walls: number[],\r\n        public scentToAvoid: IScent\r\n    ) {\r\n        this.initialize();\r\n    }\r\n\r\n    public reset() {\r\n        if (this.boidViews && this.boidViews.length) {\r\n            const view = this.boidViews[0].parent;\r\n            if (view.parent) {\r\n                view.parent.removeChild(view);\r\n            }\r\n        }\r\n        this.initialize();\r\n    }\r\n\r\n    public update(delta?: number) {\r\n        this.updateBoids(delta);\r\n        this.updateViews(delta);\r\n    }\r\n\r\n    public addBoid(position: IPoint) {\r\n        const b = makeBoid(this.boidTemplate) as IGridBoid;\r\n        this.boids.push(b);\r\n        b.position = {...position};\r\n        b.node = this.grid.getHexIdByPixel(b.position);\r\n        return b;\r\n    }\r\n\r\n    public addBoidAtNode(nodeId: number) {\r\n        const b = makeBoid(this.boidTemplate) as IGridBoid;\r\n        this.boids.push(b);\r\n        b.node = nodeId;\r\n        b.position = this.grid.getPosAtNode(nodeId);\r\n        return b;\r\n    }\r\n\r\n    public removeBoid(boid?: IGridBoid) {\r\n        if (boid) {\r\n            this.boids.splice(this.boids.indexOf(boid), 1);\r\n            return;\r\n        }\r\n        this.boids.pop();\r\n    }\r\n\r\n    public syncBoid(syncWith: PeerBoid, index: number) {\r\n        const boid = this.boids[index];\r\n        boid.position.x = syncWith.position.x;\r\n        boid.position.y = syncWith.position.y;\r\n        boid.velocity.x = syncWith.velocity.x;\r\n        boid.velocity.y = syncWith.velocity.y;\r\n\r\n        boid.node = this.grid.getHexIdByPixel(boid.position);\r\n    }\r\n\r\n    private updateViews(delta?: number) {\r\n        const l = this.boids.length;\r\n        this.boidViews.forEach((sprite, i) => {\r\n            sprite.alpha = i < l ? 1 : 0;\r\n            if (sprite.alpha) {\r\n                const boid = this.boids[i];\r\n                sprite.tint = this.boidTemplate.hue;\r\n                sprite.position.set(boid.position.x, boid.position.y);\r\n                sprite.scale.x !== boid.radius && sprite.scale.set(boid.radius, boid.radius);\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateBoids(delta?: number) {\r\n        this.boids.forEach(boid => {\r\n            if (boid.node < 0 || boid.node >= this.numNodes) return;\r\n            const node = this.grid.getHexIdByPixel(boid.position);\r\n            if (isNaN(node)) return;\r\n            const oNodes = this.occupiableNodes;\r\n            boid.node && oNodes[boid.node].delete(boid);\r\n            boid.node = node;\r\n            const neighborNodes = this.grid.gridArr[boid.node].neighbors.filter(n => !isNaN(n));\r\n            let neighbors: IGridBoid[] = [];\r\n            const obstacles = new Array<IPoint>();\r\n            neighborNodes.forEach(n => {\r\n                const ns = Array.from(oNodes[n]);\r\n                ns.length && neighbors.length < MAX_NEIGHBORS && (neighbors = neighbors.concat(ns));\r\n                !this.walls[n] && obstacles.push(this.grid.gridArr[n].position);\r\n            });\r\n\r\n            let highestScent: number = 0;\r\n            let avoidGoal: IPoint | null = null;\r\n\r\n            for (let neighbor of neighborNodes) {\r\n                const avoidVal = this.scentToAvoid.scentGrid[neighbor];\r\n                if (avoidVal > highestScent && avoidVal > boid.olfaction) {\r\n                    highestScent = avoidVal;\r\n                    avoidGoal = {...this.grid.gridArr[neighbor].position};\r\n                }\r\n            }\r\n            const avoidGoals = avoidGoal ? [avoidGoal] : [];\r\n            const forces = [\r\n                multiplyScalar(separation(boid, obstacles), this.boidTemplate.weights.avoidObstacles * 100),\r\n                multiplyScalar(separation(boid, neighbors.map(n => n.position)), this.boidTemplate.weights.separation),\r\n                multiplyScalar(separation(boid, avoidGoals), this.boidTemplate.weights.avoidScent),\r\n                multiplyScalar(cohesion(boid, neighbors.map(n => n.position)), this.boidTemplate.weights.cohesion)\r\n                // multiplyScalar(wander(boid, current), 1),\r\n                // multiplyScalar(alignment(boid, neighbors.map(n => n.velocity)), this.boidTemplate.weights.alignment)\r\n            ];\r\n            const steer = getSteering(boid, forces);\r\n            applySteering(steer, boid, delta || 1);\r\n            oNodes[boid.node].add(boid);\r\n        });\r\n    }\r\n\r\n    private initialize() {\r\n        this.boids = (makeBoids(INITIAL_BOIDS, this.boidTemplate) as any) as IGridBoid[];\r\n        const boidViewsObj = makeBoidsViews(this.display.hexTexture, MAX_BOIDS);\r\n        this.display.camera.addChild(boidViewsObj.view);\r\n        this.boidViews = boidViewsObj.sprites;\r\n        this.occupiableNodes = Array.from(this.grid.gridArr, node => new Set<IGridBoid>());\r\n        this.numNodes = this.grid.gridArr.length;\r\n    }\r\n}\r\n\r\nconst applySteering = (steering: IPoint, boid: IGridBoid, delta: number) => {\r\n    normalize(steering);\r\n    multiplyScalar(steering, boid.thrust);\r\n    addVector(boid.velocity, steering);\r\n    clamp(boid.velocity, boid.speed);\r\n    const motion = multiplyScalar({...boid.velocity}, delta);\r\n    addVector(boid.position, motion);\r\n    multiplyScalar(boid.velocity, boid.drag);\r\n};\r\n","import {addVector, multiplyScalar, clamp, IPoint, divideByScalar} from \"../utils/geom\";\r\nimport {applyForce} from \"./steering/applyForce\";\r\nimport {IBoid} from \"./makeBoids\";\r\n\r\nexport function getSteering(boid: IBoid, forces: IPoint[]) {\r\n    const steering = {x: 0, y: 0};\r\n    for (let force of forces) {\r\n        applyForce(steering, force);\r\n    }\r\n    divideByScalar(steering, forces.length);\r\n    return steering;\r\n}\r\n","import {IPoint} from \"./../utils/geom\";\r\nimport {makeBoid} from \"./makeBoid\";\r\n\r\nexport interface IBoid {\r\n    position: IPoint;\r\n    velocity: IPoint;\r\n    drag: number;\r\n    speed: number;\r\n    thrust: number;\r\n    radius: number;\r\n}\r\n\r\nexport function makeBoids(numBoids: number, template?: any) {\r\n    return Array.from({length: numBoids}, n => makeBoid(template));\r\n}\r\n","export const boidTemplate = {\r\n    drag: 0.96,\r\n    speed: 150,\r\n    thrust: 10,\r\n    radius: 1,\r\n    olfaction: 0.001,\r\n    hue: 0xff80ff,\r\n    weights: {\r\n        separation: 6,\r\n        cohesion: 4,\r\n        seekScent: 6,\r\n        avoidScent: 8,\r\n        avoidObstacles: 10,\r\n        alignment: 5\r\n    }\r\n};\r\n","import {GridBoids} from \"boids/GridBoids\";\r\nimport {GridMap} from \"types\";\r\nimport {IScent} from \"scentmap/scent/types\";\r\nimport {boidTemplate} from \"./boidTemplate\";\r\n\r\nexport const populateBoids = (boids: GridBoids) => {\r\n    return Array.from({length: 11}, (n, i) => {\r\n        boids.addBoidAtNode(589 + i * 2);\r\n        boids.addBoidAtNode(640 + i * 2);\r\n        boids.addBoidAtNode(691 + i * 2);\r\n        return null;\r\n    });\r\n};\r\n\r\nexport const makeBoids = (map: GridMap, scent: IScent) => {\r\n    const boids = new GridBoids(boidTemplate, map.grid, map.display, map.walls, scent);\r\n    populateBoids(boids);\r\n    return boids;\r\n};\r\n","import Grid from \"./../../scentmap/hexgrid/Grid\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\nexport function makeHexesGrid(grid: Grid, tex: PIXI.Texture, tint: number = 0xddddda) {\r\n    const view = new PIXI.ParticleContainer(500000, {\r\n        tint: true\r\n    });\r\n    const nodes = grid.gridArr.map(node => {\r\n        const sprite = new PIXI.Sprite(tex);\r\n        sprite.position.set(node.position.x, node.position.y);\r\n        view.addChild(sprite);\r\n        sprite.tint = tint;\r\n        sprite.alpha = 0;\r\n        return sprite;\r\n    });\r\n\r\n    return {view, nodes};\r\n}\r\n","import {makeScent} from \"../../scentmap/scent/makeScent\";\r\nimport {makeHexesGrid} from \"../../pixi/hexgrid/makeHexesGrid\";\r\nimport {GridMap} from \"types\";\r\nimport {makeUpdateScent} from \"scentmap/scent/makeUpdateScent\";\r\nimport {makeUpdateHexColorsByScent} from \"pixi/scent/makeUpdateHexColorsByScent\";\r\nexport const makeAvoidScent = (map: GridMap) => {\r\n    const data = makeScent(map.grid);\r\n    const display = makeHexesGrid(map.grid, map.display.hexTexture, data.hue);\r\n    map.display.camera.addChild(display.view);\r\n    const updateScent = makeUpdateScent(map.grid, map.walls, data, data.scentGrid);\r\n    const updateScentView = makeUpdateHexColorsByScent(display.nodes, data);\r\n    const update = (delta: number) => {\r\n        updateScent(delta);\r\n        updateScentView(delta);\r\n    };\r\n    return {data: data, display: display, update};\r\n};\r\n","import {IScent} from \"./types\";\r\nimport {uuid} from \"../../utils/uuid\";\r\nimport Grid from \"../hexgrid/Grid\";\r\n\r\nexport function makeScent(\r\n    grid: Grid,\r\n    spread: number = 15,\r\n    evaporation: number = 0.9,\r\n    quantity: number = 10,\r\n    hue: number = 8454143,\r\n    minValue: number = 0.001,\r\n    seconds: number = 0\r\n): IScent {\r\n    const scentGrid: number[] = Array.from(grid.gridArr, n => 0);\r\n    const permeability: number[] = Array.from(grid.gridArr, n => 1);\r\n    return {\r\n        scentGrid,\r\n        permeability,\r\n        id: uuid(),\r\n        spread,\r\n        evaporation,\r\n        quantity,\r\n        hue,\r\n        minValue,\r\n        seconds\r\n    };\r\n}\r\n","import {IScent} from \"./types\";\r\nimport Grid from \"../hexgrid/Grid\";\r\n\r\nexport function makeUpdateScent(grid: Grid, walls: number[], scent: IScent, scentGrid: number[]) {\r\n    return (delta: number) => {\r\n        for (let node = 0; node < scentGrid.length; node++) {\r\n            const w = walls[node];\r\n            if (isNaN(w) || !w) {\r\n                scentGrid[node] = 0;\r\n                continue;\r\n            }\r\n            const targets = grid.gridArr[node].neighbors;\r\n            const scentVal = scentGrid[node];\r\n            if (isNaN(scentVal) || !scent) {\r\n                scentGrid[node] = 0;\r\n                continue;\r\n            }\r\n            const validTargets = targets.filter(id => !isNaN(walls[id]) && walls[id]);\r\n            const dSpread = Math.min(1, scent.spread * delta);\r\n            const distribute = scentVal * dSpread;\r\n            const dSlice = (distribute / validTargets.length) * scent.evaporation;\r\n            for (let id of validTargets) {\r\n                const v = dSlice * walls[id];\r\n                scentGrid[id] += v;\r\n            }\r\n            scentGrid[node] = scentGrid[node] - distribute;\r\n        }\r\n        scent.scentGrid.forEach((n, nodeId) => {\r\n            const s = scentGrid[nodeId];\r\n            scent.scentGrid[nodeId] = s >= scent.minValue ? s : 0;\r\n        });\r\n    };\r\n}\r\n","import {IScent} from \"../../scentmap/scent/types\";\r\n\r\nexport function makeUpdateHexColorsByScent(gridSprites: PIXI.Sprite[], scent: IScent) {\r\n    const average = (scent.quantity + scent.minValue) / 20;\r\n    return (delta: number) => {\r\n        gridSprites.forEach((s, i) => {\r\n            s.tint = scent.hue;\r\n            s.alpha = Math.min(0.75, Math.min(average, scent.scentGrid[i]) / average);\r\n        });\r\n    };\r\n}\r\n","// adapted from http://www.redblobgames.com/grids/hexagons/\r\n\r\n/* Specifically for offset grid diagrams */\r\nexport function makeRectangularShape(\r\n    minCol: number,\r\n    maxCol: number,\r\n    minRow: number,\r\n    maxRow: number,\r\n    convert: (coord: OffsetCoord) => Hex\r\n) {\r\n    const results = [];\r\n    for (let col = minCol; col <= maxCol; col++) {\r\n        for (let row = minRow; row <= maxRow; row++) {\r\n            const hex = convert(new OffsetCoord(col, row));\r\n            results.push(hex);\r\n        }\r\n    }\r\n    return results;\r\n}\r\n\r\n/* Specifically for doubled grid diagrams */\r\nexport function makeRDoubledRectangularShape(minCol: number, maxCol: number, minRow: number, maxRow: number) {\r\n    const results = [];\r\n    for (let row = minRow; row <= maxRow; row++) {\r\n        for (let col = minCol + (row & 1); col <= maxCol; col += 2) {\r\n            const hex = new DoubledCoord(col, row).rdoubledToCube();\r\n            results.push(hex);\r\n        }\r\n    }\r\n    return results;\r\n}\r\n\r\nexport function makeLine(A: Hex, B: Hex) {\r\n    /* see https://www.redblobgames.com/grids/line-drawing.html */\r\n\r\n    /* HACK: add a tiny offset to the start point to break ties,\r\n     * because there are a lot of ties on a grid, and I want it to\r\n     * always round the same direction for consistency. To demonstrate\r\n     * the need for this hack, draw a line from Hex(-5, 0, +5) to\r\n     * Hex(+5, -5, 0). Without the hack, there are points on the edge\r\n     * that will sometimes be rounded one way and sometimes the other.\r\n     * The hack will force them to be rounded consistently. */\r\n    const offset = new Hex(1e-6, 2e-6, -3e-6);\r\n\r\n    const N = A.subtract(B).len();\r\n    const results = [];\r\n    for (let i = 0; i <= N; i++) {\r\n        results.push(\r\n            A.lerp(B, i / Math.max(1, N))\r\n                .add(offset)\r\n                .round()\r\n        );\r\n    }\r\n    return results;\r\n}\r\n\r\nexport class Point {\r\n    constructor(public x: number, public y: number) {}\r\n}\r\n\r\nexport class Hex {\r\n    public static directions: Hex[] = [\r\n        new Hex(1, 0, -1),\r\n        new Hex(1, -1, 0),\r\n        new Hex(0, -1, 1),\r\n        new Hex(-1, 0, 1),\r\n        new Hex(-1, 1, 0),\r\n        new Hex(0, 1, -1)\r\n    ];\r\n\r\n    public static diagonals: Hex[] = [\r\n        new Hex(2, -1, -1),\r\n        new Hex(1, -2, 1),\r\n        new Hex(-1, -1, 2),\r\n        new Hex(-2, 1, 1),\r\n        new Hex(-1, 2, -1),\r\n        new Hex(1, 1, -2)\r\n    ];\r\n\r\n    public static direction(direction: number): Hex {\r\n        return Hex.directions[direction];\r\n    }\r\n\r\n    private n8s!: Hex[];\r\n    private roundHex!: Hex;\r\n\r\n    constructor(public q: number, public r: number, public s: number) {\r\n        if (Math.round(q + r + s) !== 0) throw new Error(\"q + r + s must be 0\");\r\n    }\r\n\r\n    get id() {\r\n        return `${this.q} ${this.r} ${this.s}`;\r\n    }\r\n\r\n    public add(b: Hex): Hex {\r\n        return new Hex(this.q + b.q, this.r + b.r, this.s + b.s);\r\n    }\r\n\r\n    public subtract(b: Hex): Hex {\r\n        return new Hex(this.q - b.q, this.r - b.r, this.s - b.s);\r\n    }\r\n\r\n    public scale(k: number): Hex {\r\n        return new Hex(this.q * k, this.r * k, this.s * k);\r\n    }\r\n\r\n    public rotateLeft(): Hex {\r\n        return new Hex(-this.s, -this.q, -this.r);\r\n    }\r\n\r\n    public rotateRight(): Hex {\r\n        return new Hex(-this.r, -this.s, -this.q);\r\n    }\r\n\r\n    public neighbors(): Hex[] {\r\n        if (this.n8s) return this.n8s;\r\n        this.n8s = Hex.directions.map(direction => this.add(direction));\r\n        return this.n8s;\r\n    }\r\n\r\n    public neighbor(direction: number): Hex {\r\n        return this.neighbors()[direction];\r\n    }\r\n\r\n    public diagonalNeighbor(direction: number): Hex {\r\n        return this.add(Hex.diagonals[direction]);\r\n    }\r\n\r\n    public len(): number {\r\n        return (Math.abs(this.q) + Math.abs(this.r) + Math.abs(this.s)) / 2;\r\n    }\r\n\r\n    public distance(b: Hex): number {\r\n        return this.subtract(b).len();\r\n    }\r\n\r\n    public round(): Hex {\r\n        if (this.roundHex) return this.roundHex;\r\n        let qi: number = Math.round(this.q);\r\n        let ri: number = Math.round(this.r);\r\n        let si: number = Math.round(this.s);\r\n        const qDiff: number = Math.abs(qi - this.q);\r\n        const rDiff: number = Math.abs(ri - this.r);\r\n        const sDiff: number = Math.abs(si - this.s);\r\n        if (qDiff > rDiff && qDiff > sDiff) {\r\n            qi = -ri - si;\r\n        } else if (rDiff > sDiff) {\r\n            ri = -qi - si;\r\n        } else {\r\n            si = -qi - ri;\r\n        }\r\n        this.roundHex = new Hex(qi, ri, si);\r\n        return this.roundHex;\r\n    }\r\n\r\n    public lerp(b: Hex, t: number): Hex {\r\n        return new Hex(this.q * (1 - t) + b.q * t, this.r * (1 - t) + b.r * t, this.s * (1 - t) + b.s * t);\r\n    }\r\n\r\n    public linedraw(b: Hex): Hex[] {\r\n        const N: number = this.distance(b);\r\n        const aNudge: Hex = new Hex(this.q + 0.000001, this.r + 0.000001, this.s - 0.000002);\r\n        const bNudge: Hex = new Hex(b.q + 0.000001, b.r + 0.000001, b.s - 0.000002);\r\n        const results: Hex[] = [];\r\n        const step: number = 1.0 / Math.max(N, 1);\r\n        for (let i = 0; i <= N; i++) {\r\n            results.push(aNudge.lerp(bNudge, step * i).round());\r\n        }\r\n        return results;\r\n    }\r\n}\r\n\r\nexport class OffsetCoord {\r\n    public static EVEN: number = 1;\r\n    public static ODD: number = -1;\r\n\r\n    public static qoffsetFromCube(offset: number, h: Hex): OffsetCoord {\r\n        const col: number = h.q;\r\n        const row: number = h.r + (h.q + offset * (h.q & 1)) / 2;\r\n        return new OffsetCoord(col, row);\r\n    }\r\n\r\n    public static qoffsetToCube(offset: number, h: OffsetCoord): Hex {\r\n        const q: number = h.col;\r\n        const r: number = h.row - (h.col + offset * (h.col & 1)) / 2;\r\n        const s: number = -q - r;\r\n        return new Hex(q, r, s);\r\n    }\r\n\r\n    public static roffsetFromCube(offset: number, h: Hex): OffsetCoord {\r\n        const col: number = h.q + (h.r + offset * (h.r & 1)) / 2;\r\n        const row: number = h.r;\r\n        return new OffsetCoord(col, row);\r\n    }\r\n\r\n    public static roffsetToCube(offset: number, h: OffsetCoord): Hex {\r\n        const q: number = h.col - (h.row + offset * (h.row & 1)) / 2;\r\n        const r: number = h.row;\r\n        const s: number = -q - r;\r\n        return new Hex(q, r, s);\r\n    }\r\n    constructor(public col: number, public row: number) {}\r\n}\r\n\r\nexport class DoubledCoord {\r\n    public static qdoubledFromCube(h: Hex): DoubledCoord {\r\n        const col: number = h.q;\r\n        const row: number = 2 * h.r + h.q;\r\n        return new DoubledCoord(col, row);\r\n    }\r\n\r\n    public static rdoubledFromCube(h: Hex): DoubledCoord {\r\n        const col: number = 2 * h.q + h.r;\r\n        const row: number = h.r;\r\n        return new DoubledCoord(col, row);\r\n    }\r\n\r\n    constructor(public col: number, public row: number) {}\r\n\r\n    public qdoubledToCube(): Hex {\r\n        const q: number = this.col;\r\n        const r: number = (this.row - this.col) / 2;\r\n        const s: number = -q - r;\r\n        return new Hex(q, r, s);\r\n    }\r\n\r\n    public rdoubledToCube(): Hex {\r\n        const q: number = (this.col - this.row) / 2;\r\n        const r: number = this.row;\r\n        const s: number = -q - r;\r\n        return new Hex(q, r, s);\r\n    }\r\n}\r\n\r\nexport class Orientation {\r\n    constructor(\r\n        public f0: number,\r\n        public f1: number,\r\n        public f2: number,\r\n        public f3: number,\r\n        public b0: number,\r\n        public b1: number,\r\n        public b2: number,\r\n        public b3: number,\r\n        public startAngle: number\r\n    ) {}\r\n}\r\n\r\nexport class Layout {\r\n    public static pointy: Orientation = new Orientation(\r\n        Math.sqrt(3.0),\r\n        Math.sqrt(3.0) / 2.0,\r\n        0.0,\r\n        3.0 / 2.0,\r\n        Math.sqrt(3.0) / 3.0,\r\n        -1.0 / 3.0,\r\n        0.0,\r\n        2.0 / 3.0,\r\n        0.5\r\n    );\r\n    public static flat: Orientation = new Orientation(\r\n        3.0 / 2.0,\r\n        0.0,\r\n        Math.sqrt(3.0) / 2.0,\r\n        Math.sqrt(3.0),\r\n        2.0 / 3.0,\r\n        0.0,\r\n        -1.0 / 3.0,\r\n        Math.sqrt(3.0) / 3.0,\r\n        0.0\r\n    );\r\n    constructor(public orientation: Orientation, public size: Point, public origin: Point) {}\r\n\r\n    public hexToPixel(h: Hex): Point {\r\n        const M: Orientation = this.orientation;\r\n        const size: Point = this.size;\r\n        const origin: Point = this.origin;\r\n        const x: number = (M.f0 * h.q + M.f1 * h.r) * size.x;\r\n        const y: number = (M.f2 * h.q + M.f3 * h.r) * size.y;\r\n        return new Point(x + origin.x, y + origin.y);\r\n    }\r\n\r\n    public pixelToHex(p: Point): Hex {\r\n        const M: Orientation = this.orientation;\r\n        const size: Point = this.size;\r\n        const origin: Point = this.origin;\r\n        const pt: Point = new Point((p.x - origin.x) / size.x, (p.y - origin.y) / size.y);\r\n        const q: number = M.b0 * pt.x + M.b1 * pt.y;\r\n        const r: number = M.b2 * pt.x + M.b3 * pt.y;\r\n        return new Hex(q, r, -q - r);\r\n    }\r\n\r\n    public hexCornerOffset(corner: number): Point {\r\n        const M: Orientation = this.orientation;\r\n        const size: Point = this.size;\r\n        const angle: number = (2.0 * Math.PI * (M.startAngle - corner)) / 6;\r\n        return new Point(size.x * Math.cos(angle), size.y * Math.sin(angle));\r\n    }\r\n\r\n    public polygonCorners(h: Hex): Point[] {\r\n        const corners: Point[] = [];\r\n        const center: Point = this.hexToPixel(h);\r\n        for (let i = 0; i < 6; i++) {\r\n            const offset: Point = this.hexCornerOffset(i);\r\n            corners.push(new Point(center.x + offset.x, center.y + offset.y));\r\n        }\r\n        return corners;\r\n    }\r\n}\r\n","import {IGridNode, IGridParams} from \"./types\";\r\nimport * as hexagons from \"./hexagons\";\r\nimport {IPoint} from \"./../../utils/geom\";\r\n\r\nconst makeNeighbors2 = (h: hexagons.Hex): hexagons.Hex[] => {\r\n    const n2: hexagons.Hex[] = Array.from(\r\n        new Set<hexagons.Hex>(([] as hexagons.Hex[]).concat.apply([], h.neighbors().map(hh => hh.neighbors())))\r\n    );\r\n    return n2;\r\n};\r\n\r\nexport default class Grid {\r\n    public gridArr: IGridNode[];\r\n    public edges: number[];\r\n    public gridHash: {[key: string]: number};\r\n    private _layout: hexagons.Layout;\r\n    private _hexes: hexagons.Hex[];\r\n\r\n    constructor(public gridLayout: IGridParams) {\r\n        this._hexes = hexagons.makeRDoubledRectangularShape(0, gridLayout.columns, 0, gridLayout.rows);\r\n        console.log(`gid with ${this._hexes.length} hexes`);\r\n        const hIds = this._hexes.reduce(\r\n            (acc: {[key: string]: number}, cur: hexagons.Hex, i: number) => {\r\n                acc[cur.id] = i;\r\n                return acc;\r\n            },\r\n            {} as {[key: string]: number}\r\n        );\r\n        this._layout = new hexagons.Layout(\r\n            hexagons.Layout.pointy,\r\n            {x: gridLayout.hexSize, y: gridLayout.hexSize},\r\n            {x: 0, y: 0}\r\n        );\r\n        this.gridHash = {};\r\n        this.gridArr = this._hexes.map((h, i) => {\r\n            const entry: IGridNode = {\r\n                id: h.id,\r\n                neighbors: h.neighbors().map(n => hIds[n.id]),\r\n                neighbors2: makeNeighbors2(h)\r\n                    .map(n => hIds[n.id])\r\n                    .filter(id => String(id) !== String(h.id)),\r\n                position: this._layout.hexToPixel(h)\r\n            };\r\n            this.gridHash[entry.id] = i;\r\n            return entry;\r\n        });\r\n        this.edges = this.gridArr.reduce((acc, cur, i) => {\r\n            if (cur.neighbors.findIndex(v => typeof v === \"undefined\") !== -1) acc.push(i);\r\n            return acc;\r\n        }, new Array<number>());\r\n    }\r\n\r\n    public getHexShape(): IPoint[] {\r\n        return this._layout.polygonCorners(this._hexes[0]);\r\n    }\r\n\r\n    public getHexPosAtPixel(world: IPoint): IPoint {\r\n        return this._layout.hexToPixel(this._layout.pixelToHex(world));\r\n    }\r\n\r\n    public getPosAtNode(nodeId: number): IPoint {\r\n        const node = this.gridArr[nodeId];\r\n        if (!node) throw new Error(`Node ${nodeId} not found`);\r\n        return {...node.position};\r\n    }\r\n\r\n    public getHexIdByPixel(position: IPoint): number {\r\n        const hex = this._layout.pixelToHex(position).round();\r\n        return this.gridHash[hex.id];\r\n    }\r\n}\r\n","import makeCamera from \"../makeCamera\";\r\nimport Grid from \"../../scentmap/hexgrid/Grid\";\r\n\r\nexport default function makeGridCamera(pixi: PIXI.Application, grid: Grid, hexSize: number) {\r\n    const lastNode = grid.gridArr[grid.gridArr.length - 1];\r\n    const height = lastNode.position.y + hexSize * 2;\r\n    const width = lastNode.position.x + hexSize * 2;\r\n\r\n    const cam = makeCamera(pixi, width, height)\r\n        // .wheel()\r\n        .drag()\r\n        // .pinch()\r\n        // .decelerate()\r\n        .clamp({direction: \"all\", underflow: \"center\"})\r\n        .clampZoom({minWidth: width, minHeight: height});\r\n    // .bounce()\r\n    cam.position.set(width / 2, height / 2);\r\n    return cam;\r\n}\r\n","import {Viewport} from \"pixi-viewport\";\r\n\r\nexport default function makeCamera(pixi: PIXI.Application, worldWidth: number, worldHeight: number) {\r\n    const viewport = new Viewport({\r\n        screenWidth: window.innerWidth,\r\n        screenHeight: window.innerHeight,\r\n        worldWidth,\r\n        worldHeight\r\n    });\r\n    pixi.stage.addChild(viewport);\r\n    return viewport;\r\n}\r\n","/*\r\n * A speed-improved perlin and simplex noise algorithms for 2D.\r\n *\r\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\r\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\r\n * Better rank ordering method by Stefan Gustavson in 2012.\r\n * Converted to Javascript by Joseph Gentle.\r\n *\r\n * Version 2012-03-09\r\n *\r\n * This code was placed in the public domain by its original author,\r\n * Stefan Gustavson. You may use it as you see fit, but\r\n * attribution is appreciated.\r\n *===========================================================\r\n * reworked by Alex Tavor to work nicely with TS and ES6\r\n */\r\n\r\nclass Grad {\r\n    constructor(public x: number, public y: number, public z: number) {}\r\n    public dot2(x: number, y: number) {\r\n        return this.x * x + this.y * y;\r\n    }\r\n    public dot3(x: number, y: number, z: number) {\r\n        return this.x * x + this.y * y + this.z * z;\r\n    }\r\n}\r\n\r\nconst grad3 = [\r\n    new Grad(1, 1, 0),\r\n    new Grad(-1, 1, 0),\r\n    new Grad(1, -1, 0),\r\n    new Grad(-1, -1, 0),\r\n    new Grad(1, 0, 1),\r\n    new Grad(-1, 0, 1),\r\n    new Grad(1, 0, -1),\r\n    new Grad(-1, 0, -1),\r\n    new Grad(0, 1, 1),\r\n    new Grad(0, -1, 1),\r\n    new Grad(0, 1, -1),\r\n    new Grad(0, -1, -1)\r\n];\r\n\r\nconst p = [\r\n    151,\r\n    160,\r\n    137,\r\n    91,\r\n    90,\r\n    15,\r\n    131,\r\n    13,\r\n    201,\r\n    95,\r\n    96,\r\n    53,\r\n    194,\r\n    233,\r\n    7,\r\n    225,\r\n    140,\r\n    36,\r\n    103,\r\n    30,\r\n    69,\r\n    142,\r\n    8,\r\n    99,\r\n    37,\r\n    240,\r\n    21,\r\n    10,\r\n    23,\r\n    190,\r\n    6,\r\n    148,\r\n    247,\r\n    120,\r\n    234,\r\n    75,\r\n    0,\r\n    26,\r\n    197,\r\n    62,\r\n    94,\r\n    252,\r\n    219,\r\n    203,\r\n    117,\r\n    35,\r\n    11,\r\n    32,\r\n    57,\r\n    177,\r\n    33,\r\n    88,\r\n    237,\r\n    149,\r\n    56,\r\n    87,\r\n    174,\r\n    20,\r\n    125,\r\n    136,\r\n    171,\r\n    168,\r\n    68,\r\n    175,\r\n    74,\r\n    165,\r\n    71,\r\n    134,\r\n    139,\r\n    48,\r\n    27,\r\n    166,\r\n    77,\r\n    146,\r\n    158,\r\n    231,\r\n    83,\r\n    111,\r\n    229,\r\n    122,\r\n    60,\r\n    211,\r\n    133,\r\n    230,\r\n    220,\r\n    105,\r\n    92,\r\n    41,\r\n    55,\r\n    46,\r\n    245,\r\n    40,\r\n    244,\r\n    102,\r\n    143,\r\n    54,\r\n    65,\r\n    25,\r\n    63,\r\n    161,\r\n    1,\r\n    216,\r\n    80,\r\n    73,\r\n    209,\r\n    76,\r\n    132,\r\n    187,\r\n    208,\r\n    89,\r\n    18,\r\n    169,\r\n    200,\r\n    196,\r\n    135,\r\n    130,\r\n    116,\r\n    188,\r\n    159,\r\n    86,\r\n    164,\r\n    100,\r\n    109,\r\n    198,\r\n    173,\r\n    186,\r\n    3,\r\n    64,\r\n    52,\r\n    217,\r\n    226,\r\n    250,\r\n    124,\r\n    123,\r\n    5,\r\n    202,\r\n    38,\r\n    147,\r\n    118,\r\n    126,\r\n    255,\r\n    82,\r\n    85,\r\n    212,\r\n    207,\r\n    206,\r\n    59,\r\n    227,\r\n    47,\r\n    16,\r\n    58,\r\n    17,\r\n    182,\r\n    189,\r\n    28,\r\n    42,\r\n    223,\r\n    183,\r\n    170,\r\n    213,\r\n    119,\r\n    248,\r\n    152,\r\n    2,\r\n    44,\r\n    154,\r\n    163,\r\n    70,\r\n    221,\r\n    153,\r\n    101,\r\n    155,\r\n    167,\r\n    43,\r\n    172,\r\n    9,\r\n    129,\r\n    22,\r\n    39,\r\n    253,\r\n    19,\r\n    98,\r\n    108,\r\n    110,\r\n    79,\r\n    113,\r\n    224,\r\n    232,\r\n    178,\r\n    185,\r\n    112,\r\n    104,\r\n    218,\r\n    246,\r\n    97,\r\n    228,\r\n    251,\r\n    34,\r\n    242,\r\n    193,\r\n    238,\r\n    210,\r\n    144,\r\n    12,\r\n    191,\r\n    179,\r\n    162,\r\n    241,\r\n    81,\r\n    51,\r\n    145,\r\n    235,\r\n    249,\r\n    14,\r\n    239,\r\n    107,\r\n    49,\r\n    192,\r\n    214,\r\n    31,\r\n    181,\r\n    199,\r\n    106,\r\n    157,\r\n    184,\r\n    84,\r\n    204,\r\n    176,\r\n    115,\r\n    121,\r\n    50,\r\n    45,\r\n    127,\r\n    4,\r\n    150,\r\n    254,\r\n    138,\r\n    236,\r\n    205,\r\n    93,\r\n    222,\r\n    114,\r\n    67,\r\n    29,\r\n    24,\r\n    72,\r\n    243,\r\n    141,\r\n    128,\r\n    195,\r\n    78,\r\n    66,\r\n    215,\r\n    61,\r\n    156,\r\n    180\r\n];\r\n// To remove the need for index wrapping, double the permutation table length\r\nconst perm = new Array(512);\r\nconst gradP = new Array(512);\r\n\r\n// This isn't a very good seeding function, but it works ok. It supports 2^16\r\n// different seed values. Write something better if you need more seeds.\r\nexport const seed = (s: number = 0) => {\r\n    if (s > 0 && s < 1) {\r\n        // Scale the seed out\r\n        s *= 65536;\r\n    }\r\n\r\n    s = Math.floor(s);\r\n    if (s < 256) {\r\n        s |= s << 8;\r\n    }\r\n\r\n    for (let i = 0; i < 256; i++) {\r\n        let v;\r\n        if (i & 1) {\r\n            v = p[i] ^ (s & 255);\r\n        } else {\r\n            v = p[i] ^ ((s >> 8) & 255);\r\n        }\r\n\r\n        perm[i] = perm[i + 256] = v;\r\n        gradP[i] = gradP[i + 256] = grad3[v % 12];\r\n    }\r\n};\r\n\r\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\r\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\r\nconst G2 = (3 - Math.sqrt(3)) / 6;\r\n\r\nconst F3 = 1 / 3;\r\nconst G3 = 1 / 6;\r\n\r\n// 2D simplex noise\r\nexport const simplex2 = (xin: number, yin: number) => {\r\n    let n0, n1, n2; // Noise contributions from the three corners\r\n    // Skew the input space to determine which simplex cell we're in\r\n    const s = (xin + yin) * F2; // Hairy factor for 2D\r\n    let i = Math.floor(xin + s);\r\n    let j = Math.floor(yin + s);\r\n    const t = (i + j) * G2;\r\n    const x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\r\n    const y0 = yin - j + t;\r\n    // For the 2D case, the simplex shape is an equilateral triangle.\r\n    // Determine which simplex we are in.\r\n    let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n    if (x0 > y0) {\r\n        // lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n        i1 = 1;\r\n        j1 = 0;\r\n    } else {\r\n        // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n        i1 = 0;\r\n        j1 = 1;\r\n    }\r\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n    // c = (3-sqrt(3))/6\r\n    const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n    const y1 = y0 - j1 + G2;\r\n    const x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n    const y2 = y0 - 1 + 2 * G2;\r\n    // Work out the hashed gradient indices of the three simplex corners\r\n    i &= 255;\r\n    j &= 255;\r\n    const gi0 = gradP[i + perm[j]];\r\n    const gi1 = gradP[i + i1 + perm[j + j1]];\r\n    const gi2 = gradP[i + 1 + perm[j + 1]];\r\n    // Calculate the contribution from the three corners\r\n    let t0 = 0.5 - x0 * x0 - y0 * y0;\r\n    if (t0 < 0) {\r\n        n0 = 0;\r\n    } else {\r\n        t0 *= t0;\r\n        n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\r\n    }\r\n    let t1 = 0.5 - x1 * x1 - y1 * y1;\r\n    if (t1 < 0) {\r\n        n1 = 0;\r\n    } else {\r\n        t1 *= t1;\r\n        n1 = t1 * t1 * gi1.dot2(x1, y1);\r\n    }\r\n    let t2 = 0.5 - x2 * x2 - y2 * y2;\r\n    if (t2 < 0) {\r\n        n2 = 0;\r\n    } else {\r\n        t2 *= t2;\r\n        n2 = t2 * t2 * gi2.dot2(x2, y2);\r\n    }\r\n    // Add contributions from each corner to get the final noise value.\r\n    // The result is scaled to return values in the interval [-1,1].\r\n    return 70 * (n0 + n1 + n2);\r\n};\r\n\r\n// 3D simplex noise\r\nexport const simplex3 = (xin: number, yin: number, zin: number) => {\r\n    let n0, n1, n2, n3; // Noise contributions from the four corners\r\n\r\n    // Skew the input space to determine which simplex cell we're in\r\n    const s = (xin + yin + zin) * F3; // Hairy factor for 2D\r\n    let i = Math.floor(xin + s);\r\n    let j = Math.floor(yin + s);\r\n    let k = Math.floor(zin + s);\r\n\r\n    const t = (i + j + k) * G3;\r\n    const x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\r\n    const y0 = yin - j + t;\r\n    const z0 = zin - k + t;\r\n\r\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n    // Determine which simplex we are in.\r\n    let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\r\n    let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\r\n    if (x0 >= y0) {\r\n        if (y0 >= z0) {\r\n            i1 = 1;\r\n            j1 = 0;\r\n            k1 = 0;\r\n            i2 = 1;\r\n            j2 = 1;\r\n            k2 = 0;\r\n        } else if (x0 >= z0) {\r\n            i1 = 1;\r\n            j1 = 0;\r\n            k1 = 0;\r\n            i2 = 1;\r\n            j2 = 0;\r\n            k2 = 1;\r\n        } else {\r\n            i1 = 0;\r\n            j1 = 0;\r\n            k1 = 1;\r\n            i2 = 1;\r\n            j2 = 0;\r\n            k2 = 1;\r\n        }\r\n    } else {\r\n        if (y0 < z0) {\r\n            i1 = 0;\r\n            j1 = 0;\r\n            k1 = 1;\r\n            i2 = 0;\r\n            j2 = 1;\r\n            k2 = 1;\r\n        } else if (x0 < z0) {\r\n            i1 = 0;\r\n            j1 = 1;\r\n            k1 = 0;\r\n            i2 = 0;\r\n            j2 = 1;\r\n            k2 = 1;\r\n        } else {\r\n            i1 = 0;\r\n            j1 = 1;\r\n            k1 = 0;\r\n            i2 = 1;\r\n            j2 = 1;\r\n            k2 = 0;\r\n        }\r\n    }\r\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n    // c = 1/6.\r\n    const x1 = x0 - i1 + G3; // Offsets for second corner\r\n    const y1 = y0 - j1 + G3;\r\n    const z1 = z0 - k1 + G3;\r\n\r\n    const x2 = x0 - i2 + 2 * G3; // Offsets for third corner\r\n    const y2 = y0 - j2 + 2 * G3;\r\n    const z2 = z0 - k2 + 2 * G3;\r\n\r\n    const x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\r\n    const y3 = y0 - 1 + 3 * G3;\r\n    const z3 = z0 - 1 + 3 * G3;\r\n\r\n    // Work out the hashed gradient indices of the four simplex corners\r\n    i &= 255;\r\n    j &= 255;\r\n    k &= 255;\r\n    const gi0 = gradP[i + perm[j + perm[k]]];\r\n    const gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\r\n    const gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\r\n    const gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\r\n\r\n    // Calculate the contribution from the four corners\r\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\r\n    if (t0 < 0) {\r\n        n0 = 0;\r\n    } else {\r\n        t0 *= t0;\r\n        n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\r\n    }\r\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\r\n    if (t1 < 0) {\r\n        n1 = 0;\r\n    } else {\r\n        t1 *= t1;\r\n        n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\r\n    }\r\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\r\n    if (t2 < 0) {\r\n        n2 = 0;\r\n    } else {\r\n        t2 *= t2;\r\n        n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\r\n    }\r\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\r\n    if (t3 < 0) {\r\n        n3 = 0;\r\n    } else {\r\n        t3 *= t3;\r\n        n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\r\n    }\r\n    // Add contributions from each corner to get the final noise value.\r\n    // The result is scaled to return values in the interval [-1,1].\r\n    return 32 * (n0 + n1 + n2 + n3);\r\n};\r\n\r\nfunction fade(t: number) {\r\n    return t * t * t * (t * (t * 6 - 15) + 10);\r\n}\r\n\r\nfunction lerp(a: number, b: number, t: number) {\r\n    return (1 - t) * a + t * b;\r\n}\r\n\r\n// 2D Perlin Noise\r\nexport const perlin2 = (x: number, y: number) => {\r\n    // Find unit grid cell containing point\r\n    let X = Math.floor(x),\r\n        Y = Math.floor(y);\r\n    // Get relative xy coordinates of point within that cell\r\n    x = x - X;\r\n    y = y - Y;\r\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n    X = X & 255;\r\n    Y = Y & 255;\r\n\r\n    // Calculate noise contributions from each of the four corners\r\n    const n00 = gradP[X + perm[Y]].dot2(x, y);\r\n    const n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\r\n    const n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\r\n    const n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\r\n\r\n    // Compute the fade curve value for x\r\n    const u = fade(x);\r\n\r\n    // Interpolate the four results\r\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\r\n};\r\n\r\n// 3D Perlin Noise\r\nexport const perlin3 = (x: number, y: number, z: number) => {\r\n    // Find unit grid cell containing point\r\n    let X = Math.floor(x),\r\n        Y = Math.floor(y),\r\n        Z = Math.floor(z);\r\n    // Get relative xyz coordinates of point within that cell\r\n    x = x - X;\r\n    y = y - Y;\r\n    z = z - Z;\r\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n    X = X & 255;\r\n    Y = Y & 255;\r\n    Z = Z & 255;\r\n\r\n    // Calculate noise contributions from each of the eight corners\r\n    const n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\r\n    const n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\r\n    const n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\r\n    const n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\r\n    const n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\r\n    const n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\r\n    const n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\r\n    const n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);\r\n\r\n    // Compute the fade curve value for x, y, z\r\n    const u = fade(x);\r\n    const v = fade(y);\r\n    const w = fade(z);\r\n\r\n    // Interpolate\r\n    return lerp(\r\n        lerp(lerp(n000, n100, u), lerp(n001, n101, u), w),\r\n        lerp(lerp(n010, n110, u), lerp(n011, n111, u), w),\r\n        v\r\n    );\r\n};\r\n","import {hslToRgb, rgbArrayToHex} from \"../../utils/colorConversions\";\r\nimport {Sprite} from \"pixi.js\";\r\nimport Grid from \"../../scentmap/hexgrid/Grid\";\r\nimport * as noise from \"../../utils/simplexNoise\";\r\n\r\nnoise.seed(Math.random());\r\nconst defaultSpeed = 1;\r\nlet step = 0;\r\nlet current = Date.now();\r\nexport default function repaintWithNoise(\r\n    grid: Grid,\r\n    sprites: Sprite[],\r\n    scale: number = 0,\r\n    speed: number = defaultSpeed\r\n) {\r\n    const noiseScale = !scale ? Math.sqrt(grid.gridArr.length) * 12 : scale;\r\n    sprites.forEach((sprite: Sprite, i: number) => {\r\n        const position = grid.gridArr[i].position;\r\n        const rgb2 = hslToRgb(noise.simplex3(position.x / noiseScale, position.y / noiseScale, step), 0.5, 0.5);\r\n        const tint = rgbArrayToHex(rgb2);\r\n        sprite.tint = tint;\r\n    });\r\n    const nc = Date.now();\r\n    step += speed / (nc - current);\r\n    current = nc;\r\n}\r\n","import Grid from \"../scentmap/hexgrid/Grid\";\r\nimport {IDisplay} from \"./types\";\r\nimport {makePixiApp} from \"./makePixiApp\";\r\nimport {makeHexTexture} from \"./hexgrid/makeHexTexture\";\r\nimport {makeHexesGrid} from \"./hexgrid/makeHexesGrid\";\r\nimport makeGridCamera from \"./hexgrid/makeGridCamera\";\r\nimport repaintWithNoise from \"./hexgrid/repaintWithNoise\";\r\nimport {animationLoop} from \"../utils/loop/animationLoop\";\r\nimport addPrettyHexesClick from \"./hexgrid/addPrettyHexesClick\";\r\nimport {makeWallsView} from \"./walls/makeWallsView\";\r\n\r\nexport enum BgType {\r\n    staticNoise,\r\n    animatedNoise,\r\n    prettyHexesClick,\r\n    none\r\n}\r\n\r\nexport default function makeDisplay(\r\n    gameCanvas: HTMLDivElement,\r\n    grid: Grid,\r\n    walls: number[],\r\n    bgType: BgType = BgType.none\r\n): IDisplay {\r\n    const hs = grid.gridLayout.hexSize;\r\n    const pixi = makePixiApp(window.innerWidth - hs * 0.5, window.innerHeight - hs * 0.5);\r\n    const tex = makeHexTexture(grid, pixi);\r\n    const hexes = makeHexesGrid(grid, tex);\r\n    const bgSprites = hexes.nodes;\r\n    const camera = makeGridCamera(pixi, grid, hs);\r\n    const repaint = () => repaintWithNoise(grid, bgSprites, grid.gridArr.length / 10, 0.01);\r\n    switch (bgType) {\r\n        case BgType.animatedNoise:\r\n            animationLoop(repaint);\r\n            break;\r\n        case BgType.prettyHexesClick:\r\n            addPrettyHexesClick(grid, camera, hexes.nodes);\r\n            break;\r\n        case BgType.staticNoise:\r\n            repaint();\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    camera.addChild(hexes.view);\r\n\r\n    const wallsView = makeWallsView(grid, walls, tex);\r\n    camera.addChild(wallsView.view);\r\n\r\n    gameCanvas.appendChild(pixi.view);\r\n\r\n    return {pixi, bgSprites, camera, hexTexture: tex, wallsSprites: wallsView.nodes};\r\n}\r\n","import {ClickEventData} from \"pixi-viewport\";\r\nimport Grid from \"../../scentmap/hexgrid/Grid\";\r\nimport {distanceSq} from \"../../utils/geom\";\r\nimport {Sprite} from \"pixi.js\";\r\nimport {hexToRgb, rgbToHsl, rgbArrayToHex, hslToRgb} from \"../../utils/colorConversions\";\r\n\r\nexport default function addPrettyHexesClick(grid: Grid, camera: any, hexes: Sprite[]) {\r\n    const getDistances = (hexPoint: {x: number; y: number}) => {\r\n        let maxDist = 0;\r\n        const distances = grid.gridArr.map(node => {\r\n            const dist = distanceSq(hexPoint, node.position);\r\n            dist >= maxDist && (maxDist = dist);\r\n            return dist;\r\n        });\r\n        return {maxDist, distances};\r\n    };\r\n    const processNodesForDistance = (dist: {maxDist: number; distances: number[]}) => (\r\n        node: PIXI.Sprite,\r\n        i: number\r\n    ) => {\r\n        const rgb = hexToRgb(node.tint);\r\n        const hsl = rgbToHsl(rgb.r, rgb.g, rgb.g);\r\n        const d = Math.sqrt(dist.distances[i] / dist.maxDist);\r\n        hsl[0] = d;\r\n        hsl[1] = hsl[2] = 0.5;\r\n        // @ts-ignore\r\n        const rgb2 = hslToRgb(...hsl);\r\n        const hex2 = rgbArrayToHex(rgb2);\r\n        node.tint = hex2;\r\n    };\r\n    const onViewClicked = (data: ClickEventData) => {\r\n        const hexPoint = grid.getHexPosAtPixel(data.world);\r\n        const processNode = processNodesForDistance(getDistances(hexPoint));\r\n        hexes.forEach(processNode);\r\n    };\r\n    camera.on(\"clicked\", onViewClicked);\r\n}\r\n","import * as PIXI from \"pixi.js\";\r\n\r\nexport function makePixiApp(width: number = window.innerWidth, height: number = window.innerHeight) {\r\n    const app = new PIXI.Application({\r\n        width,\r\n        height,\r\n        transparent: true\r\n    });\r\n    return app;\r\n}\r\n","import Grid from \"./../../scentmap/hexgrid/Grid\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\nexport function makeHexTexture(grid: Grid, app: PIXI.Application) {\r\n    const graphics = new PIXI.Graphics();\r\n    graphics.lineStyle(1, 0xffffff);\r\n    graphics.beginFill(0xffffff);\r\n    const corners = grid.getHexShape();\r\n    const pixiCorners = corners.map((c: any) => {\r\n        return new PIXI.Point(c.x, c.y);\r\n    });\r\n    const poly = new PIXI.Polygon(pixiCorners);\r\n    // poly.close();\r\n    graphics.drawPolygon(poly);\r\n    graphics.endFill();\r\n    return app.renderer.generateTexture(graphics, PIXI.SCALE_MODES.NEAREST, 1);\r\n}\r\n","import Grid from \"./../../scentmap/hexgrid/Grid\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\nexport function makeWallsView(grid: Grid, walls: number[], tex: PIXI.Texture) {\r\n    const view = new PIXI.ParticleContainer(500000, {\r\n        tint: true\r\n    });\r\n    const nodes = grid.gridArr.map((node, i) => {\r\n        const sprite = new PIXI.Sprite(tex);\r\n        sprite.position.set(node.position.x, node.position.y);\r\n        view.addChild(sprite);\r\n        sprite.tint = 0xffff80;\r\n        sprite.alpha = Math.abs(walls[i] - 1);\r\n        return sprite;\r\n    });\r\n    return {view, nodes};\r\n}\r\n","import Grid from \"../../scentmap/hexgrid/Grid\";\r\nimport {makeWalls} from \"../../scentmap/walls/makeWalls\";\r\nimport makeDisplay, {BgType} from \"../../pixi/makeDisplay\";\r\nimport {GridMap} from \"types\";\r\n\r\nconst rows = 50;\r\nconst columns = rows;\r\nconst hexSize = 10;\r\n\r\nexport const makeMap = (gameCanvas: HTMLDivElement) => {\r\n    const grid = new Grid({rows, columns, hexSize});\r\n    const walls = makeWalls(grid);\r\n    const display = makeDisplay(gameCanvas, grid, walls, BgType.none);\r\n    return {grid, walls, display} as GridMap;\r\n};\r\n","import Grid from \"../hexgrid/Grid\";\r\n\r\nexport function makeWalls(grid: Grid) {\r\n    const numNodes = grid.gridArr.length;\r\n    const walls: number[] = new Array(numNodes).fill(1);\r\n    walls.forEach((w, i) => {\r\n        grid.edges.indexOf(i) !== -1 && (walls[i] = 0);\r\n    });\r\n    return walls;\r\n}\r\n","const config = {min: 0, refillPerSecond: 20};\r\n\r\nexport function makeFillbars(bars: {max: number; top: number; bottom: number}) {\r\n    const updateBar = (bar: number, delta: number) => {\r\n        const result = bar + config.refillPerSecond * delta;\r\n        if (result >= bars.max) {\r\n            return bars.max;\r\n        }\r\n        return result;\r\n    };\r\n    const update = (delta: number) => {\r\n        bars.top = updateBar(bars.top, delta);\r\n        bars.bottom = updateBar(bars.bottom, delta);\r\n    };\r\n    return {bars, update};\r\n}\r\n","import timeVariableLoop from \"utils/loop/timeVariableLoop\";\r\nimport {makeCollectors} from \"game/makeCollectors\";\r\nimport {GameState} from \"components/types\";\r\nimport {makeScentDroppers} from \"./makeScentDroppers\";\r\nimport {makeBoids, populateBoids} from \"./makeBoids\";\r\nimport {makeAvoidScent} from \"./makeAvoidScent\";\r\nimport {makeMap} from \"./makeMap\";\r\nimport {makeFillbars} from \"game/makeFillbars\";\r\nimport {GridBoids} from \"boids/GridBoids\";\r\n\r\nconst makeSyncPeers = (\r\n    gameState: GameState,\r\n    droppers: {dropFromPeer: (nodes: number[]) => void},\r\n    boids: GridBoids\r\n) => () => {\r\n    const ls = gameState.lobbyState;\r\n    if (!ls) return;\r\n    if (ls.otherPeerData.nodesTouched && ls.otherPeerData.nodesTouched.length) {\r\n        droppers.dropFromPeer(ls.otherPeerData.nodesTouched);\r\n        ls.otherPeerData.nodesTouched = [] as number[];\r\n    }\r\n    if (ls.ownPeerData.isOP) {\r\n        ls.ownPeerData.isGameOver = gameState.isGameOver;\r\n        ls.ownPeerData.score = {...gameState.score};\r\n        ls.ownPeerData.boids = boids.boids.map(boid => ({\r\n            position: {x: boid.position.x, y: boid.position.y},\r\n            velocity: boid.velocity\r\n        }));\r\n    } else {\r\n        const isOtherGameOver = Boolean(ls.otherPeerData.isGameOver);\r\n        if (gameState.isGameOver && !isOtherGameOver) {\r\n            gameState.actions.startGame();\r\n        } else if (!gameState.isGameOver && isOtherGameOver) {\r\n            gameState.actions.endGame();\r\n        }\r\n        if (ls.otherPeerData.score) {\r\n            gameState.score.top = ls.otherPeerData.score.top;\r\n            gameState.score.bottom = ls.otherPeerData.score.bottom;\r\n        }\r\n        // sync boids\r\n        if (!gameState.isGameOver && ls.otherPeerData.boids && ls.otherPeerData.boids.length) {\r\n            while (ls.otherPeerData.boids.length > boids.boids.length) {\r\n                const maxIndex = boids.boids.length;\r\n                const peerBoid = ls.otherPeerData.boids[maxIndex];\r\n                boids.addBoid(peerBoid.position);\r\n            }\r\n            ls.otherPeerData.boids.forEach((b, i) => {\r\n                if (boids.boids.length <= i) {\r\n                    boids.boids.pop();\r\n                    return;\r\n                }\r\n                boids.syncBoid(b, i);\r\n            });\r\n        }\r\n    }\r\n    if (ls.ownPeerData.isOP || (ls.ownPeerData.nodesTouched && ls.ownPeerData.nodesTouched.length)) {\r\n        ls.send && ls.send(ls.ownPeerData);\r\n        ls.ownPeerData.nodesTouched = [] as number[];\r\n    }\r\n};\r\nexport function initialize(gameCanvas: HTMLDivElement, gameState: GameState) {\r\n    const onTopScored = () => {\r\n        gameState.score.top += 1;\r\n    };\r\n    const onBottomScored = () => {\r\n        gameState.score.bottom += 1;\r\n    };\r\n    const map = makeMap(gameCanvas);\r\n    const scent = makeAvoidScent(map);\r\n    const boids = makeBoids(map, scent.data);\r\n    const collectors = makeCollectors({\r\n        display: map.display,\r\n        grid: map.grid,\r\n        boids,\r\n        colors: gameState.colors,\r\n        actions: {onTopScored, onBottomScored}\r\n    });\r\n    const fillbars = makeFillbars(gameState.fillbars);\r\n    const droppers = makeScentDroppers(gameState, map, scent.data, fillbars);\r\n    const syncPeers = makeSyncPeers(gameState, droppers, boids);\r\n\r\n    const update = (delta: number) => {\r\n        collectors.update(delta);\r\n        droppers.update(delta);\r\n        scent.update(delta);\r\n        boids.update(delta);\r\n        fillbars.update(delta);\r\n        gameState.duration += delta;\r\n        syncPeers();\r\n    };\r\n    timeVariableLoop(gameState.time, update);\r\n    const reset = () => {\r\n        scent.data.scentGrid.forEach((v, i) => (scent.data.scentGrid[i] = 0));\r\n        droppers.droppers.updates = [];\r\n        boids.reset();\r\n        gameState.score.top = 0;\r\n        gameState.score.bottom = 0;\r\n        fillbars.bars.top = fillbars.bars.max;\r\n        fillbars.bars.bottom = fillbars.bars.max;\r\n        populateBoids(boids);\r\n    };\r\n    gameState.actions.reset = reset;\r\n}\r\n","import Grid from \"scentmap/hexgrid/Grid\";\r\nimport {IDisplay} from \"../pixi/types\";\r\nimport {makeBoidsViews} from \"pixi/boids/makeBoidsViews\";\r\nimport {GridBoids} from \"boids/GridBoids\";\r\nimport {collectorTouchedTween} from \"./collectorTouchedTween\";\r\n\r\nexport function makeCollectors(p: {\r\n    display: IDisplay;\r\n    grid: Grid;\r\n    boids: GridBoids;\r\n    colors: {top: number; bottom: number};\r\n    actions: {onTopScored: () => void; onBottomScored: () => void};\r\n}) {\r\n    const {display, grid, boids, colors, actions: callbacks} = p;\r\n    const top = Array.from({length: 22}, (n, i) => 53 + i);\r\n    const bottom = Array.from({length: 22}, (n, i) => 1226 + i);\r\n    const all = [...top, ...bottom];\r\n\r\n    const views = makeBoidsViews(display.hexTexture, top.length + bottom.length);\r\n    display.camera.addChild(views.view);\r\n\r\n    const effectViews = makeBoidsViews(display.hexTexture, top.length + bottom.length);\r\n    display.camera.addChild(effectViews.view);\r\n    const effectSprites = effectViews.sprites;\r\n\r\n    views.sprites.forEach((sprite, i) => {\r\n        sprite.tint = i < top.length ? colors.top : colors.bottom;\r\n        const p = grid.getPosAtNode(all[i]);\r\n        sprite.position.set(p.x, p.y);\r\n        sprite.scale.set(1, 1);\r\n\r\n        const effectSprite = effectSprites[i];\r\n        effectSprite.tint = i < top.length ? colors.top : colors.bottom;\r\n        effectSprite.position.set(p.x + effectSprite.width / 2, p.y + effectSprite.height / 2);\r\n        effectSprite.scale.set(1, 1);\r\n        effectSprite.anchor.set(0.5, 0.5);\r\n    });\r\n\r\n    const update = (delta: number) => {\r\n        boids.boids.forEach(boid => {\r\n            const ind = all.indexOf(boid.node);\r\n            if (ind !== -1) {\r\n                boids.removeBoid(boid);\r\n                const sprite = effectSprites[ind];\r\n                collectorTouchedTween({sprite});\r\n                ind < top.length ? callbacks.onTopScored() : callbacks.onBottomScored();\r\n            }\r\n        });\r\n    };\r\n\r\n    return {top, bottom, all, views, update};\r\n}\r\n","import React, {useRef, useEffect} from \"react\";\nimport {GameState, GAME_STATE} from \"components/types\";\nimport {observable, autorun, action} from \"mobx\";\nimport {Hud} from \"components/Hud\";\nimport {TimeCountdown} from \"components/duel/TimeCountdown\";\nimport {initialize} from \"./game/init/initialize\";\nimport {getLobbyState} from \"components/lobby/getLobbyState\";\n\n/*\n  TODO\n    * fillbar\n        * spend rate\n        * refill rate\n    proper ui\n        * game screen (hud)\n        * before game screen\n        * screens management\n        * practice screen\n            * hud\n               *  with back button\n                * without opponent stuff\n        * duel screen\n        * game over detection\n        * game over screens\n            * practice\n            * duel\n    * game time counter\n    * moar colors\n    peer connection\n        * matchmaking screen\n        * find/await peer, make connection\n        *  get mutual agreement to play\n            * each has to click \"READY\"\n        * pass data\n            * use PeerData\n                * get tap positions\n                * update and dispatch every tick\n        * solve sync\n        handle top/down players better\n        connection fail states\n            disconnection\n        better endgame screen for duel\n    solve bug where boids get stuck in walls\n    solve bug where switching tab and returning messes boids positions up\n*/\n\nfunction App() {\n    const canvasRef = useRef(null as HTMLDivElement | null);\n    const gameState = (observable({\n        gameState: GAME_STATE.intro,\n        score: {top: 0, bottom: 0},\n        fillbars: {max: 100, top: 100, bottom: 100},\n        colors: {top: 0x80ff80, bottom: 0xff8080},\n        duration: 0,\n        maxDuration: 30,\n        time: {speed: 1},\n        isGameOver: true\n    }) as any) as GameState;\n    // @ts-ignore\n    gameState.actions = {};\n    const ls = getLobbyState(gameState);\n    const endGame = action(() => {\n        gameState.time.speed = 0;\n        gameState.isGameOver = true;\n    });\n    const startGame = action(() => {\n        gameState.isGameOver = false;\n        gameState.actions.reset && gameState.actions.reset();\n        gameState.time.speed = 1;\n        gameState.duration = gameState.gameState === GAME_STATE.duel ? 0 : gameState.maxDuration;\n    });\n\n    gameState.actions.endGame = endGame;\n    gameState.actions.startGame = startGame;\n\n    useEffect(() => {\n        canvasRef.current && initialize(canvasRef.current, gameState);\n    }, [canvasRef]);\n\n    useEffect(() => {\n        return autorun(() => {\n            gameState.score.bottom + gameState.score.top >= 33 && endGame();\n        });\n    }, []);\n\n    useEffect(() => {\n        return autorun(\n            () =>\n                (gameState.gameState === GAME_STATE.practice || gameState.gameState === GAME_STATE.duel) && startGame()\n        );\n    }, []);\n    return (\n        <div style={{position: \"relative\", backgroundColor: \"black\", width: \"100vw\", height: \"100vh\"}}>\n            <TimeCountdown {...{data: gameState}} />\n            <div style={{position: \"fixed\"}} ref={canvasRef} />\n            <Hud {...{gameState}} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}